namespace InstrumentDrivers
{
    using System;
    using System.Runtime.InteropServices;


    public class rssma : object, System.IDisposable
    {

        private System.Runtime.InteropServices.HandleRef _handle;

        private bool _disposed = true;

        ~rssma() { Dispose(false); }


        /// <summary>
        /// This function creates an IVI instrument driver session, typically using the C session instrument handle.
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The instrument handle that is used to create an IVI instrument driver session.
        /// </param>
        public rssma(System.IntPtr Instrument_Handle)
        {
            this._handle = new System.Runtime.InteropServices.HandleRef(this, Instrument_Handle);
            this._disposed = false;
        }

        /// <summary>
        /// This function performs the following initialization actions:
        /// 
        /// - Opens a session to the Default Resource Manager resource and a session to the specified device using the interface and address specified in the Resource_Name control.
        /// 
        /// - Performs an identification query on the Instrument.
        /// 
        /// - Resets the instrument to a known state.
        /// 
        /// - Sends initialization commands to the instrument that set any necessary programmatic variables such as Headers Off, Short Command form, and Data Transfer Binary to the state necessary for the operation of the instrument driver.
        /// 
        /// - Returns an Instrument Handle which is used to differentiate between different sessions of this instrument driver.
        /// 
        /// - Each time this function is invoked a Unique Session is opened.  It is possible to have more than one session open for the same resource.
        /// 
        /// </summary>
        /// <param name="Resource_Name">
        /// This control specifies the interface and address of the device that is to be initialized (Instrument Descriptor). The exact grammar to be used in this control is shown in the note below. 
        /// 
        /// Default Value:  "GPIB::28"
        /// 
        /// Notes:
        /// 
        /// (1) Based on the Instrument Descriptor, this operation establishes a communication session with a device.  The grammar for the Instrument Descriptor is shown below.  Optional parameters are shown in square brackets ([]).
        /// 
        /// Interface   Grammar
        /// ------------------------------------------------------
        /// GPIB        GPIB[board]::primary address[::secondary address]
        ///             [::INSTR]
        /// VXI-11      TCPIP::remote_host::INSTR
        /// USB         USB::&lt;vendor Id&gt;::&lt;product Id&gt;::&lt;serial number&gt;  
        ///             
        /// The GPIB keyword is used for GPIB interface.
        /// The TCPIP keyword is used for VXI-11 interface.
        /// The USB keyword is used for USB interface, where                           
        ///  &lt;vendor Id&gt; is 0x0AAD for Rohde&amp;Schwarz                                    
        ///  &lt;product Id&gt; is 0x0048 for SMA100A                                         
        ///  &lt;serial number&gt; is Serial number (on the rear panel of                     
        ///  the instrument). For example 100001.
        /// 
        /// Examples:
        /// (1) GPIB   - "GPIB::28::INSTR"
        /// (2) VXI-11 - "TCPIP::192.168.1.33::INSTR"
        /// (3) USB    - "USB::0xAAD::0x0048::100001::INSTR"
        /// 
        /// The default value for optional parameters are shown below.
        /// 
        /// Optional Parameter          Default Value
        /// -----------------------------------------
        /// board                       0
        /// secondary address           none - 31
        /// 
        /// </param>
        /// <param name="ID_Query">
        /// This control specifies if an ID Query is sent to the instrument during the initialization procedure.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Skip Query
        /// VI_TRUE  (1) - Do Query (Default Value)
        /// 
        /// Notes:
        ///    
        /// (1) Under normal circumstances the ID Query ensures that the instrument initialized is the type supported by this driver. However circumstances may arise where it is undesirable to send an ID Query to the instrument.  In those cases; set this control to "Skip Query" and this function will initialize the selected interface, without doing an ID Query.
        /// 
        /// </param>
        /// <param name="Reset_Device">
        /// This control specifies if the instrument is to be reset to its power-on settings during the initialization procedure.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Don't Reset
        /// VI_TRUE  (1) - Reset Device (Default Value)
        /// 
        /// Notes:
        /// 
        /// (1) If you do not want the instrument reset. Set this control to "Don't Reset" while initializing the instrument.
        /// 
        /// </param>
        public rssma(string Resource_Name, bool ID_Query, bool Reset_Device)
        {
            IntPtr instrumentHandle;
            int pInvokeResult = PInvoke.init(Resource_Name, Convert.ToUInt16(ID_Query), Convert.ToUInt16(Reset_Device), out instrumentHandle);
            this._handle = new HandleRef(this, instrumentHandle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            this._disposed = false;
        }

        /// <summary>
        /// Gets the instrument handle.
        /// </summary>
        /// <value>
        /// The value is the IntPtr that represents the handle to the instrument.
        /// </value>
        public IntPtr Handle
        {
            get
            {
                return this._handle.Handle;
            }
        }

        /// <summary>
        /// This function sets parameters of LF frequency sweep.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LFOutput:SWEep[:FREQuency]:MODE AUTO | MANual | STEP
        /// [SOURce:]LFOutput:FREQuency:MODE CW|FIXed | SWEep
        /// TRIGger0:SWEep:SOURce AUTO | IMMediate | SINGle | EXTernal | BUS | EAUTo
        /// [SOURce:]LFOutput:FREQuency:STARt
        /// [SOURce:]LFOutput:FREQuency:STOP
        /// [SOURce:]LFOutput:SWEep[:FREQuency]:DWELl
        /// [SOURce:]LFOutput:SWEep[:FREQuency]:STEP[:LINear]
        /// [SOURce:]LFOutput:SWEep[:FREQuency]:STEP:LOGarithmic &lt;numeric Value&gt;PCT
        /// </summary>
        /// <param name="Mode">
        /// Sets the sweep mode.
        /// 
        /// Valid Values:
        /// RSSMA_SWEEP_MODE_AUTO      (0) - Auto
        /// RSSMA_SWEEP_MODE_SINGLE    (1) - Single
        /// RSSMA_SWEEP_MODE_STEP      (2) - Step
        /// RSSMA_SWEEP_MODE_EXT_SINGLE(3) - Extern Single
        /// RSSMA_SWEEP_MODE_EXT_STEP  (4) - Extern Step
        /// RSSMA_SWEEP_MODE_EXT_START (5) - Extern Start/Stop
        /// 
        /// Default Value: RSSMA_SWEEP_MODE_AUTO (0)
        /// 
        /// Notes:
        /// 
        /// (1) Auto:
        /// Cycle from the beginning to the end of the list with automatic restart at the beginning. If a different mode was activated prior to the Auto mode, the cycle continues from the current index. 
        /// 
        /// (2) Single:
        /// Single cycle from the beginning to the end of the list. If Single is selected, the cycle is not started immediately.
        /// 
        /// (3) Step:
        /// Manual, step-by-step processing of the list.
        /// 
        /// (4) External Single:
        /// Single cycle from the beginning to the end of the list as with Single, but started by an external trigger.
        /// 
        /// (5) External Step:
        /// Step-by-step cycle using the external trigger signal. Each trigger event starts a single step.
        /// 
        /// (6) Extern Start/Stop:
        /// The sweep is triggered externally via the INST TRIG connector. As soon as one sweep is finished, the next sweep is started. A second trigger event stops the sweep at the current frequency, a third trigger event starts the trigger at the start frequency, and so on
        /// </param>
        /// <param name="Start_Frequency">
        /// Sets the start frequency for the LF Sweep mode.
        /// 
        /// Valid Range: 0.1 Hz to 1.0e6 Hz
        /// 
        /// Default Value: 1.0e3 Hz
        /// 
        /// </param>
        /// <param name="Stop_Frequency">
        /// Sets the stop frequency for the LF sweep.
        /// 
        /// Valid Range: 0.1 Hz to 1.0e6 Hz
        /// 
        /// Default Value: 100.0e3 Hz
        /// 
        /// </param>
        /// <param name="Spacing">
        /// Selects linear or logarithmic sweep spacing.
        /// 
        /// Valid Values:
        /// RSSMA_LFOUTPUT_SWEEP_FREQUENCY_SPACING_LINEAR      (0) - LIN
        /// RSSMA_LFOUTPUT_SWEEP_FREQUENCY_SPACING_LOGARITHMIC (1) - LOG
        /// 
        /// Default Value: RSSMA_LFOUTPUT_SWEEP_FREQUENCY_SPACING_LINEAR      (0)
        /// 
        /// </param>
        /// <param name="Step">
        /// Sets the step width for the linear sweep.
        /// 
        /// Valid Range:
        /// For Linear Spacing:
        /// 0.0 Hz to (STOP - STARt) Hz
        /// 
        /// For Logarithmic Spacing:
        /// 0.01 % to 50.0 %
        /// 
        /// Default Value: none
        /// 
        /// </param>
        /// <param name="Dwell_Time">
        /// Sets the dwell time for each frequency step of the sweep.
        /// 
        /// Valid Range: 2.0e-3 s to 10.0 s
        /// 
        /// Default Value: 10.0e-3 s
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int confLFFreqSweep(int Mode, double Start_Frequency, double Stop_Frequency, int Spacing, double Step, double Dwell_Time)
        {
            int pInvokeResult = PInvoke.confLFFreqSweep(this._handle, Mode, Start_Frequency, Stop_Frequency, Spacing, Step, Dwell_Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function immediately starts an LF sweep. The MODE setting determines which sweep is executed, e.g. :SOURce:LFOutput:SWEep:FREQuency:MODE STEP. This function corresponds to the manual-control command EXECUTE SINGLE SWEEP. 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LFOutput:SWEep[:FREQuency]:EXECute
        /// 
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int LFSweepTrigger()
        {
            int pInvokeResult = PInvoke.LFSweepTrigger(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the sweep mode.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LFOutput:SWEep[:FREQuency]:MODE AUTO | MANual | STEP
        /// [SOURce:]LFOutput:FREQuency:MODE CW|FIXed | SWEep
        /// TRIGger0:SWEep:SOURce AUTO | IMMediate | SINGle | EXTernal | BUS | EAUTo
        /// </summary>
        /// <param name="Mode">
        /// Sets the sweep mode.
        /// 
        /// Valid Values:
        /// RSSMA_SWEEP_MODE_AUTO      (0) - Auto
        /// RSSMA_SWEEP_MODE_SINGLE    (1) - Single
        /// RSSMA_SWEEP_MODE_STEP      (2) - Step
        /// RSSMA_SWEEP_MODE_EXT_SINGLE(3) - Extern Single
        /// RSSMA_SWEEP_MODE_EXT_STEP  (4) - Extern Step
        /// RSSMA_SWEEP_MODE_EXT_START (5) - Extern Start/Stop
        /// 
        /// Default Value: RSSMA_SWEEP_MODE_AUTO (0)
        /// 
        /// Notes:
        /// 
        /// (1) Auto:
        /// Cycle from the beginning to the end of the list with automatic restart at the beginning. If a different mode was activated prior to the Auto mode, the cycle continues from the current index. 
        /// 
        /// (2) Single:
        /// Single cycle from the beginning to the end of the list. If Single is selected, the cycle is not started immediately.
        /// 
        /// (3) Step:
        /// Manual, step-by-step processing of the list.
        /// 
        /// (4) External Single:
        /// Single cycle from the beginning to the end of the list as with Single, but started by an external trigger.
        /// 
        /// (5) External Step:
        /// Step-by-step cycle using the external trigger signal. Each trigger event starts a single step.
        /// 
        /// (6) Extern Start/Stop:
        /// The sweep is triggered externally via the INST TRIG connector. As soon as one sweep is finished, the next sweep is started. A second trigger event stops the sweep at the current frequency, a third trigger event starts the trigger at the start frequency, and so on
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetLFSweepMode(int Mode)
        {
            int pInvokeResult = PInvoke.SetLFSweepMode(this._handle, Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the source of the LF sweep.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K24
        /// 
        /// Remote-control command(s):
        /// [:SOURce]:LFOutput:SWEep[:FREQuency]:LFSource LF1 | LF2
        /// </summary>
        /// <param name="Source">
        /// Selects the source of the LF sweep.
        /// 
        /// Valid Values:
        /// RSSMA_LFSWEEP_SOURCE_LF1       (0) - LF 1
        /// RSSMA_LFSWEEP_SOURCE_LF2       (1) - LF 2
        /// 
        /// Default Value: RSSMA_LFSWEEP_SOURCE_LF1 (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetLFSweepSource(int Source)
        {
            int pInvokeResult = PInvoke.SetLFSweepSource(this._handle, Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the source of the LF sweep.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K24
        /// 
        /// Remote-control command(s):
        /// [:SOURce]:LFOutput:SWEep[:FREQuency]:LFSource?
        /// </summary>
        /// <param name="Source">
        /// Returns the source of the LF sweep.
        /// 
        /// Valid Values:
        /// RSSMA_LFSWEEP_SOURCE_LF1       (0) - LF 1
        /// RSSMA_LFSWEEP_SOURCE_LF2       (1) - LF 2
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetLFSweepSource(out int Source)
        {
            int pInvokeResult = PInvoke.GetLFSweepSource(this._handle, out Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the start frequency for the LF Sweep mode.  
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LFOutput:FREQuency:STARt
        /// 
        /// </summary>
        /// <param name="Start_Frequency">
        /// Sets the start frequency for the LF Sweep mode.
        /// 
        /// Valid Range: 0.1 Hz to 1.0e6 Hz
        /// 
        /// Default Value: 1.0e3 Hz
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetLFSweepStartFreq(double Start_Frequency)
        {
            int pInvokeResult = PInvoke.SetLFSweepStartFreq(this._handle, Start_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function Returns the start frequency of the LF Sweep mode. 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LFOutput:FREQuency:STARt?
        /// 
        /// </summary>
        /// <param name="Start_Frequency">
        /// Returns the start frequency of the LF Sweep mode.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetLFSweepStartFreq(out double Start_Frequency)
        {
            int pInvokeResult = PInvoke.GetLFSweepStartFreq(this._handle, out Start_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the stop frequency for the LF sweep. 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LFOutput:FREQuency:STOP
        /// 
        /// </summary>
        /// <param name="Stop_Frequency">
        /// Sets the stop frequency for the LF sweep.
        /// 
        /// Valid Range: 0.1 Hz to 1.0e6 Hz
        /// 
        /// Default Value: 100.0e3 Hz
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetLFSweepStopFreq(double Stop_Frequency)
        {
            int pInvokeResult = PInvoke.SetLFSweepStopFreq(this._handle, Stop_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the stop frequency of the LF sweep. 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LFOutput:FREQuency:STOP?
        /// 
        /// </summary>
        /// <param name="Stop_Frequency">
        /// Returns the stop frequency for the LF sweep.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetLFSweepStopFreq(out double Stop_Frequency)
        {
            int pInvokeResult = PInvoke.GetLFSweepStopFreq(this._handle, out Stop_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects linear or logarithmic sweep spacing.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LFOutput:SWEep[:FREQuency]:SPACing LINear | LOGarithmic
        /// 
        /// </summary>
        /// <param name="Spacing">
        /// Selects linear or logarithmic sweep spacing.
        /// 
        /// Valid Values:
        /// RSSMA_LFOUTPUT_SWEEP_FREQUENCY_SPACING_LINEAR      (0) - LIN
        /// RSSMA_LFOUTPUT_SWEEP_FREQUENCY_SPACING_LOGARITHMIC (1) - LOG
        /// 
        /// Default Value: RSSMA_LFOUTPUT_SWEEP_FREQUENCY_SPACING_LINEAR      (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetLFSweepSpacing(int Spacing)
        {
            int pInvokeResult = PInvoke.SetLFSweepSpacing(this._handle, Spacing);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns linear or logarithmic sweep spacing.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LFOutput:SWEep[:FREQuency]:SPACing?
        /// 
        /// </summary>
        /// <param name="Spacing">
        /// Returns linear or logarithmic sweep spacing.
        /// 
        /// Valid Values:
        /// RSSMA_LFOUTPUT_SWEEP_FREQUENCY_SPACING_LINEAR      (0) - LIN
        /// RSSMA_LFOUTPUT_SWEEP_FREQUENCY_SPACING_LOGARITHMIC (1) - LOG
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetLFSweepSpacing(out int Spacing)
        {
            int pInvokeResult = PInvoke.GetLFSweepSpacing(this._handle, out Spacing);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the step width for the linear sweep. 
        /// 
        /// This function is linked to the command :LFOutput:SWEep[:FREQuency]:POINts as follows:
        /// 
        /// The following applies for STARt &lt; STOP:
        /// POINts = (((STOP-STARt) / STEP:LIN) + 1
        /// 
        /// If STEP:LIN changes, the value of POINTs is adjusted. The STARt and STOP value is retained.
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LFOutput:SWEep[:FREQuency]:STEP[:LINear]
        /// 
        /// </summary>
        /// <param name="Step_Lin">
        /// Sets the step width for the linear sweep.
        /// 
        /// Valid Range: 0.0 Hz to (STOP - STARt) Hz
        /// 
        /// Default Value: 1.0e3 Hz
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetLFSweepStepLin(double Step_Lin)
        {
            int pInvokeResult = PInvoke.SetLFSweepStepLin(this._handle, Step_Lin);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the step width for the linear sweep. 
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LFOutput:SWEep[:FREQuency]:STEP[:LINear]?
        /// 
        /// </summary>
        /// <param name="Step_Lin">
        /// Returns the step width for the linear sweep.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetLFSweepStepLin(out double Step_Lin)
        {
            int pInvokeResult = PInvoke.GetLFSweepStepLin(this._handle, out Step_Lin);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function specifies the step width factor for logarithmic sweeps. The next frequency value of a sweep is calculated (for STARt &lt; STOP) using the following formula: 
        /// 
        /// New frequency = Old frequency + STEP:LOG x Old frequency
        /// 
        /// STEP:LOG therefore gives the fraction of the old frequency. The frequency is increased by this fraction for the next sweep step.
        /// 
        /// This function is linked to the command :LFOutput:SWEep[:FREQuency]:POINts as follows:
        /// 
        /// The following applies for logarithmic sweeps and STARt &lt; STOP: 
        /// 
        /// POINts = ((log STOP - log STARt) / log STEP:LOG) + 1
        /// 
        /// If STEP:LOG changes, the value of POINTs is adjusted. The STARt and STOP value is retained.
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LFOutput:SWEep[:FREQuency]:STEP:LOGarithmic &lt;numeric Value&gt;PCT
        /// 
        /// </summary>
        /// <param name="Step_Log">
        /// Specifies the step width factor for logarithmic sweeps.
        /// 
        /// Valid Range: 0.01 % to 100.0 %
        /// 
        /// Default Value: 1 %
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetLFSweepStepLog(double Step_Log)
        {
            int pInvokeResult = PInvoke.SetLFSweepStepLog(this._handle, Step_Log);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the step width factor for logarithmic sweeps.
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LFOutput:SWEep[:FREQuency]:STEP:LOGarithmic?
        /// 
        /// </summary>
        /// <param name="Step_Log">
        /// Returns the step width factor of logarithmic sweeps.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetLFSweepStepLog(out double Step_Log)
        {
            int pInvokeResult = PInvoke.GetLFSweepStepLog(this._handle, out Step_Log);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the dwell time for each frequency step of the sweep.
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LFOutput:SWEep[:FREQuency]:DWELl
        /// 
        /// </summary>
        /// <param name="Dwell_Time">
        /// Sets the dwell time for each frequency step of the sweep.
        /// 
        /// Valid Range: 2.0e-3 s to 10.0 s
        /// 
        /// Default Value: 10.0e-3 s
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetLFSweepDwellTime(double Dwell_Time)
        {
            int pInvokeResult = PInvoke.SetLFSweepDwellTime(this._handle, Dwell_Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the dwell time of frequency step of the sweep.
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LFOutput:SWEep[:FREQuency]:DWELl?
        /// 
        /// </summary>
        /// <param name="Dwell_Time">
        /// Returns the dwell time of frequency step of the sweep.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetLFSweepDwellTime(out double Dwell_Time)
        {
            int pInvokeResult = PInvoke.GetLFSweepDwellTime(this._handle, out Dwell_Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// In Sweep mode (:SOUR:LFO:FREQ:MODE SWE) this function sets the frequency for the next sweep step in the Step sweep mode (:SOUR:LFO:SWE:MODE MAN). Here only frequency values between the settings :SOUR:LFO:FREQ:STAR and ...:STOP are permitted. Each sweep step is triggered by a separate :SOUR:LFO:FREQ:MAN command.
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LFOutput:FREQuency:MANual
        /// 
        /// </summary>
        /// <param name="Manual_LF_Sweep">
        /// Sets the frequency for the next sweep step in the Step sweep mode.
        /// 
        /// Valid Range: STARt to STOP
        /// 
        /// Default Value: 1.0e3 Hz
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetLFSweepManualStep(double Manual_LF_Sweep)
        {
            int pInvokeResult = PInvoke.SetLFSweepManualStep(this._handle, Manual_LF_Sweep);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// In Sweep mode (:SOUR:LFO:FREQ:MODE SWE) this function returns the frequency of the next sweep step in the Step sweep mode (:SOUR:LFO:SWE:MODE MAN). Here only frequency values between the settings :SOUR:LFO:FREQ:STAR and ...:STOP are permitted. Each sweep step is triggered by a separate :SOUR:LFO:FREQ:MAN command.
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LFOutput:FREQuency:MANual?
        /// 
        /// </summary>
        /// <param name="Manual_LF_Sweep">
        /// Returns the frequency for the next sweep step in the Step sweep mode.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetLFSweepManualStep(out double Manual_LF_Sweep)
        {
            int pInvokeResult = PInvoke.GetLFSweepManualStep(this._handle, out Manual_LF_Sweep);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the number of steps in an LF sweep. This function is linked to the command :LFOutput:SWEep[:FREQuency]:STEP as follows:
        /// 
        /// The following applies for linear sweeps and STARt &lt; STOP:     POINts = ((STOP-STARt) / STEP:LIN) + 1
        /// 
        /// The following applies for logarithmic sweeps and STARt &lt; STOP: 
        /// 
        /// POINts = ((log STOP - log STARt) / log STEP:LOG) + 1
        /// 
        /// If POINTs changes, the value of STEP is adjusted. The STARt and STOP value is retained.
        /// 
        /// Two separate POINts values are used for linear or logarithmic sweep spacing (LFOutput:SWEep[:FREQuency]:SPACing LIN | LOG). This function is always effective for the currently set sweep spacing.
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LFOutput:SWEep[:FREQuency]:POINts
        /// 
        /// </summary>
        /// <param name="LF_Sweep_Points">
        /// Sets the number of steps in an LF sweep.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 100
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetLFSweepPoints(int LF_Sweep_Points)
        {
            int pInvokeResult = PInvoke.SetLFSweepPoints(this._handle, LF_Sweep_Points);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the number of steps in an LF sweep.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LFOutput:SWEep[:FREQuency]:POINts?
        /// 
        /// </summary>
        /// <param name="LF_Sweep_Points">
        /// Returns the number of steps in an LF sweep.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetLFSweepPoints(out int LF_Sweep_Points)
        {
            int pInvokeResult = PInvoke.GetLFSweepPoints(this._handle, out LF_Sweep_Points);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the cycle mode for a sweep sequence (shape).
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LFOutput:SWEep[:FREQuency]:SHAPe SAWTooth | TRIangle
        /// </summary>
        /// <param name="Shape">
        /// Selects the cycle mode for a sweep sequence (shape).
        /// 
        /// Valid Values:
        /// RSSMA_FREQ_SWEEP_SHAPE_SAWT    (0) - SAWTooth
        /// RSSMA_FREQ_SWEEP_SHAPE_TRI     (1) - TRIangle
        /// 
        /// Default Value: RSSMA_FREQ_SWEEP_SHAPE_TRI     (1)
        /// 
        /// Notes:
        /// (1) SAWTooth - One sweep runs from start to stop frequency. Each subsequent sweep starts at the start frequency, i.e. the shape of  the sweep sequence resembles a sawtooth.
        /// 
        /// (2) TRIangle - One sweep runs from start to stop frequency and back,i.e. the shape of the sweep resembles a triangle. Each subsequent sweep starts at the start frequency.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssmb_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetLFSweepShape(int Shape)
        {
            int pInvokeResult = PInvoke.SetLFSweepShape(this._handle, Shape);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the cycle mode for a sweep sequence (shape).
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LFOutput:SWEep[:FREQuency]:SHAPe?
        /// </summary>
        /// <param name="Shape">
        /// Returns the cycle mode for a sweep sequence (shape).
        /// 
        /// Valid Values:
        /// RSSMA_FREQ_SWEEP_SHAPE_SAWT    (0) - SAWTooth
        /// RSSMA_FREQ_SWEEP_SHAPE_TRI     (1) - TRIangle
        /// 
        /// Default Value: RSSMA_FREQ_SWEEP_SHAPE_TRI     (1)
        /// 
        /// Notes:
        /// (1) SAWTooth - One sweep runs from start to stop frequency. Each subsequent sweep starts at the start frequency, i.e. the shape of  the sweep sequence resembles a sawtooth.
        /// 
        /// (2) TRIangle - One sweep runs from start to stop frequency and back,i.e. the shape of the sweep resembles a triangle. Each subsequent sweep starts at the start frequency.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssmb_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetLFSweepShape(out int Shape)
        {
            int pInvokeResult = PInvoke.GetLFSweepShape(this._handle, out Shape);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets parameters of LF Output.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LFOutput:FREQuency:MODE FIXed
        /// [SOURce:]LFOutput&lt;CH&gt;:FREQuency
        /// [SOURce:]LFOutput:VOLTage
        /// [SOURce:]LFOutput[:STATe] ON | OFF
        /// </summary>
        /// <param name="State">
        /// Activates/deactivates the LF output.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <param name="Channel">
        /// The channel for which is this function performed.
        /// 
        /// Valid Values: 1, 2
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="LFGen_Frequency">
        /// Sets the frequency of the LF signal.
        /// 
        /// Valid Range: 0.1 Hz to 10.0e6 Hz
        /// 
        /// Default Value: 1.0e3 Hz
        /// 
        /// </param>
        /// <param name="LFGen_Voltage">
        /// Sets the output voltage of the LF output.
        /// 
        /// Valid Range: 0.0 V to 4.0 V
        /// 
        /// Default Value: 1.0 V
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int confLFFreq(bool State, int Channel, double LFGen_Frequency, double LFGen_Voltage)
        {
            int pInvokeResult = PInvoke.confLFFreq(this._handle, System.Convert.ToUInt16(State), Channel, LFGen_Frequency, LFGen_Voltage);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates/deactivates the LF output.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LFOutput[:STATe] ON | OFF
        /// 
        /// </summary>
        /// <param name="LF_Output_State">
        /// Activates/deactivates the LF output.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetLFOutputState(bool LF_Output_State)
        {
            int pInvokeResult = PInvoke.SetLFOutputState(this._handle, System.Convert.ToUInt16(LF_Output_State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns state the LF output.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LFOutput[:STATe]?
        /// 
        /// </summary>
        /// <param name="LF_Output_State">
        /// Returns state of the LF output.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetLFOutputState(out bool LF_Output_State)
        {
            ushort LF_Output_StateAsUShort;
            int pInvokeResult = PInvoke.GetLFOutputState(this._handle, out LF_Output_StateAsUShort);
            LF_Output_State = System.Convert.ToBoolean(LF_Output_StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the internal source to be used for the LF Output signal. The available selection depends on the options fitted.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K24 for selections other than LF1
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LFOutput:SOURce LF1 | LF2 | LF12 | NOISe | LF1Noise | LF2Noise
        /// </summary>
        /// <param name="Source">
        /// Selects the internal source to be used for the LF Output signal. The available selection depends on the options fitted.
        /// 
        /// Valid Values:
        /// RSSMA_LFOUTPUT_SOURCE_LF1       (0) - LF Generator 1
        /// RSSMA_LFOUTPUT_SOURCE_LF2       (1) - LF Generator 2
        /// RSSMA_LFOUTPUT_SOURCE_LF12      (2) - LF Generator 1 + 2
        /// RSSMA_LFOUTPUT_SOURCE_NOISE     (3) - Noise
        /// RSSMA_LFOUTPUT_SOURCE_LF1NOISE  (4) - LF Generator 1 + Noise
        /// RSSMA_LFOUTPUT_SOURCE_LF2NOISE  (5) - LF Generator 2 + Noise
        /// 
        /// Default Value: RSSMA_LFOUTPUT_SOURCE_LF1 (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetLFGenSource(int Source)
        {
            int pInvokeResult = PInvoke.SetLFGenSource(this._handle, Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the internal source to be used for the LF Output signal.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K24 for selections other than LF1
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LFOutput:SOURce LF1 | LF2 | LF12 | NOISe | LF1Noise | LF2Noise?
        /// </summary>
        /// <param name="Source">
        /// Returns the internal source to be used for the LF Output signal.
        /// 
        /// Valid Values:
        /// RSSMA_LFOUTPUT_SOURCE_LF1       (0) - LF Generator 1
        /// RSSMA_LFOUTPUT_SOURCE_LF2       (1) - LF Generator 2
        /// RSSMA_LFOUTPUT_SOURCE_LF12      (2) - LF Generator 1 + 2
        /// RSSMA_LFOUTPUT_SOURCE_NOISE     (3) - Noise
        /// RSSMA_LFOUTPUT_SOURCE_LF1NOISE  (4) - LF Generator 1 + Noise
        /// RSSMA_LFOUTPUT_SOURCE_LF2NOISE  (5) - LF Generator 2 + Noise
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetLFGenSource(out int Source)
        {
            int pInvokeResult = PInvoke.GetLFGenSource(this._handle, out Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the output voltage of the LF output.
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LFOutput:VOLTage
        /// 
        /// </summary>
        /// <param name="LFGen_Voltage">
        /// Sets the output voltage of the LF output.
        /// 
        /// Valid Range: 0.0 V to 4.0 V
        /// 
        /// Default Value: 1.0 V
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetLFGenVoltage(double LFGen_Voltage)
        {
            int pInvokeResult = PInvoke.SetLFGenVoltage(this._handle, LFGen_Voltage);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the output voltage of the LF output.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LFOutput:VOLTage?
        /// 
        /// </summary>
        /// <param name="LFGen_Voltage">
        /// Returns the output voltage of the LF output.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetLFGenVoltage(out double LFGen_Voltage)
        {
            int pInvokeResult = PInvoke.GetLFGenVoltage(this._handle, out LFGen_Voltage);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the internal output voltage of the LF output.
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LFOutput&lt;CH&gt;:INTernal:VOLTtage
        /// 
        /// </summary>
        /// <param name="Channel">
        /// The channel for which is this function performed.
        /// 
        /// Valid Values: 1, 2
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="LFGen_Internal_Voltage">
        /// Sets the output voltage of the LF output.
        /// 
        /// Valid Range: 0.0 V to 4.0 V
        /// 
        /// Default Value: 0.5 V
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetLFGenInternalVoltage(int Channel, double LFGen_Internal_Voltage)
        {
            int pInvokeResult = PInvoke.SetLFGenInternalVoltage(this._handle, Channel, LFGen_Internal_Voltage);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the output internal voltage of the LF output.
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LFOutput&lt;CH&gt;:INTernal:VOLTtage?
        /// </summary>
        /// <param name="Channel">
        /// The channel for which is this function performed.
        /// 
        /// Valid Values: 1, 2
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="LFGen_Internal_Voltage">
        /// Returns the output internal voltage of the LF output.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetLFGenInternalVoltage(int Channel, out double LFGen_Internal_Voltage)
        {
            int pInvokeResult = PInvoke.GetLFGenInternalVoltage(this._handle, Channel, out LFGen_Internal_Voltage);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the frequency of the LF signal for CW mode (:SOUR::MODE CW mode). In Sweep mode (:SOUR:LFO:FREQ:MODE SWE), the frequency is linked to the sweep frequency.
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LFOutput&lt;CH&gt;:FREQuency
        /// 
        /// </summary>
        /// <param name="Channel">
        /// The channel for which is this function performed.
        /// 
        /// Valid Values: 1, 2
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="LFGen_Frequency">
        /// Sets the frequency of the LF signal.
        /// 
        /// Valid Range: 0.1 Hz to 1.0e6 Hz
        /// 
        /// Default Value: 1.0e3 Hz
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetLFGenFrequency(int Channel, double LFGen_Frequency)
        {
            int pInvokeResult = PInvoke.SetLFGenFrequency(this._handle, Channel, LFGen_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the frequency of the LF signal of CW mode (:SOUR::MODE CW mode). In Sweep mode (:SOUR:LFO:FREQ:MODE SWE), the frequency is linked to the sweep frequency.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LFOutput&lt;CH&gt;:FREQuency?
        /// 
        /// </summary>
        /// <param name="Channel">
        /// The channel for which is this function performed.
        /// 
        /// Valid Values: 1, 2
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="LFGen_Frequency">
        /// Returns the frequency of the LF signal.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetLFGenFrequency(int Channel, out double LFGen_Frequency)
        {
            int pInvokeResult = PInvoke.GetLFGenFrequency(this._handle, Channel, out LFGen_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the shape of the second LF generator.
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LFOutput2:SHAPe SINE | SQUare | TRIangle | TRAPeze
        /// </summary>
        /// <param name="Shape">
        /// Selects the shape of the second LF generator. In case of selection Trapeze additional settings concerning the duration of the single trapeze elements can be made.
        /// 
        /// Valid Values:
        /// RSSMA_LFOUTPUT_SHAPE_SINE      (0) - Sine
        /// RSSMA_LFOUTPUT_SHAPE_SQUARE    (1) - Square
        /// RSSMA_LFOUTPUT_SHAPE_TRIANGLE  (2) - Triangle
        /// RSSMA_LFOUTPUT_SHAPE_TRAPEZE   (3) - Trapeze
        /// 
        /// Default Value: RSSMA_LFOUTPUT_SHAPE_SINE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetLFGenShape(int Shape)
        {
            int pInvokeResult = PInvoke.SetLFGenShape(this._handle, Shape);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the shape of the second LF generator.
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LFOutput2:SHAPe?
        /// 
        /// </summary>
        /// <param name="Shape">
        /// Returns the shape of the second LF generator. 
        /// 
        /// Valid Values:
        /// RSSMA_LFOUTPUT_SHAPE_SINE      (0) - Sine
        /// RSSMA_LFOUTPUT_SHAPE_SQUARE    (1) - Square
        /// RSSMA_LFOUTPUT_SHAPE_TRIANGLE  (2) - Triangle
        /// RSSMA_LFOUTPUT_SHAPE_TRAPEZE   (3) - Trapeze
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetLFGenShape(out int Shape)
        {
            int pInvokeResult = PInvoke.GetLFGenShape(this._handle, out Shape);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the fall/high/low/rise time for the trapeze shape of the second LF generator.
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LFOutput&lt;CH&gt;:SHAPe:TRAPeze:FALL
        /// [SOURce:]LFOutput&lt;CH&gt;:SHAPe:TRAPeze:HIGH
        /// [SOURce:]LFOutput&lt;CH&gt;:SHAPe:TRAPeze:LOW
        /// [SOURce:]LFOutput&lt;CH&gt;:SHAPe:TRAPeze:RISE
        /// 
        /// </summary>
        /// <param name="Trapeze">
        /// Selects the fall, high, low or rise time for the trapeze shape of the second LF generator.
        /// 
        /// Valid Values:
        /// RSSMA_LFOUTPUT_SHAPE_TRAPEZE_FALL  (0) - Fall
        /// RSSMA_LFOUTPUT_SHAPE_TRAPEZE_HIGH  (1) - High
        /// RSSMA_LFOUTPUT_SHAPE_TRAPEZE_LOW   (2) - Low
        /// RSSMA_LFOUTPUT_SHAPE_TRAPEZE_RISE  (3) - Rise
        /// 
        /// Default Value: RSSMA_LFOUTPUT_SHAPE_TRAPEZE_FALL (0)
        /// 
        /// </param>
        /// <param name="Time">
        /// Sets the fall/high/low/rise time for the trapeze shape of the second LF generator.
        /// 
        /// Valid Range: 0.2e-6 to 2.5 s
        /// 
        /// Default Value: 1.0e-6 s
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetLFGenShapeTrapeze(int Trapeze, double Time)
        {
            int pInvokeResult = PInvoke.SetLFGenShapeTrapeze(this._handle, Trapeze, Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the fall/high/low/rise time for the trapeze shape of the second LF generator.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LFOutput&lt;CH&gt;:SHAPe:TRAPeze:FALL?
        /// [SOURce:]LFOutput&lt;CH&gt;:SHAPe:TRAPeze:HIGH?
        /// [SOURce:]LFOutput&lt;CH&gt;:SHAPe:TRAPeze:LOW?
        /// [SOURce:]LFOutput&lt;CH&gt;:SHAPe:TRAPeze:RISE?
        /// </summary>
        /// <param name="Trapeze">
        /// Selects the fall, high, low or rise time for the trapeze shape of the second LF generator.
        /// 
        /// Valid Values:
        /// RSSMA_LFOUTPUT_SHAPE_TRAPEZE_FALL  (0) - Fall
        /// RSSMA_LFOUTPUT_SHAPE_TRAPEZE_HIGH  (1) - High
        /// RSSMA_LFOUTPUT_SHAPE_TRAPEZE_LOW   (2) - Low
        /// RSSMA_LFOUTPUT_SHAPE_TRAPEZE_RISE  (3) - Rise
        /// 
        /// Default Value: RSSMA_LFOUTPUT_SHAPE_TRAPEZE_FALL (0)
        /// 
        /// </param>
        /// <param name="Time">
        /// Returns the modulation depth of the amplitude modulation in percent.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetLFGenShapeTrapeze(int Trapeze, out double Time)
        {
            int pInvokeResult = PInvoke.GetLFGenShapeTrapeze(this._handle, Trapeze, out Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets a DC offset at the LF Output.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LFOutput:OFFSet
        /// </summary>
        /// <param name="DC_Offset">
        /// Sets a DC offset at the LF Output.
        /// 
        /// Valid Range: -4.0 V to 4.0 V
        /// 
        /// Default Value: 0.0 V
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetLFGenDCOffset(double DC_Offset)
        {
            int pInvokeResult = PInvoke.SetLFGenDCOffset(this._handle, DC_Offset);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns a DC offset at the LF Output.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LFOutput:OFFSet?
        /// </summary>
        /// <param name="DC_Offset">
        /// Returns a DC offset at the LF Output.
        /// 
        /// Valid Range: -4.0 V to 4.0 V
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetLFGenDCOffset(out double DC_Offset)
        {
            int pInvokeResult = PInvoke.GetLFGenDCOffset(this._handle, out DC_Offset);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates/deactivates the pulse generator. The pulse generator and the pulse modulation are activated separately.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PGEN:STATe ON | OFF
        /// 
        /// 
        /// </summary>
        /// <param name="Pulse_Generator_State">
        /// Activates/deactivates the pulse generator.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPGENState(bool Pulse_Generator_State)
        {
            int pInvokeResult = PInvoke.SetPGENState(this._handle, System.Convert.ToUInt16(Pulse_Generator_State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the pulse generator state.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PGEN:STATe?
        /// </summary>
        /// <param name="Pulse_Generator_State">
        /// Returns the pulse generator state.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPGENState(out bool Pulse_Generator_State)
        {
            ushort Pulse_Generator_StateAsUShort;
            int pInvokeResult = PInvoke.GetPGENState(this._handle, out Pulse_Generator_StateAsUShort);
            Pulse_Generator_State = System.Convert.ToBoolean(Pulse_Generator_StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function switches the modulations on and off.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]MODulation[:ALL]:STATe ON | OFF
        /// 
        /// </summary>
        /// <param name="Modulation_States">
        /// Switches the modulations on and off. 
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_TRUE (1)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAllModulationsState(bool Modulation_States)
        {
            int pInvokeResult = PInvoke.SetAllModulationsState(this._handle, System.Convert.ToUInt16(Modulation_States));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets available parameter of amplitude modulation.
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]AM[:DEPTh]
        /// [SOURce:]AM:SOURce EXT | INT
        /// [SOURce:]AM:STATe ON | OFF
        /// [SOURce:]AM:EXTernal:COUPling AC | DC
        /// [SOURce:]AM:INTernal:SOURce LF1 | LF2 | LF12 | NOISe | LF1Noise | LF2Noise
        /// [SOURce:]AM:INTernal&lt;1|2&gt;:DEPTh
        /// [SOURce:]LFOutput&lt;CH&gt;:FREQuency
        /// [SOURce:]LFOutput&lt;CH&gt;:SHAPe SINE | SQUare | TRIangle | TRAPeze
        /// </summary>
        /// <param name="AM_State">
        /// Activates/deactivates the amplitude modulation.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <param name="AM_Source">
        /// Selects the modulation source for amplitude modulation. INT is the internal modulation source. The external signal is input at the AM EXT connector. Internal and external modulation source can be selected at the same time.
        /// 
        /// Valid Values:
        /// RSSMA_AM_SOURCE_INT (0) - Internal
        /// RSSMA_AM_SOURCE_EXT (1) - External
        /// 
        /// Default Value: RSSMA_AM_SOURCE_INT (0)
        /// 
        /// </param>
        /// <param name="AM_Depth">
        /// Sets the modulation depth of the amplitude modulation in percent.
        /// 
        /// Valid Range: 0.0 % to 100.0 %
        /// 
        /// Default Value: 30.0 %
        /// 
        /// </param>
        /// <param name="AM_External_Coupling">
        /// Selects the coupling mode for the external modulation input (AM EXT) in the case of amplitude modulation.
        /// 
        /// Valid Values:
        /// RSSMA_AM_EXTERNAL_COUPLING_AC (0) - AC
        /// RSSMA_AM_EXTERNAL_COUPLING_DC (1) - DC
        /// 
        /// Default Value: RSSMA_AM_EXTERNAL_COUPLING_AC (0)
        /// 
        /// Notes:
        /// 
        /// (1) AC:
        /// The DC voltage component is disconnected from the modulation signal.
        /// 
        /// (2) DC:
        /// The modulation signal is not changed.
        /// 
        /// (3) This parameter is ignored for internal AM source.
        /// </param>
        /// <param name="AM_Internal_Source">
        /// Selects which internal modulation source is used. The available
        /// selection depends on the options fitted.
        /// 
        /// Valid Values:
        /// RSSMA_AM_INTERNAL_SOURCE_LF1      (0) - LF Generator 1
        /// RSSMA_AM_INTERNAL_SOURCE_LF2      (1) - LF Generator 2
        /// RSSMA_AM_INTERNAL_SOURCE_LF12     (2) - LF Generator 1 + 2
        /// RSSMA_AM_INTERNAL_SOURCE_NOISE    (3) - Noise
        /// RSSMA_AM_INTERNAL_SOURCE_LF1NOISE (4) - LF Generator 1 + Noise
        /// RSSMA_AM_INTERNAL_SOURCE_LF2NOISE (5) - LF2 Generator 2 + Noise
        /// 
        /// Default Value: RSSMA_AM_INTERNAL_SOURCE_LF1 (0)
        /// 
        /// Note(s):
        /// (1) This parameter is ignored for external AM source.
        /// (2) Option R&amp;S SMA-K24 for selections other than LF1
        /// </param>
        /// <param name="AM_Internal_Depth_1">
        /// Sets the modulation depth for the two LF generators. The sum of the two values must not exceed the overall modulation depth set in the upper part of the menu.
        /// 
        /// Valid Range: 0.0 % to 100.0 %
        /// 
        /// Default Value: 30.0 %
        /// 
        /// Note(s):
        /// (1) This parameter is ignored for external AM source.
        /// 
        /// (2) AM Internal Depth 2 is calculated as AM Depth - AM Internal Depth 1
        /// 
        /// (3) This parameter is ignored if K24 is not installed.
        /// </param>
        /// <param name="LFGen_1_Frequency">
        /// Sets the frequency of the LF signal.
        /// 
        /// Valid Range: 0.1 Hz to 10.0e6 Hz
        /// 
        /// Default Value: 1.0e3 Hz
        /// 
        /// Note(s):
        /// (1) This parameter is ignored for external AM source.
        /// </param>
        /// <param name="LFGen_2_Shape">
        /// Selects the shape of the second LF generator. In case of selection Trapeze additional settings concerning the duration of the single trapeze elements can be made.
        /// 
        /// Valid Values:
        /// RSSMA_LFOUTPUT_SHAPE_SINE      (0) - Sine
        /// RSSMA_LFOUTPUT_SHAPE_SQUARE    (1) - Square
        /// RSSMA_LFOUTPUT_SHAPE_TRIANGLE  (2) - Triangle
        /// RSSMA_LFOUTPUT_SHAPE_TRAPEZE   (3) - Trapeze
        /// 
        /// Default Value: RSSMA_LFOUTPUT_SHAPE_SINE (0)
        /// 
        /// Note(s):
        /// (1) This parameter is ignored for external AM source.
        /// (2) This parameter is ignored if K24 is not installed.
        /// </param>
        /// <param name="LFGen_2_Frequency">
        /// Sets the frequency of the LF signal.
        /// 
        /// Valid Range: 0.1 Hz to 10.0e6 Hz
        /// 
        /// Default Value: 1.0e3 Hz
        /// 
        /// Note(s):
        /// (1) This parameter is ignored for external AM source.
        /// (2) This parameter is ignored if K24 is not installed.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int configAM(bool AM_State, int AM_Source, double AM_Depth, int AM_External_Coupling, int AM_Internal_Source, double AM_Internal_Depth_1, double LFGen_1_Frequency, int LFGen_2_Shape, double LFGen_2_Frequency)
        {
            int pInvokeResult = PInvoke.configAM(this._handle, System.Convert.ToUInt16(AM_State), AM_Source, AM_Depth, AM_External_Coupling, AM_Internal_Source, AM_Internal_Depth_1, LFGen_1_Frequency, LFGen_2_Shape, LFGen_2_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates/deactivates amplitude modulation.   
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]AM:STATe ON | OFF
        /// 
        /// </summary>
        /// <param name="AM_State">
        /// Activates/deactivates the amplitude modulation.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAMState(bool AM_State)
        {
            int pInvokeResult = PInvoke.SetAMState(this._handle, System.Convert.ToUInt16(AM_State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the state of the amplitude modulation.   
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]AM:STATe?
        /// 
        /// </summary>
        /// <param name="AM_State">
        /// Returns the state of the amplitude modulation.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAMState(out bool AM_State)
        {
            ushort AM_StateAsUShort;
            int pInvokeResult = PInvoke.GetAMState(this._handle, out AM_StateAsUShort);
            AM_State = System.Convert.ToBoolean(AM_StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the modulation source for amplitude modulation. INT is the internal modulation source which is selected with command AM:SOURce:INTernal and configured in the
        /// SOURce:LFOutput subsystem. The external signal is input at the AM EXT connector. Internal and external modulation source can be selected at the same time.
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]AM:SOURce EXT | INT
        /// 
        /// </summary>
        /// <param name="AM_Source">
        /// Selects the modulation source for amplitude modulation. INT is the internal modulation source. The external signal is input at the AM EXT connector. Internal and external modulation source can be selected at the same time.
        /// 
        /// Valid Values:
        /// RSSMA_AM_SOURCE_INT    (0) - Internal
        /// RSSMA_AM_SOURCE_EXT    (1) - External
        /// RSSMA_AM_SOURCE_INTEXT (2) - Internal - External
        /// 
        /// Default Value: RSSMA_AM_SOURCE_INT (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAMSource(int AM_Source)
        {
            int pInvokeResult = PInvoke.SetAMSource(this._handle, AM_Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the modulation source of the amplitude modulation. INT is the internal modulation source. The external signal is input at the AM EXT connector. Internal and external modulation source can be selected at the same time.
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]AM:SOURce?
        /// 
        /// </summary>
        /// <param name="AM_Source">
        /// Returns the modulation source of the amplitude modulation. INT is the LF generator. The EXT signal is input at the EXT MOD connector.
        /// 
        /// Valid Values:
        /// RSSMA_AM_SOURCE_INT    (0) - Internal
        /// RSSMA_AM_SOURCE_EXT    (1) - External
        /// RSSMA_AM_SOURCE_INTEXT (2) - Internal - External
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAMSource(out int AM_Source)
        {
            int pInvokeResult = PInvoke.GetAMSource(this._handle, out AM_Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the modulation depth of the amplitude modulation in percent.
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]AM[:DEPTh]
        /// 
        /// </summary>
        /// <param name="AM_Depth">
        /// Sets the modulation depth of the amplitude modulation in percent.
        /// 
        /// Valid Range: 0.0 % to 100.0 %
        /// 
        /// Default Value: 30.0 %
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAMDepth(double AM_Depth)
        {
            int pInvokeResult = PInvoke.SetAMDepth(this._handle, AM_Depth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the modulation depth of the amplitude modulation in percent.
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]AM[:DEPTh]?
        /// 
        /// </summary>
        /// <param name="AM_Depth">
        /// Returns the modulation depth of the amplitude modulation in percent.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAMDepth(out double AM_Depth)
        {
            int pInvokeResult = PInvoke.GetAMDepth(this._handle, out AM_Depth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the coupling mode for the external modulation input (AM EXT) in the case of amplitude modulation.
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]AM:EXTernal:COUPling AC | DC
        /// 
        /// </summary>
        /// <param name="AM_External_Coupling">
        /// Selects the coupling mode for the external modulation input (AM EXT) in the case of amplitude modulation.
        /// 
        /// Valid Values:
        /// RSSMA_AM_EXTERNAL_COUPLING_AC (0) - AC
        /// RSSMA_AM_EXTERNAL_COUPLING_DC (1) - DC
        /// 
        /// Default Value: RSSMA_AM_EXTERNAL_COUPLING_AC (0)
        /// 
        /// Notes:
        /// 
        /// (1) AC:
        /// The DC voltage component is disconnected from the modulation signal.
        /// 
        /// (2) DC:
        /// The modulation signal is not changed.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAMExternalCoupling(int AM_External_Coupling)
        {
            int pInvokeResult = PInvoke.SetAMExternalCoupling(this._handle, AM_External_Coupling);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the coupling mode of the external modulation input (AM EXT) in the case of amplitude modulation.
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]AM:EXTernal:COUPling?
        /// 
        /// </summary>
        /// <param name="AM_External_Coupling">
        /// Returns the coupling mode of the external modulation input (AM EXT) in the case of amplitude modulation.
        /// 
        /// Valid Values:
        /// RSSMA_AM_EXTERNAL_COUPLING_AC (0) - AC
        /// RSSMA_AM_EXTERNAL_COUPLING_DC (1) - DC
        /// 
        /// Notes:
        /// 
        /// (1) AC:
        /// The DC voltage component is disconnected from the modulation signal.
        /// 
        /// (2) DC:
        /// The modulation signal is not changed.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAMExternalCoupling(out int AM_External_Coupling)
        {
            int pInvokeResult = PInvoke.GetAMExternalCoupling(this._handle, out AM_External_Coupling);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the input sensitivity of the AM EXT input in %/V. This function is only effective if the external modulation source is selected (SOUR:AM:SOUR EXT). The returned value depends on the modulation depth setting (SOUR:AM:DEPTh). This value is assigned to the voltage value for full modulation of the input. 
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]AM:SENSitivity?
        /// 
        /// </summary>
        /// <param name="AM_Sensitivity">
        /// Returns the input sensitivity of the AM EXT input in %/V.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAMSensitivity(out double AM_Sensitivity)
        {
            int pInvokeResult = PInvoke.GetAMSensitivity(this._handle, out AM_Sensitivity);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects which internal modulation source is used. The available selection depends on the options fitted. The selected source can be configured in in the SOURce:LFOutput subsystem.
        /// 
        /// Required Option(s):
        /// Option R&amp;S SMA-K24 for selections other than LF1
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]AM:INTernal:SOURce LF1 | LF2 | LF12 | NOISe | LF1Noise | LF2Noise
        /// 
        /// 
        /// </summary>
        /// <param name="AM_Internal_Source">
        /// Selects which internal modulation source is used. The available
        /// selection depends on the options fitted.
        /// 
        /// Valid Values:
        /// RSSMA_AM_INTERNAL_SOURCE_LF1      (0) - LF Generator 1
        /// RSSMA_AM_INTERNAL_SOURCE_LF2      (1) - LF Generator 2
        /// RSSMA_AM_INTERNAL_SOURCE_LF12     (2) - LF Generator 1 + 2
        /// RSSMA_AM_INTERNAL_SOURCE_NOISE    (3) - Noise
        /// RSSMA_AM_INTERNAL_SOURCE_LF1NOISE (4) - LF Generator 1 + Noise
        /// RSSMA_AM_INTERNAL_SOURCE_LF2NOISE (5) - LF2 Generator 2 + Noise
        /// 
        /// Default Value: RSSMA_AM_INTERNAL_SOURCE_LF1 (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAMInternalSource(int AM_Internal_Source)
        {
            int pInvokeResult = PInvoke.SetAMInternalSource(this._handle, AM_Internal_Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the internal modulation source of the amplitude modulation.
        /// 
        /// Required Option(s):
        /// Option R&amp;S SMA-K24 for selections other than LF1
        /// 
        /// Remote-control command(s):
        /// [SOURce:]AM:INTernal:SOURce?
        /// 
        /// </summary>
        /// <param name="AM_Internal_Source">
        /// Returns which internal modulation source is used. 
        /// 
        /// Valid Values:
        /// RSSMA_AM_INTERNAL_SOURCE_LF1      (0) - LF Generator 1
        /// RSSMA_AM_INTERNAL_SOURCE_LF2      (1) - LF Generator 2
        /// RSSMA_AM_INTERNAL_SOURCE_LF12     (2) - LF Generator 1 + 2
        /// RSSMA_AM_INTERNAL_SOURCE_NOISE    (3) - Noise
        /// RSSMA_AM_INTERNAL_SOURCE_LF1NOISE (4) - LF Generator 1 + Noise
        /// RSSMA_AM_INTERNAL_SOURCE_LF2NOISE (5) - LF Generator 2 + Noise
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAMInternalSource(out int AM_Internal_Source)
        {
            int pInvokeResult = PInvoke.GetAMInternalSource(this._handle, out AM_Internal_Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the modulation depth for the two LF generators. The sum of the two values must not exceed the overall modulation depth set in the upper part of the menu.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K24
        /// 
        /// Remote-control command(s):
        /// [SOURce:]AM:INTernal&lt;1|2&gt;:DEPTh
        /// </summary>
        /// <param name="Channel">
        /// The channel for which is this function performed.
        /// 
        /// Valid Values: 1, 2
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="AM_Internal_Depth">
        /// Sets the modulation depth for the two LF generators. The sum of the two values must not exceed the overall modulation depth set in the upper part of the menu.
        /// 
        /// Valid Range: 0.0 % to 100.0 %
        /// 
        /// Default Value: 30.0 %
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAMInternalDepth(int Channel, double AM_Internal_Depth)
        {
            int pInvokeResult = PInvoke.SetAMInternalDepth(this._handle, Channel, AM_Internal_Depth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the modulation depth for the two LF generators.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K24
        /// 
        /// Remote-control command(s):
        /// [SOURce:]AM:INTernal&lt;1|2&gt;:DEPTh?
        /// 
        /// </summary>
        /// <param name="Channel">
        /// The channel for which is this function performed.
        /// 
        /// Valid Values: 1, 2
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="AM_Internal_Depth">
        /// Returns the modulation depth of the amplitude modulation in percent.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAMInternalDepth(int Channel, out double AM_Internal_Depth)
        {
            int pInvokeResult = PInvoke.GetAMInternalDepth(this._handle, Channel, out AM_Internal_Depth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the parameters of frequency modulation.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-B20 or R&amp;S SMA-B22
        /// 
        /// Remote-control command(s):
        /// [SOURce:]FM:STATe ON | OFF
        /// [SOURce:]FM:SOURce INT | EXT | INT,EXT 
        /// [SOURce:]FM:MODE NORMal | LNOise
        /// [SOURce:]FM:INTernal&lt;[1]|2&gt;:DEViation
        /// [SOURce:]FM[:DEViation] 
        /// [SOURce:]FM:EXTernal:DEViation
        /// [SOURce:]FM:EXTernal:COUPling AC | DC
        /// [SOURce:]FM:EXTernal:DIGital:BFORmat BOFFset | DCODe
        /// 
        /// 
        /// </summary>
        /// <param name="State">
        /// Activates/deactivates the FM modulation.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <param name="Source">
        /// Selects the source for FM modulation.
        /// 
        /// Valid Values:
        /// RSSMA_FM_SOURCE_INTERNAL    (0) - Internal 
        /// RSSMA_FM_SOURCE_EXTERNAL    (1) - External
        /// RSSMA_FM_SOURCE_INTEXT      (2) - Internal - External
        /// RSSMA_FM_SOURCE_EDIG        (3) - External Digital
        /// 
        /// Default Value: RSSMA_FM_SOURCE_INTERNAL  (0)
        /// 
        /// Notes:
        /// 
        /// (1) Internal:
        /// Selects the internal LF generator as the source for FM modulation
        /// 
        /// (2) External:
        /// Selects the external source. The external signal is input via the EXT MOD connector. 
        /// 
        /// (3) Internal - External:
        /// Selects the internal and external source at the same time. 
        /// 
        /// (4) External Digital
        /// Selects external digital source. The external digital signal is input at the AUX I/O connector.
        /// </param>
        /// <param name="Mode">
        /// Selects the mode for the frequency modulation. 
        /// 
        /// Valid Values:
        /// RSSMA_FM_MODE_NORMAL  (0) - Normal
        /// RSSMA_FM_MODE_LNOIS   (1) - Low Noise
        /// 
        /// Default Value: RSSMA_FM_MODE_NORMAL (0)
        /// 
        /// Notes:
        /// 
        /// (1) Normal:
        /// The maximum range for modulation bandwidth and FM deviation is available. 
        /// 
        /// (3) Low Noise:
        /// Frequency modulation with improved phase noise. The range for modulation bandwidth and FM deviation is reduced. 
        /// 
        /// </param>
        /// <param name="FM_Deviation">
        /// Sets the modulation deviation of the frequency modulation in Hz.
        /// 
        /// Valid Values:
        /// 0.0 to 20.0E+6 Hz
        /// 
        /// Default Value: 10.0e+3
        /// 
        /// Notes:
        /// 
        /// (1) The maximal deviation depends on the RF frequency set and the selected modulation mode (see data sheet). It is possible to enter a deviation that is too high for a certain RF frequency or to vary the RF frequency to a range in which the deviation can no longer be set. In this case the maximally possible deviation is set and an error message is displayed.
        /// 
        /// 
        /// </param>
        /// <param name="Internal_Deviation">
        /// Sets the deviation for the two frequency modulation signals. The sum of the two values must not exceed the overall modulation deviation set with command SOURce:FM:DEViation.
        /// 
        /// Valid Values:
        /// 0.0 to 40.0E+6 Hz
        /// 
        /// Default Value: 1.0e+3
        /// 
        /// </param>
        /// <param name="External_Deviation">
        /// Sets the deviation for the two frequency modulation signals. The sum of the two values must not exceed the overall modulation deviation set with command SOURce:FM:DEViation.
        /// 
        /// Valid Values:
        /// 0.0 to 40.0E+6 Hz
        /// 
        /// Default Value: 1.0e+3
        /// 
        /// </param>
        /// <param name="External_Coupling">
        /// Selects the coupling modefor the external modulation input (FM/PM EXT) in the case of frequency modulation.
        /// 
        /// Valid Values:
        /// RSSMA_EXTERNAL_COUPLING_AC (0) - AC 
        /// RSSMA_EXTERNAL_COUPLING_DC (1) - DC
        /// 
        /// Default Value: RSSMA_EXTERNAL_COUPLING_DC (1)
        /// 
        /// Notes:
        /// 
        /// (1) Coupling for external feed via input FM/PM EXT can be set independently for modulations FM and PhiM.
        /// 
        /// (2) AC:
        /// The d.c. voltage content is separated from the modulation signal. 
        /// 
        /// (3) DC:
        /// The modulation signal is not altered. 
        /// 
        /// </param>
        /// <param name="External_Input_Impedance">
        /// Reserved for future use.
        /// </param>
        /// <param name="Binary_Format">
        /// Selects the binary format for external digital frequency modulation.
        /// 
        /// Valid Values:
        /// RSSMA_FM_EXTERNAL_DIGITAL_FORMAT_BOFFSET  (0) - Binary Offset
        /// RSSMA_FM_EXTERNAL_DIGITAL_FORMAT_DCODE    (1) - Dual Code
        /// 
        /// Default Value: RSSMA_FM_EXTERNAL_DIGITAL_FORMAT_BOFFSET  (0)
        /// 
        /// Note(s):
        /// 
        /// (1) This control is valid only if External Digital source is selected.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int confFM(bool State, int Source, int Mode, double FM_Deviation, double Internal_Deviation, double External_Deviation, int External_Coupling, int External_Input_Impedance, int Binary_Format)
        {
            int pInvokeResult = PInvoke.confFM(this._handle, System.Convert.ToUInt16(State), Source, Mode, FM_Deviation, Internal_Deviation, External_Deviation, External_Coupling, External_Input_Impedance, Binary_Format);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the parameters of internal frequency modulation.
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]FM:INTernal:SOURce LF1 | LF2 | LF12 | NOISe | LF1Noise | LF2Noise
        /// [SOURce:]FM:INTernal&lt;[1]|2&gt;:DEViation
        /// [SOURce:]LFOutput&lt;CH&gt;:FREQuency
        /// [SOURce:]LFOutput&lt;CH&gt;:SHAPe SINE | SQUare | TRIangle | TRAPeze
        /// 
        /// </summary>
        /// <param name="Internal_Source">
        /// Selects which internal modulation source is used.
        /// 
        /// Valid Values:
        /// RSSMA_FM_INTERNAL_SOURCE_LF1       (0) - LF Generator 1
        /// RSSMA_FM_INTERNAL_SOURCE_LF2       (1) - LF Generator 2
        /// RSSMA_FM_INTERNAL_SOURCE_LF12      (2) - LF Generator 1 + 2
        /// RSSMA_FM_INTERNAL_SOURCE_NOISE     (3) - Noise
        /// RSSMA_FM_INTERNAL_SOURCE_LF1NOISE  (4) - LF Generator 1 + Noise
        /// RSSMA_FM_INTERNAL_SOURCE_LF2NOISE  (5) - LF Generator 2 + Noise
        /// 
        /// Default Value: RSSMA_FM_INTERNAL_SOURCE_LF1  (0)
        /// </param>
        /// <param name="Internal_Deviation_1">
        /// Sets the deviation for the two frequency modulation signals. The sum of the two values must not exceed the overall modulation deviation set with command SOURce:FM:DEViation.
        /// 
        /// Valid Values:
        /// 0.0 to 40.0E+6 Hz
        /// 
        /// Default Value: 1.0e+3
        /// 
        /// Note(s):
        /// 
        /// (1) Internal Deviation 2 is calculated as FM Deviation - Internal Deviation 1
        /// </param>
        /// <param name="LFGen_1_Frequency">
        /// Sets the frequency of the LF signal.
        /// 
        /// Valid Range: 0.1 Hz to 10.0e6 Hz
        /// 
        /// Default Value: 1.0e3 Hz
        /// 
        /// Note(s):
        /// (1) This parameter is ignored for external AM source.
        /// </param>
        /// <param name="LFGen_2_Shape">
        /// Selects the shape of the second LF generator. In case of selection Trapeze additional settings concerning the duration of the single trapeze elements can be made.
        /// 
        /// Valid Values:
        /// RSSMA_LFOUTPUT_SHAPE_SINE      (0) - Sine
        /// RSSMA_LFOUTPUT_SHAPE_SQUARE    (1) - Square
        /// RSSMA_LFOUTPUT_SHAPE_TRIANGLE  (2) - Triangle
        /// RSSMA_LFOUTPUT_SHAPE_TRAPEZE   (3) - Trapeze
        /// 
        /// Default Value: RSSMA_LFOUTPUT_SHAPE_SINE (0)
        /// 
        /// Note(s):
        /// (1) This parameter is ignored for external AM source.
        /// </param>
        /// <param name="LFGen_2_Frequency">
        /// Sets the frequency of the LF signal.
        /// 
        /// Valid Range: 0.1 Hz to 10.0e6 Hz
        /// 
        /// Default Value: 1.0e3 Hz
        /// 
        /// Note(s):
        /// (1) This parameter is ignored for external AM source.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int confFMInternal(int Internal_Source, double Internal_Deviation_1, double LFGen_1_Frequency, int LFGen_2_Shape, double LFGen_2_Frequency)
        {
            int pInvokeResult = PInvoke.confFMInternal(this._handle, Internal_Source, Internal_Deviation_1, LFGen_1_Frequency, LFGen_2_Shape, LFGen_2_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates/deactivates frequency modulation.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-B20 or R&amp;S SMA-B22
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]FM:STATe ON | OFF
        /// </summary>
        /// <param name="State">
        /// Activates/deactivates the frequency modulation.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// Note(s):
        /// (1) Activation of FM deactivates phase modulation.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetFMState(bool State)
        {
            int pInvokeResult = PInvoke.SetFMState(this._handle, System.Convert.ToUInt16(State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the frequency modulation state.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-B20 or R&amp;S SMA-B22
        /// 
        /// Remote-control command(s):
        /// [SOURce:]FM:STATe?
        /// </summary>
        /// <param name="State">
        /// Returns the frequency modulation state.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetFMState(out bool State)
        {
            ushort StateAsUShort;
            int pInvokeResult = PInvoke.GetFMState(this._handle, out StateAsUShort);
            State = System.Convert.ToBoolean(StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the source for the FM signal.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-B20 or R&amp;S SMA-B22
        /// 
        /// Remote-control command(s):
        /// [SOURce:]FM:SOURce INT | EXT | INT,EXT | EDIG
        /// </summary>
        /// <param name="Source">
        /// Selects the source for FM modulation.
        /// 
        /// Valid Values:
        /// RSSMA_FM_SOURCE_INTERNAL    (0) - Internal 
        /// RSSMA_FM_SOURCE_EXTERNAL    (1) - External
        /// RSSMA_FM_SOURCE_INTEXT      (2) - Internal - External
        /// RSSMA_FM_SOURCE_EDIG        (3) - External Digital
        /// 
        /// Default Value: RSSMA_FM_SOURCE_INTERNAL  (0)
        /// 
        /// Notes:
        /// 
        /// (1) Internal:
        /// Selects the internal LF generator as the source for FM modulation
        /// 
        /// (2) External:
        /// Selects the external source. The external signal is input via the EXT MOD connector. 
        /// 
        /// (3) Internal - External:
        /// Selects the internal and external source at the same time. 
        /// 
        /// (4) External Digital
        /// Selects external digital source. The external digital signal is input at the AUX I/O connector.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetFMSource(int Source)
        {
            int pInvokeResult = PInvoke.SetFMSource(this._handle, Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function retruns the FM source.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-B20 or R&amp;S SMA-B22
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]FM:SOURce?
        /// </summary>
        /// <param name="Source">
        /// Returns the source for FM modulation.
        /// 
        /// Returned Values:
        /// RSSMA_FM_SOURCE_INTERNAL    (0) - Internal 
        /// RSSMA_FM_SOURCE_EXTERNAL    (1) - External
        /// RSSMA_FM_SOURCE_INTEXT      (2) - Internal - External
        /// RSSMA_FM_SOURCE_EDIG        (3) - External Digital
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetFMSource(out int Source)
        {
            int pInvokeResult = PInvoke.GetFMSource(this._handle, out Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the mode for the frequency modulation.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-B20 or R&amp;S SMA-B22
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]FM:MODE NORMAL | LNOise
        /// </summary>
        /// <param name="Mode">
        /// Selects the mode for the frequency modulation. 
        /// 
        /// Valid Values:
        /// RSSMA_FM_MODE_NORMAL  (0) - Normal
        /// RSSMA_FM_MODE_LNOIS   (1) - Low Noise
        /// 
        /// Default Value: RSSMA_FM_MODE_NORMAL (0)
        /// 
        /// Notes:
        /// 
        /// (1) Normal:
        /// The maximum range for modulation bandwidth and FM deviation is available. 
        /// 
        /// (2) Low Noise:
        /// Frequency modulation with improved phase noise. The range for modulation bandwidth and FM deviation is reduced. 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetFMMode(int Mode)
        {
            int pInvokeResult = PInvoke.SetFMMode(this._handle, Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the mode for the frequency modulation.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-B20 or R&amp;S SMA-B22
        /// 
        /// Remote-control command(s):
        /// [SOURce:]FM:MODE AUTO?
        /// </summary>
        /// <param name="Mode">
        /// Returns the mode for the frequency modulation. 
        /// 
        /// Returned Values:
        /// RSSMA_FM_MODE_NORMAL  (0) - Normal
        /// RSSMA_FM_MODE_LNOIS   (1) - Low Noise
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetFMMode(out int Mode)
        {
            int pInvokeResult = PInvoke.GetFMMode(this._handle, out Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the the modulation depth in Hz.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-B20 or R&amp;S SMA-B22
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]FM[:DEViation] 
        /// </summary>
        /// <param name="External_Deviation">
        /// Sets the modulation deviation of the frequency modulation in Hz.
        /// 
        /// Valid Values:
        /// 0.0 to 20.0E+6 Hz
        /// 
        /// Default Value: 10.0e+3
        /// 
        /// Notes:
        /// 
        /// (1) The maximal deviation depends on the RF frequency set and the selected modulation mode (see data sheet). It is possible to enter a deviation that is too high for a certain RF frequency or to vary the RF frequency to a range in which the deviation can no longer be set. In this case the maximally possible deviation is set and an error message is displayed.
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetFMDeviation(double External_Deviation)
        {
            int pInvokeResult = PInvoke.SetFMDeviation(this._handle, External_Deviation);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the the modulation depth in Hz.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-B20 or R&amp;S SMA-B22
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]FM[:DEViation]? 
        /// </summary>
        /// <param name="External_Deviation">
        /// Returns the modulation deviation of the frequency modulation in Hz.
        /// 
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetFMDeviation(out double External_Deviation)
        {
            int pInvokeResult = PInvoke.GetFMDeviation(this._handle, out External_Deviation);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the coupling modefor the external modulation input (FM/PM EXT) in the case of frequency modulation.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-B20 or R&amp;S SMA-B22
        /// 
        /// Remote-control command(s):
        /// [SOURce:]FM:EXTernal:COUPling AC | DC
        /// </summary>
        /// <param name="External_Coupling">
        /// Selects the coupling modefor the external modulation input (FM/PM EXT) in the case of frequency modulation.
        /// 
        /// Valid Values:
        /// RSSMA_EXTERNAL_COUPLING_AC (0) - AC 
        /// RSSMA_EXTERNAL_COUPLING_DC (1) - DC
        /// 
        /// Default Value: RSSMA_EXTERNAL_COUPLING_DC (1)
        /// 
        /// Notes:
        /// 
        /// (1) Coupling for external feed via input FM/PM EXT can be set independently for modulations FM and PhiM.
        /// 
        /// (2) AC:
        /// The d.c. voltage content is separated from the modulation signal. 
        /// 
        /// (3) DC:
        /// The modulation signal is not altered. 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetFMExtCoupling(int External_Coupling)
        {
            int pInvokeResult = PInvoke.SetFMExtCoupling(this._handle, External_Coupling);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the coupling modefor the external modulation input (FM/PM EXT) in the case of frequency modulation.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-B20 or R&amp;S SMA-B22
        /// 
        /// Remote-control command(s):
        /// [SOURce:]FM:EXTernal:COUPling?
        /// </summary>
        /// <param name="External_Coupling">
        /// Returns the coupling modefor the external modulation input (FM/PM EXT) in the case of frequency modulation.
        /// 
        /// Returned Values:
        /// RSSMA_EXT_COUP_AC (0) - AC 
        /// RSSMA_EXT_COUP_DC (1) - DC
        /// 
        /// Notes:
        /// 
        /// (1) Coupling for external feed via input FM/PM EXT can be set independently for modulations FM and PhiM.
        /// 
        /// (2) AC:
        /// The d.c. voltage content is separated from the modulation signal. 
        /// 
        /// (3) DC:
        /// The modulation signal is not altered. 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetFMExtCoupling(out int External_Coupling)
        {
            int pInvokeResult = PInvoke.GetFMExtCoupling(this._handle, out External_Coupling);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function Selects which internal modulation source is used. The available selection depends on the options fitted.
        /// 
        /// Required Option(s):
        /// Option R&amp;S SMA-B20 or R&amp;S SMA-B22
        /// Option R&amp;S SMA-K24 for selections other than LF1
        /// 
        /// Remote-control command(s):
        /// [SOURce:]FM:INTernal:SOURce LF1 | LF2 | LF12 | NOISe | LF1Noise | LF2Noise
        /// 
        /// </summary>
        /// <param name="Internal_Source">
        /// Selects which internal modulation source is used.
        /// 
        /// Valid Values:
        /// RSSMA_FM_INTERNAL_SOURCE_LF1       (0) - LF Generator 1
        /// RSSMA_FM_INTERNAL_SOURCE_LF2       (1) - LF Generator 2
        /// RSSMA_FM_INTERNAL_SOURCE_LF12      (2) - LF Generator 1 + 2
        /// RSSMA_FM_INTERNAL_SOURCE_NOISE     (3) - Noise
        /// RSSMA_FM_INTERNAL_SOURCE_LF1NOISE  (4) - LF Generator 1 + Noise
        /// RSSMA_FM_INTERNAL_SOURCE_LF2NOISE  (5) - LF Generator 2 + Noise
        /// 
        /// Default Value: RSSMA_FM_INTERNAL_SOURCE_LF1  (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetFMInternalSource(int Internal_Source)
        {
            int pInvokeResult = PInvoke.SetFMInternalSource(this._handle, Internal_Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function retruns the internal FM source.
        /// 
        /// Required Option(s):
        /// Option R&amp;S SMA-B20 or R&amp;S SMA-B22
        /// Option R&amp;S SMA-K24 for selections other than LF1
        /// 
        /// Remote-control command(s):
        /// [SOURce:]FM:INTernal:SOURce?
        /// 
        /// </summary>
        /// <param name="Internal_Source">
        /// Returns the internal source for frequency modulation.
        /// 
        /// Returned Values:
        /// RSSMA_FM_INTERNAL_SOURCE_LF1       (0) - LF Generator 1
        /// RSSMA_FM_INTERNAL_SOURCE_LF2       (1) - LF Generator 2
        /// RSSMA_FM_INTERNAL_SOURCE_LF12      (2) - LF Generator 1 + 2
        /// RSSMA_FM_INTERNAL_SOURCE_NOISE     (3) - Noise
        /// RSSMA_FM_INTERNAL_SOURCE_LF1NOISE  (4) - LF Generator 1 + Noise
        /// RSSMA_FM_INTERNAL_SOURCE_LF2NOISE  (5) - LF Generator 2 + Noise
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetFMInternalSource(out int Internal_Source)
        {
            int pInvokeResult = PInvoke.GetFMInternalSource(this._handle, out Internal_Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the deviation for the two frequency modulation signals. The sum of the two values must not exceed the overall modulation deviation set with command SOURce:FM:DEViation.
        /// 
        /// Required Option(s):
        /// Option R&amp;S SMA-B20 or R&amp;S SMA-B22
        /// Option R&amp;S SMA-K24 for LF2
        /// 
        /// Remote-control command(s):
        /// [SOURce:]FM:INTernal&lt;[1]|2&gt;:DEViation
        /// 
        /// </summary>
        /// <param name="Channel">
        /// The channel for which is this function performed.
        /// 
        /// Valid Values: 1, 2
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Internal_Deviation">
        /// Sets the deviation for the two frequency modulation signals. The sum of the two values must not exceed the overall modulation deviation set with command SOURce:FM:DEViation.
        /// 
        /// Valid Values:
        /// 0.0 to 40.0E+6 Hz
        /// 
        /// Default Value: 1.0e+3
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetFMInternalDeviation(int Channel, double Internal_Deviation)
        {
            int pInvokeResult = PInvoke.SetFMInternalDeviation(this._handle, Channel, Internal_Deviation);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the deviation for the two frequency modulation signals.
        /// 
        /// Required Option(s):
        /// Option R&amp;S SMA-B20 or R&amp;S SMA-B22
        /// Option R&amp;S SMA-K24
        /// 
        /// Remote-control command(s):
        /// [SOURce:]FM:INTernal&lt;[1]|2&gt;:DEViation?
        /// </summary>
        /// <param name="Channel">
        /// The channel for which is this function performed.
        /// 
        /// Valid Values: 1, 2
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Internal_Deviation">
        /// Returns the deviation for the two frequency modulation signals.
        /// 
        /// 
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetFMInternalDeviation(int Channel, out double Internal_Deviation)
        {
            int pInvokeResult = PInvoke.GetFMInternalDeviation(this._handle, Channel, out Internal_Deviation);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the deviation for the two frequency modulation signals. The sum of the two values must not exceed the overall modulation deviation set with command SOURce:FM:DEViation.
        /// 
        /// Required Option(s):
        /// Option R&amp;S SMA-B20 or R&amp;S SMA-B22
        /// Option R&amp;S SMA-K24
        /// 
        /// Remote-control command(s):
        /// [SOURce:]FM:EXTernal:DEViation
        /// 
        /// </summary>
        /// <param name="External_Deviation">
        /// Sets the deviation for the two frequency modulation signals. The sum of the two values must not exceed the overall modulation deviation set with command SOURce:FM:DEViation.
        /// 
        /// Valid Values:
        /// 0.0 to 40.0E+6 Hz
        /// 
        /// Default Value: 1.0e+3
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetFMExternalDeviation(double External_Deviation)
        {
            int pInvokeResult = PInvoke.SetFMExternalDeviation(this._handle, External_Deviation);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the deviation for the two frequency modulation signals.
        /// 
        /// Required Option(s):
        /// Option R&amp;S SMA-B20 or R&amp;S SMA-B22
        /// Option R&amp;S SMA-K24
        /// 
        /// Remote-control command(s):
        /// [SOURce:]FM:EXTernal:DEViation?
        /// </summary>
        /// <param name="External_Deviation">
        /// Returns the deviation for the two frequency modulation signals. 
        /// 
        /// Valid Values:
        /// 0.0 to 40.0E+6 Hz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetFMExternalDeviation(out double External_Deviation)
        {
            int pInvokeResult = PInvoke.GetFMExternalDeviation(this._handle, out External_Deviation);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the binary format for external digital frequency modulation.
        /// 
        /// Required Option(s):
        /// Option R&amp;S SMA-B20 or R&amp;S SMA-B22
        /// 
        /// Remote-control command(s):
        /// [SOURce:]FM:EXTernal:DIGital:BFORmat BOFFset | DCODe
        /// </summary>
        /// <param name="Binary_Format">
        /// Selects the binary format for external digital frequency modulation.
        /// 
        /// Valid Values:
        /// RSSMA_FM_EXTERNAL_DIGITAL_FORMAT_BOFFSET  (0) - Binary Offset
        /// RSSMA_FM_EXTERNAL_DIGITAL_FORMAT_DCODE    (1) - Dual Code
        /// 
        /// Default Value: RSSMA_FM_EXTERNAL_DIGITAL_FORMAT_BOFFSET  (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetFMExternalDigitalBinaryFormat(int Binary_Format)
        {
            int pInvokeResult = PInvoke.SetFMExternalDigitalBinaryFormat(this._handle, Binary_Format);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the binary format for external digital frequency modulation
        /// 
        /// Required Option(s):
        /// Option R&amp;S SMA-B20 or R&amp;S SMA-B22
        /// 
        /// Remote-control command(s):
        /// [SOURce:]FM:EXTernal:DIGital:BFORmat?
        /// </summary>
        /// <param name="Binary_Format">
        /// Returns the binary format for external digital frequency modulation.
        /// 
        /// Returned Values:
        /// RSSMA_FM_EXTERNAL_DIGITAL_FORMAT_BOFFSET  (0) - Binary Offset
        /// RSSMA_FM_EXTERNAL_DIGITAL_FORMAT_DCODE    (1) - Dual Code
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetFMExternalDigitalBinaryFormat(out int Binary_Format)
        {
            int pInvokeResult = PInvoke.GetFMExternalDigitalBinaryFormat(this._handle, out Binary_Format);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the input sensitivity of the FM/PM EXT input in Hz/V. The function is only effective if the external modulation source is selected (rssma_SetFMSource). The returned value depends on the modulation deviation setting (SOUR:FM:DEViation). This value is assigned to the voltage value for full modulation of the input.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-B20 or R&amp;S SMA-B22
        /// 
        /// Remote-control command(s):
        /// [SOURce:]FM:SENSitivity?
        /// </summary>
        /// <param name="Sensitivity">
        /// Returns the input sensitivity of the FM/PM EXT input in Hz/V.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetFMSensitivity(out double Sensitivity)
        {
            int pInvokeResult = PInvoke.GetFMSensitivity(this._handle, out Sensitivity);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the parameters of phase modulation.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-B20 or R&amp;S SMA-B22
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PM:STATe ON | OFF
        /// [SOURce:]PM:SOURce INT | EXT | INT,EXT 
        /// [SOURce:]PM:MODE HBANdwith | HDEViation | LNOise
        /// [SOURce:]PM:INTernal&lt;[1]|2&gt;:DEViation
        /// [SOURce:]PM[:DEViation] 
        /// [SOURce:]PM:EXTernal:DEViation
        /// [SOURce:]PM:EXTernal:COUPling AC | DC
        /// [SOURce:]INPut:PM:IMPedance HIGH | G50
        /// [SOURce:]PM:EXTernal:DIGital:BFORmat BOFFset | DCODe
        /// 
        /// 
        /// </summary>
        /// <param name="State">
        /// Activates/deactivates the PM modulation.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <param name="Source">
        /// Selects the source for PM modulation.
        /// 
        /// Valid Values:
        /// RSSMA_FM_SOURCE_INTERNAL    (0) - Internal 
        /// RSSMA_FM_SOURCE_EXTERNAL    (1) - External
        /// RSSMA_FM_SOURCE_INTEXT      (2) - Internal - External
        /// RSSMA_FM_SOURCE_EDIG        (3) - External Digital
        /// 
        /// Default Value: RSSMA_FM_SOURCE_INTERNAL  (0)
        /// 
        /// Notes:
        /// 
        /// (1) Internal:
        /// Selects the internal LF generator as the source for FM modulation
        /// 
        /// (2) External:
        /// Selects the external source. The external signal is input via the EXT MOD connector. 
        /// 
        /// (3) Internal - External:
        /// Selects the internal and external source at the same time. 
        /// 
        /// (4) External Digital
        /// Selects external digital source. The external digital signal is input at the AUX I/O connector.
        /// </param>
        /// <param name="Mode">
        /// Selects the mode for the phase modulation. 
        /// 
        /// Valid Values:
        /// RSSMA_PM_MODE_HBAN  (0) - High Bandwidth
        /// RSSMA_PM_MODE_HDEV  (1) - High Deviation
        /// RSSMA_PM_MODE_LNOIS (2) - Low Noise
        /// 
        /// Default Value: RSSMA_PM_MODE_HBAN (0)
        /// 
        /// Notes:
        /// 
        /// (1) High Bandwidth:
        /// The maximum range for modulation bandwidth is available. However, phase noise is increased for low frequencies. The range for PhiM deviation is limited. This mode is recommended for high modulatiuon frequencies.
        /// 
        /// (2) High Deviation:
        /// The maximum range for PhiM deviation is available. Phase noise is improved for low frequencies. The range for modulation frequency is limited (see data sheet). This mode is recommended for low modulation frequencies and high PhiM deviation. 
        /// 
        /// (3) Low Noise:
        /// Phase modulation with phase noise and spurious characteristics close to CW mode. The range for modulation bandwidth and PhiM deviation is reduced (see data sheet).
        /// </param>
        /// <param name="PM_Deviation">
        /// Sets the modulation deviation of the phase modulation in Hz.
        /// 
        /// Valid Values:
        /// 0.0 to 20.0 RAD
        /// 
        /// Default Value: 1.0 RAD
        /// 
        /// Notes:
        /// 
        /// (1) The maximal deviation depends on the RF frequency set and the selected modulation mode (see data sheet). It is possible to enter a deviation that is too high for a certain RF frequency or to vary the RF frequency to a range in which the deviation can no longer be set. In this case the maximally possible deviation is set and an error message is displayed.
        /// 
        /// 
        /// </param>
        /// <param name="Internal_Deviation">
        /// Sets the deviation for the two phase modulation signals. The sum of the two values must not exceed the overall modulation deviation set with command SOURce:PM:DEViation.
        /// 
        /// Valid Values:
        /// 0.0 to 20.0 RAD
        /// 
        /// Default Value: 0.5 RAD
        /// 
        /// </param>
        /// <param name="External_Deviation">
        /// Sets the deviation for the two phase modulation signals. The sum of the two values must not exceed the overall modulation deviation set with command SOURce:PM:DEViation.
        /// 
        /// Valid Values:
        /// 0.0 to 20.0 RAD
        /// 
        /// Default Value: 0.5 RAD
        /// 
        /// </param>
        /// <param name="External_Coupling">
        /// Selects the coupling mode for the external modulation input (FM/PM EXT) in the case of phase modulation.
        /// 
        /// Valid Values:
        /// RSSMA_EXTERNAL_COUPLING_AC (0) - AC 
        /// RSSMA_EXTERNAL_COUPLING_DC (1) - DC
        /// 
        /// Default Value: RSSMA_EXTERNAL_COUPLING_DC (1)
        /// 
        /// Notes:
        /// 
        /// (1) Coupling for external feed via input FM/PM EXT can be set independently for modulations FM and PhiM.
        /// 
        /// (2) AC:
        /// The d.c. voltage content is separated from the modulation signal. 
        /// 
        /// (3) DC:
        /// The modulation signal is not altered. 
        /// 
        /// </param>
        /// <param name="External_Input_Impedance">
        /// Reserved for future use.
        /// </param>
        /// <param name="Binary_Format">
        /// Selects the binary format for external digital phase modulation.
        /// 
        /// Valid Values:
        /// RSSMA_FM_EXTERNAL_DIGITAL_FORMAT_BOFFSET  (0) - Binary Offset
        /// RSSMA_FM_EXTERNAL_DIGITAL_FORMAT_DCODE    (1) - Dual Code
        /// 
        /// Default Value: RSSMA_FM_EXTERNAL_DIGITAL_FORMAT_BOFFSET  (0)
        /// 
        /// Note(s):
        /// 
        /// (1) This control is valid only if External Digital source is selected.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int confPM(bool State, int Source, int Mode, double PM_Deviation, double Internal_Deviation, double External_Deviation, int External_Coupling, int External_Input_Impedance, int Binary_Format)
        {
            int pInvokeResult = PInvoke.confPM(this._handle, System.Convert.ToUInt16(State), Source, Mode, PM_Deviation, Internal_Deviation, External_Deviation, External_Coupling, External_Input_Impedance, Binary_Format);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the parameters of internal phase modulation.
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PM:INTernal:SOURce LF1 | LF2 | LF12 | NOISe | LF1Noise | LF2Noise
        /// [SOURce:]PM:INTernal&lt;[1]|2&gt;:DEViation
        /// [SOURce:]LFOutput&lt;CH&gt;:FREQuency
        /// [SOURce:]LFOutput&lt;CH&gt;:SHAPe SINE | SQUare | TRIangle | TRAPeze
        /// 
        /// </summary>
        /// <param name="Internal_Source">
        /// Selects which internal modulation source is used.
        /// 
        /// Valid Values:
        /// RSSMA_FM_INTERNAL_SOURCE_LF1       (0) - LF Generator 1
        /// RSSMA_FM_INTERNAL_SOURCE_LF2       (1) - LF Generator 2
        /// RSSMA_FM_INTERNAL_SOURCE_LF12      (2) - LF Generator 1 + 2
        /// RSSMA_FM_INTERNAL_SOURCE_NOISE     (3) - Noise
        /// RSSMA_FM_INTERNAL_SOURCE_LF1NOISE  (4) - LF Generator 1 + Noise
        /// RSSMA_FM_INTERNAL_SOURCE_LF2NOISE  (5) - LF Generator 2 + Noise
        /// 
        /// Default Value: RSSMA_FM_INTERNAL_SOURCE_LF1  (0)
        /// </param>
        /// <param name="Internal_Deviation_1">
        /// Sets the deviation for the two phase modulation signals. The sum of the two values must not exceed the overall modulation deviation set with command SOURce:PM:DEViation.
        /// 
        /// Valid Values:
        /// 0.0 to 20.0 RAD
        /// 
        /// Default Value: 1.0 RAD
        /// 
        /// Note(s):
        /// 
        /// (1) Internal Deviation 2 is calculated as PM Deviation - Internal Deviation 1
        /// </param>
        /// <param name="LFGen_1_Frequency">
        /// Sets the frequency of the LF signal.
        /// 
        /// Valid Range: 0.1 Hz to 10.0e6 Hz
        /// 
        /// Default Value: 1.0e3 Hz
        /// 
        /// Note(s):
        /// (1) This parameter is ignored for external AM source.
        /// </param>
        /// <param name="LFGen_2_Shape">
        /// Selects the shape of the second LF generator. In case of selection Trapeze additional settings concerning the duration of the single trapeze elements can be made.
        /// 
        /// Valid Values:
        /// RSSMA_LFOUTPUT_SHAPE_SINE      (0) - Sine
        /// RSSMA_LFOUTPUT_SHAPE_SQUARE    (1) - Square
        /// RSSMA_LFOUTPUT_SHAPE_TRIANGLE  (2) - Triangle
        /// RSSMA_LFOUTPUT_SHAPE_TRAPEZE   (3) - Trapeze
        /// 
        /// Default Value: RSSMA_LFOUTPUT_SHAPE_SINE (0)
        /// 
        /// Note(s):
        /// (1) This parameter is ignored for external AM source.
        /// </param>
        /// <param name="LFGen_2_Frequency">
        /// Sets the frequency of the LF signal.
        /// 
        /// Valid Range: 0.1 Hz to 10.0e6 Hz
        /// 
        /// Default Value: 1.0e3 Hz
        /// 
        /// Note(s):
        /// (1) This parameter is ignored for external AM source.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int confPMInternal(int Internal_Source, double Internal_Deviation_1, double LFGen_1_Frequency, int LFGen_2_Shape, double LFGen_2_Frequency)
        {
            int pInvokeResult = PInvoke.confPMInternal(this._handle, Internal_Source, Internal_Deviation_1, LFGen_1_Frequency, LFGen_2_Shape, LFGen_2_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates/deactivates phase modulation.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-B20 or R&amp;S SMA-B22
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PM:STATe ON | OFF
        /// </summary>
        /// <param name="State">
        /// Activates/deactivates the phase modulation.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// Note(s):
        /// (1) Activation of PM deactivates frequency modulation.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPMState(bool State)
        {
            int pInvokeResult = PInvoke.SetPMState(this._handle, System.Convert.ToUInt16(State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the phase modulation state.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-B20 or R&amp;S SMA-B22
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PM:STATe?
        /// </summary>
        /// <param name="State">
        /// Returns the phase modulation state.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPMState(out bool State)
        {
            ushort StateAsUShort;
            int pInvokeResult = PInvoke.GetPMState(this._handle, out StateAsUShort);
            State = System.Convert.ToBoolean(StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the source for the PM signal.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-B20 or R&amp;S SMA-B22
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PM:SOURce INT | EXT | INT,EXT | EDIG
        /// </summary>
        /// <param name="Source">
        /// Selects the source for PM modulation.
        /// 
        /// Valid Values:
        /// RSSMA_FM_SOURCE_INTERNAL    (0) - Internal 
        /// RSSMA_FM_SOURCE_EXTERNAL    (1) - External
        /// RSSMA_FM_SOURCE_INTEXT      (2) - Internal - External
        /// RSSMA_FM_SOURCE_EDIG        (3) - External Digital
        /// 
        /// Default Value: RSSMA_FM_SOURCE_INTERNAL  (0)
        /// 
        /// Notes:
        /// 
        /// (1) Internal:
        /// Selects the internal LF generator as the source for FM modulation
        /// 
        /// (2) External:
        /// Selects the external source. The external signal is input via the EXT MOD connector. 
        /// 
        /// (3) Internal - External:
        /// Selects the internal and external source at the same time. 
        /// 
        /// (4) External Digital
        /// Selects external digital source. The external digital signal is input at the AUX I/O connector.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPMSource(int Source)
        {
            int pInvokeResult = PInvoke.SetPMSource(this._handle, Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function retruns the PM source.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-B20 or R&amp;S SMA-B22
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PM:SOURce?
        /// </summary>
        /// <param name="Source">
        /// Returns the source for PM modulation.
        /// 
        /// Returned Values:
        /// RSSMA_FM_SOURCE_INTERNAL    (0) - Internal 
        /// RSSMA_FM_SOURCE_EXTERNAL    (1) - External
        /// RSSMA_FM_SOURCE_INTEXT      (2) - Internal - External
        /// RSSMA_FM_SOURCE_EDIG        (3) - External Digital
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPMSource(out int Source)
        {
            int pInvokeResult = PInvoke.GetPMSource(this._handle, out Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the mode for the phase modulation.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-B20 or R&amp;S SMA-B22
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PM:MODE HBANdwith | HDEViation | LNOise
        /// </summary>
        /// <param name="Mode">
        /// Selects the mode for the phase modulation. 
        /// 
        /// Valid Values:
        /// RSSMA_PM_MODE_HBAN  (0) - High Bandwidth
        /// RSSMA_PM_MODE_HDEV  (1) - High Deviation
        /// RSSMA_PM_MODE_LNOIS (2) - Low Noise
        /// 
        /// Default Value: RSSMA_PM_MODE_HBAN (0)
        /// 
        /// Notes:
        /// 
        /// (1) High Bandwidth:
        /// The maximum range for modulation bandwidth is available. However, phase noise is increased for low frequencies. The range for PhiM deviation is limited. This mode is recommended for high modulatiuon frequencies.
        /// 
        /// (2) High Deviation:
        /// The maximum range for PhiM deviation is available. Phase noise is improved for low frequencies. The range for modulation frequency is limited (see data sheet). This mode is recommended for low modulation frequencies and high PhiM deviation. 
        /// 
        /// (3) Low Noise:
        /// Phase modulation with phase noise and spurious characteristics close to CW mode. The range for modulation bandwidth and PhiM deviation is reduced (see data sheet).
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPMMode(int Mode)
        {
            int pInvokeResult = PInvoke.SetPMMode(this._handle, Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the mode for the phase modulation.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-B20 or R&amp;S SMA-B22
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PM:MODE?
        /// </summary>
        /// <param name="Mode">
        /// Returns the mode for the phase modulation. 
        /// 
        /// Valid Values:
        /// RSSMA_PM_MODE_HBAN  (0) - High Bandwidth
        /// RSSMA_PM_MODE_HDEV  (1) - High Deviation
        /// RSSMA_PM_MODE_LNOIS (2) - Low Noise
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPMMode(out int Mode)
        {
            int pInvokeResult = PInvoke.GetPMMode(this._handle, out Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the the modulation depth in RAD.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-B20 or R&amp;S SMA-B22
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PM[:DEViation] 
        /// </summary>
        /// <param name="Deviation">
        /// Sets the modulation deviation of the phase modulation in RAD.
        /// 
        /// Valid Values:
        /// 0.0 to 20.0 RAD
        /// 
        /// Default Value: 1.0 RAD
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPMDeviation(double Deviation)
        {
            int pInvokeResult = PInvoke.SetPMDeviation(this._handle, Deviation);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the the modulation depth in RAD.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-B20 or R&amp;S SMA-B22
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PM[:DEViation]?
        /// </summary>
        /// <param name="Deviation">
        /// Returns the modulation deviation of the phase modulation in RAD.
        /// 
        /// Valid Values:
        /// 0.0 to 20.0 RAD
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPMDeviation(out double Deviation)
        {
            int pInvokeResult = PInvoke.GetPMDeviation(this._handle, out Deviation);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the coupling modefor the external modulation input (FM/PM EXT) in the case of phase modulation.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-B20 or R&amp;S SMA-B22
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PM:EXTernal:COUPling AC | DC
        /// </summary>
        /// <param name="External_Coupling">
        /// Selects the coupling modefor the external modulation input (FM/PM EXT) in the case of phase modulation.
        /// 
        /// Valid Values:
        /// RSSMA_EXTERNAL_COUPLING_AC (0) - AC 
        /// RSSMA_EXTERNAL_COUPLING_DC (1) - DC
        /// 
        /// Default Value: RSSMA_EXTERNAL_COUPLING_DC (1)
        /// 
        /// Notes:
        /// 
        /// (1) Coupling for external feed via input FM/PM EXT can be set independently for modulations FM and PhiM.
        /// 
        /// (2) AC:
        /// The d.c. voltage content is separated from the modulation signal. 
        /// 
        /// (3) DC:
        /// The modulation signal is not altered. 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPMExtCoupling(int External_Coupling)
        {
            int pInvokeResult = PInvoke.SetPMExtCoupling(this._handle, External_Coupling);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the coupling modefor the external modulation input (FM/PM EXT) in the case of phase modulation.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-B20 or R&amp;S SMA-B22
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PM:EXTernal:COUPling?
        /// </summary>
        /// <param name="External_Coupling">
        /// Returns the coupling modefor the external modulation input (FM/PM EXT) in the case of phase modulation.
        /// 
        /// Returned Values:
        /// RSSMA_EXT_COUP_AC (0) - AC 
        /// RSSMA_EXT_COUP_DC (1) - DC
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPMExtCoupling(out int External_Coupling)
        {
            int pInvokeResult = PInvoke.GetPMExtCoupling(this._handle, out External_Coupling);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function Selects which internal modulation source is used. The available selection depends on the options fitted.
        /// 
        /// Required Option(s):
        /// Option R&amp;S SMA-B20 or R&amp;S SMA-B22
        /// Option R&amp;S SMA-K24 for selections other than LF1
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PM:INTernal:SOURce LF1 | LF2 | LF12 | NOISe | LF1Noise | LF2Noise
        /// 
        /// </summary>
        /// <param name="Internal_Source">
        /// Selects which internal modulation source is used.
        /// 
        /// Valid Values:
        /// RSSMA_FM_INTERNAL_SOURCE_LF1       (0) - LF Generator 1
        /// RSSMA_FM_INTERNAL_SOURCE_LF2       (1) - LF Generator 2
        /// RSSMA_FM_INTERNAL_SOURCE_LF12      (2) - LF Generator 1 + 2
        /// RSSMA_FM_INTERNAL_SOURCE_NOISE     (3) - Noise
        /// RSSMA_FM_INTERNAL_SOURCE_LF1NOISE  (4) - LF Generator 1 + Noise
        /// RSSMA_FM_INTERNAL_SOURCE_LF2NOISE  (5) - LF Generator 2 + Noise
        /// 
        /// Default Value: RSSMA_FM_INTERNAL_SOURCE_LF1  (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPMInternalSource(int Internal_Source)
        {
            int pInvokeResult = PInvoke.SetPMInternalSource(this._handle, Internal_Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function retruns the internal PM source.
        /// 
        /// Required Option(s):
        /// Option R&amp;S SMA-B20 or R&amp;S SMA-B22
        /// Option R&amp;S SMA-K24 for selections other than LF1
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PM:INTernal:SOURce?
        /// 
        /// </summary>
        /// <param name="Internal_Source">
        /// Returns the internal source for phase modulation.
        /// 
        /// Returned Values:
        /// RSSMA_FM_INTERNAL_SOURCE_LF1       (0) - LF Generator 1
        /// RSSMA_FM_INTERNAL_SOURCE_LF2       (1) - LF Generator 2
        /// RSSMA_FM_INTERNAL_SOURCE_LF12      (2) - LF Generator 1 + 2
        /// RSSMA_FM_INTERNAL_SOURCE_NOISE     (3) - Noise
        /// RSSMA_FM_INTERNAL_SOURCE_LF1NOISE  (4) - LF Generator 1 + Noise
        /// RSSMA_FM_INTERNAL_SOURCE_LF2NOISE  (5) - LF Generator 2 + Noise
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPMInternalSource(out int Internal_Source)
        {
            int pInvokeResult = PInvoke.GetPMInternalSource(this._handle, out Internal_Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the deviation for the two phase modulation signals. The sum of the two values must not exceed the overall modulation deviation set with command SOURce:PM:DEViation.
        /// 
        /// Required Option(s):
        /// Option R&amp;S SMA-B20 or R&amp;S SMA-B22
        /// Option R&amp;S SMA-K24
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PM:INTernal&lt;[1]|2&gt;:DEViation
        /// 
        /// </summary>
        /// <param name="Channel">
        /// The channel for which is this function performed.
        /// 
        /// Valid Values: 1, 2
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Internal_Deviation">
        /// Sets the deviation for the two phase modulation signals. The sum of the two values must not exceed the overall modulation deviation set with command SOURce:PM:DEViation.
        /// 
        /// Valid Values:
        /// 0.0 to 20.0 RAD
        /// 
        /// Default Value: 0.5 RAD
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPMInternalDeviation(int Channel, double Internal_Deviation)
        {
            int pInvokeResult = PInvoke.SetPMInternalDeviation(this._handle, Channel, Internal_Deviation);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the deviation for the two phase modulation signals.
        /// 
        /// Required Option(s):
        /// Option R&amp;S SMA-B20 or R&amp;S SMA-B22
        /// Option R&amp;S SMA-K24
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PM:INTernal&lt;[1]|2&gt;:DEViation?
        /// </summary>
        /// <param name="Channel">
        /// The channel for which is this function performed.
        /// 
        /// Valid Values: 1, 2
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Internal_Deviation">
        /// Returns the deviation for the two phase modulation signals.
        /// 
        /// 
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPMInternalDeviation(int Channel, out double Internal_Deviation)
        {
            int pInvokeResult = PInvoke.GetPMInternalDeviation(this._handle, Channel, out Internal_Deviation);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the deviation for the two phase modulation signals. The sum of the two values must not exceed the overall modulation deviation set with command SOURce:PM:DEViation.
        /// 
        /// Required Option(s):
        /// Option R&amp;S SMA-B20 or R&amp;S SMA-B22
        /// Option R&amp;S SMA-K24
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PM:EXTernal:DEViation
        /// 
        /// </summary>
        /// <param name="External_Deviation">
        /// Sets the deviation for the two phase modulation signals. The sum of the two values must not exceed the overall modulation deviation set with command SOURce:FM:DEViation.
        /// 
        /// Valid Values:
        /// 0.0 to 20.0 RAD
        /// 
        /// Default Value: 1.0 RAD
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPMExternalDeviation(double External_Deviation)
        {
            int pInvokeResult = PInvoke.SetPMExternalDeviation(this._handle, External_Deviation);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the deviation for the two phase modulation signals.
        /// 
        /// Required Option(s):
        /// Option R&amp;S SMA-B20 or R&amp;S SMA-B22
        /// Option R&amp;S SMA-K24
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PM:EXTernal:DEViation?
        /// </summary>
        /// <param name="External_Deviation">
        /// Returns the deviation for the two phase modulation signals. 
        /// 
        /// Valid Values:
        /// 0.0 to 20.0 RAD
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPMExternalDeviation(out double External_Deviation)
        {
            int pInvokeResult = PInvoke.GetPMExternalDeviation(this._handle, out External_Deviation);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the binary format for external digital phase modulation.
        /// 
        /// Required Option(s):
        /// Option R&amp;S SMA-B20 or R&amp;S SMA-B22
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PM:EXTernal:DIGital:BFORmat BOFFset | DCODe
        /// </summary>
        /// <param name="Binary_Format">
        /// Selects the binary format for external digital phase modulation.
        /// 
        /// Valid Values:
        /// RSSMA_FM_EXTERNAL_DIGITAL_FORMAT_BOFFSET  (0) - Binary Offset
        /// RSSMA_FM_EXTERNAL_DIGITAL_FORMAT_DCODE    (1) - Dual Code
        /// 
        /// Default Value: RSSMA_FM_EXTERNAL_DIGITAL_FORMAT_BOFFSET  (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPMExternalDigitalBinaryFormat(int Binary_Format)
        {
            int pInvokeResult = PInvoke.SetPMExternalDigitalBinaryFormat(this._handle, Binary_Format);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the binary format for external digital phase modulation
        /// 
        /// Required Option(s):
        /// Option R&amp;S SMA-B20 or R&amp;S SMA-B22
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PM:EXTernal:DIGital:BFORmat?
        /// </summary>
        /// <param name="Binary_Format">
        /// Returns the binary format for external digital phase modulation.
        /// 
        /// Returned Values:
        /// RSSMA_FM_EXTERNAL_DIGITAL_FORMAT_BOFFSET  (0) - Binary Offset
        /// RSSMA_FM_EXTERNAL_DIGITAL_FORMAT_DCODE    (1) - Dual Code
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPMExternalDigitalBinaryFormat(out int Binary_Format)
        {
            int pInvokeResult = PInvoke.GetPMExternalDigitalBinaryFormat(this._handle, out Binary_Format);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the input sensitivity of the FM/PM EXT input in Hz/V. The function is only effective if the external modulation source is selected (rssma_SetPMSource). The returned value depends on the modulation deviation setting (SOUR:PM:DEViation). This value is assigned to the voltage value for full modulation of the input.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-B20 or R&amp;S SMA-B22
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PM:SENSitivity?
        /// </summary>
        /// <param name="Sensitivity">
        /// Returns the input sensitivity of the FM/PM EXT input in Hz/V.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPMSensitivity(out double Sensitivity)
        {
            int pInvokeResult = PInvoke.GetPMSensitivity(this._handle, out Sensitivity);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the parameters of pulse modulation.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PULM:STATe ON | OFF
        /// [SOURce:]PULM:SOURce  INTernal | EXTernal | CODer
        /// [SOURce:]PULM:POLarity NORMal | INVerted
        /// [SOURce:]PGEN:STATe ON | OFF
        /// [SOURce:]PULM:PERiod
        /// [SOURce:]PULM:WIDTh
        /// [SOURce:]PULM:DELay
        /// [SOURce:]PULM:DOUBle:STATe ON | OFF
        /// [SOURce:]PULM:DOUBle:WIDTh
        /// [SOURce:]PULM:DOUBle:DELay
        /// [SOURce:]PULM:TRIGger:MODE AUTO | EXTernal | EGATe
        /// </summary>
        /// <param name="State">
        /// Activates/deactivates the pulse modulation.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <param name="Source">
        /// Selects the source for pulse modulation.
        /// 
        /// Valid Values:
        /// RSSMA_PULM_SOURCE_INTERNAL    (0) - Internal 
        /// RSSMA_PULM_SOURCE_EXTERNAL    (1) - External
        /// RSSMA_PULM_SOURCE_CODER       (2) - Coder
        /// 
        /// Default Value: RSSMA_PULM_SOURCE_INTERNAL  (0)
        /// 
        /// Notes:
        /// 
        /// (1) Internal:
        /// The internally generated rectangular signal is used for the pulse modulation. The frequency of the internal signal can be set in the SOURce:LFOutput subsystem. This selection is only available if option R&amp;S SMA-K23 is not fitted. 
        /// 
        /// (2) External:
        /// The signal applied externally via the EXT MOD connector is used for the pulse modulation.
        /// 
        /// (3) Coder:
        /// The internal pulse generator (option R&amp;S SMA-K23) is used for the pulse modulation. This selection is only available if option R&amp;S SMA-K23 is fitted.
        /// 
        /// </param>
        /// <param name="Polarity">
        /// Sets the polarity between modulating and modulated signal.
        /// 
        /// Valid Values:
        /// RSSMA_PULM_POLARITY_NORMAL      (0) - Normal
        /// RSSMA_PULM_POLARITY_INVERTED    (1) - Inverted
        /// 
        /// Default Value: RSSMA_PULM_POLARITY_NORMAL  (0)
        /// 
        /// Notes:
        /// 
        /// (1) Normal:
        /// The RF signal is suppressed during the pulse pause. 
        /// 
        /// (2) Inverted:
        /// The RF signal is suppressed during the pulse.
        /// </param>
        /// <param name="Pulse_Generator_State">
        /// Activates/deactivates the pulse generator.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <param name="Pulse_Period">
        /// Sets the period of the generated pulse. The period determines the repetition frequency of the internal signal.
        /// 
        /// Valid Range: 5.0e-6 to 85.0 s
        ///            100.0e-9 to 85.0 s  with Option R&amp;S SMA-K23
        /// 
        /// Default Value: 1.0e-3 s
        /// 
        /// </param>
        /// <param name="Pulse_Width">
        /// Sets the width of the generated pulse. The width determines the pulse length.
        /// 
        /// Valid Range: 20.0e-9 to 1.0 s
        /// 
        /// Default Value: 1.0e-3 s
        /// 
        /// </param>
        /// <param name="Pulse_Delay">
        /// Sets the pulse delay. 
        /// 
        /// Valid Range: 20.0e-9 to 1.0 s
        /// 
        /// Default Value: 1.0e-3 s
        /// 
        /// </param>
        /// <param name="Double_Pulse_State">
        /// Enables/disables double pulse generation.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <param name="Double_Pulse_Width">
        /// Sets the width of the second pulse in case of double pulse generation.
        /// 
        /// Valid Range: 20.0e-9 to 1.0 s
        /// 
        /// Default Value: 1.0e-3 s
        /// 
        /// </param>
        /// <param name="Double_Pulse_Delay">
        /// Sets the pulse delay. 
        /// 
        /// Valid Range: 20.0e-9 to 1.0 s
        /// 
        /// Default Value: 1.0e-3 s
        /// 
        /// </param>
        /// <param name="Trigger_Mode">
        /// Selects the trigger mode for pulse modulation.
        /// 
        /// Valid Values:
        /// RSSMA_PULM_TRIGGER_MODE_AUTO      (0) - Auto
        /// RSSMA_PULM_TRIGGER_MODE_EXTERNAL  (1) - External
        /// RSSMA_PULM_TRIGGER_MODE_EGATE     (2) - External Gate
        /// 
        /// Default Value: RSSMA_PULM_TRIGGER_MODE_AUTO  (0)
        /// 
        /// Notes:
        /// 
        /// (1) Auto:
        /// The pulse modulation is generated continuously.
        /// 
        /// (2) External:
        /// The pulse modulation is triggered by an external trigger event. The trigger signal is supplied via the PULSE EXT connector.
        /// 
        /// (3) External Gate:
        /// The pulse modulation is gated by an external gate signal. The signal is supplied via the PULSE EXT connector.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int confPulm(bool State, int Source, int Polarity, bool Pulse_Generator_State, double Pulse_Period, double Pulse_Width, double Pulse_Delay, bool Double_Pulse_State, double Double_Pulse_Width, double Double_Pulse_Delay, int Trigger_Mode)
        {
            int pInvokeResult = PInvoke.confPulm(this._handle, System.Convert.ToUInt16(State), Source, Polarity, System.Convert.ToUInt16(Pulse_Generator_State), Pulse_Period, Pulse_Width, Pulse_Delay, System.Convert.ToUInt16(Double_Pulse_State), Double_Pulse_Width, Double_Pulse_Delay, Trigger_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates/deactivates the pulse modulation.
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PULM:STATe ON | OFF
        /// 
        /// </summary>
        /// <param name="State">
        /// Activates/deactivates the pulse modulation.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPULMState(bool State)
        {
            int pInvokeResult = PInvoke.SetPULMState(this._handle, System.Convert.ToUInt16(State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the pulse modulation state.
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PULM:STATe?
        /// </summary>
        /// <param name="State">
        /// Returns the pulse modulation state.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPULMState(out bool State)
        {
            ushort StateAsUShort;
            int pInvokeResult = PInvoke.GetPULMState(this._handle, out StateAsUShort);
            State = System.Convert.ToBoolean(StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the polarity between modulating and modulated signal. This function is only effective for an external modulation signal.
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PULM:POLarity NORMal | INVerted
        /// </summary>
        /// <param name="Polarity">
        /// Sets the polarity between modulating and modulated signal.
        /// 
        /// Valid Values:
        /// RSSMA_PULM_POLARITY_NORMAL      (0) - Normal
        /// RSSMA_PULM_POLARITY_INVERTED    (1) - Inverted
        /// 
        /// Default Value: RSSMA_PULM_POLARITY_NORMAL  (0)
        /// 
        /// Notes:
        /// 
        /// (1) Normal:
        /// The RF signal is suppressed during the pulse pause. 
        /// 
        /// (2) Inverted:
        /// The RF signal is suppressed during the pulse.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPULMPolarity(int Polarity)
        {
            int pInvokeResult = PInvoke.SetPULMPolarity(this._handle, Polarity);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the polarity between modulating and modulated signal. This function is only effective for an external modulation signal.
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PULM:POLarity?
        /// </summary>
        /// <param name="Polarity">
        /// Returns the polarity between modulating and modulated signal.
        /// 
        /// Valid Values:
        /// RSSMA_PULM_POLARITY_NORMAL     (0) - Normal
        /// RSSMA_PULM_POLARITY_INVERTED   (1) - Inverted
        /// 
        /// Notes:
        /// 
        /// (1) Normal:
        /// The RF signal is suppressed during the pulse pause. 
        /// 
        /// (2) Inverted:
        /// The RF signal is suppressed during the pulse.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPULMPolarity(out int Polarity)
        {
            int pInvokeResult = PInvoke.GetPULMPolarity(this._handle, out Polarity);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the source for pulse modulation. 
        /// 
        /// Required Option(s):
        /// CODer requires option R&amp;S SMA-K23
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PULM:SOURce  INTernal | EXTernal | CODer
        /// 
        /// </summary>
        /// <param name="Source">
        /// Selects the source for pulse modulation.
        /// 
        /// Valid Values:
        /// RSSMA_PULM_SOURCE_INTERNAL    (0) - Internal 
        /// RSSMA_PULM_SOURCE_EXTERNAL    (1) - External
        /// RSSMA_PULM_SOURCE_CODER       (2) - Coder
        /// 
        /// Default Value: RSSMA_PULM_SOURCE_INTERNAL  (0)
        /// 
        /// Notes:
        /// 
        /// (1) Internal:
        /// The internally generated rectangular signal is used for the pulse modulation. The frequency of the internal signal can be set in the SOURce:LFOutput subsystem. This selection is only available if option R&amp;S SMA-K23 is not fitted. 
        /// 
        /// (2) External:
        /// The signal applied externally via the EXT MOD connector is used for the pulse modulation.
        /// 
        /// (3) Coder:
        /// The internal pulse generator (option R&amp;S SMA-K23) is used for the pulse modulation. This selection is only available if option R&amp;S SMA-K23 is fitted.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPULMSource(int Source)
        {
            int pInvokeResult = PInvoke.SetPULMSource(this._handle, Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the source for pulse modulation. 
        /// 
        /// Required Option(s):
        /// CODer requires option R&amp;S SMA-K23
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PULM:SOURce?
        /// 
        /// </summary>
        /// <param name="Source">
        /// Returns the source for pulse modulation.
        /// 
        /// Valid Values:
        /// RSSMA_PULM_SOURCE_INTERNAL    (0) - Internal 
        /// RSSMA_PULM_SOURCE_EXTERNAL    (1) - External
        /// RSSMA_PULM_SOURCE_CODER       (2) - Coder
        /// 
        /// Notes:
        /// 
        /// (1) Internal:
        /// The internally generated rectangular signal is used for the pulse modulation. The frequency of the internal signal can be set in the SOURce:LFOutput subsystem. This selection is only available if option R&amp;S SMA-K23 is not fitted.
        /// 
        /// (2) External:
        /// The signal applied externally via the EXT MOD connector is used for the pulse modulation.
        /// 
        /// (3) Coder:
        /// The internal pulse generator (option R&amp;S SMA-K23) is used for the pulse modulation. This selection is only available if option R&amp;S SMA-K23 is fitted.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPULMSource(out int Source)
        {
            int pInvokeResult = PInvoke.GetPULMSource(this._handle, out Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the period of the generated pulse. The period determines the repetition
        /// frequency of the internal signal.
        /// 
        /// Required Option(s):
        /// The enhanced features require option R&amp;S SMA-K23
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PULM:PERiod
        /// </summary>
        /// <param name="Pulse_Period">
        /// Sets the period of the generated pulse. The period determines the repetition frequency of the internal signal.
        /// 
        /// Valid Range: 5.0e-6 to 85.0 s
        ///            100.0e-9 to 85.0 s  with Option R&amp;S SMA-K23
        /// 
        /// Default Value: 1.0e-3 s
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPULMPeriod(double Pulse_Period)
        {
            int pInvokeResult = PInvoke.SetPULMPeriod(this._handle, Pulse_Period);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the period of the generated pulse.
        /// 
        /// Required Option(s):
        /// The enhanced features require option R&amp;S SMA-K23
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PULM:PERiod?
        /// </summary>
        /// <param name="Pulse_Period">
        /// Returns the period of the generated pulse.
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPULMPeriod(out double Pulse_Period)
        {
            int pInvokeResult = PInvoke.GetPULMPeriod(this._handle, out Pulse_Period);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the width of the generated pulse. The width determines the pulse length. The pulse width must be at least 20 ns less than the set pulse period.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K23
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PULM:WIDTh
        /// 
        /// </summary>
        /// <param name="Pulse_Width">
        /// Sets the width of the generated pulse. The width determines the pulse length.
        /// 
        /// Valid Range: 20.0e-9 to 1.0 s
        /// 
        /// Default Value: 1.0e-3 s
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPULMWidth(double Pulse_Width)
        {
            int pInvokeResult = PInvoke.SetPULMWidth(this._handle, Pulse_Width);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the width of the generated pulse.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K23
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PULM:WIDTh?
        /// 
        /// </summary>
        /// <param name="Pulse_Width">
        /// Returns the width of the generated pulse. The width determines the pulse length.
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPULMWidth(out double Pulse_Width)
        {
            int pInvokeResult = PInvoke.GetPULMWidth(this._handle, out Pulse_Width);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the pulse delay. The pulse delay determines the time that elapses after a trigger event before pulse modulation starts. The pulse delay is not effective for double pulse generation.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K23
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PULM:DELay
        /// 
        /// 
        /// 
        /// </summary>
        /// <param name="Pulse_Delay">
        /// Sets the pulse delay. 
        /// 
        /// Valid Range: 10.0e-9 to 100.0 s
        /// 
        /// Default Value: 20.0e-9 s
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPULMDelay(double Pulse_Delay)
        {
            int pInvokeResult = PInvoke.SetPULMDelay(this._handle, Pulse_Delay);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the pulse delay. 
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K23
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PULM:DELay?
        /// 
        /// </summary>
        /// <param name="Pulse_Delay">
        /// Returns the pulse delay.
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPULMDelay(out double Pulse_Delay)
        {
            int pInvokeResult = PInvoke.GetPULMDelay(this._handle, out Pulse_Delay);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function enables/disables double pulse generation. The two pulses are generated in one pulse period.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K23
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PULM:DOUBle:STATe ON | OFF
        /// 
        /// </summary>
        /// <param name="Double_Pulse_State">
        /// Enables/disables double pulse generation.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPULMDoubleState(bool Double_Pulse_State)
        {
            int pInvokeResult = PInvoke.SetPULMDoubleState(this._handle, System.Convert.ToUInt16(Double_Pulse_State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the double pulse modulation state.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K23
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PULM:DOUBle:STATe?
        /// </summary>
        /// <param name="Double_Pulse_State">
        /// Returns the pulse modulation state.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPULMDoubleState(out bool Double_Pulse_State)
        {
            ushort Double_Pulse_StateAsUShort;
            int pInvokeResult = PInvoke.GetPULMDoubleState(this._handle, out Double_Pulse_StateAsUShort);
            Double_Pulse_State = System.Convert.ToBoolean(Double_Pulse_StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the width of the second pulse in case of double pulse generation.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K23
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PULM:DOUBle:WIDTh
        /// </summary>
        /// <param name="Double_Pulse_Width">
        /// Sets the width of the second pulse in case of double pulse generation.
        /// 
        /// Valid Range: 20.0e-9 to 1.0 s
        /// 
        /// Default Value: 1.0e-3 s
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPULMDoubleWidth(double Double_Pulse_Width)
        {
            int pInvokeResult = PInvoke.SetPULMDoubleWidth(this._handle, Double_Pulse_Width);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the width of the second pulse in case of double pulse generation.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K23
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PULM:DOUBle:WIDTh?
        /// </summary>
        /// <param name="Double_Pulse_Width">
        /// Returns the pulse delay.
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPULMDoubleWidth(out double Double_Pulse_Width)
        {
            int pInvokeResult = PInvoke.GetPULMDoubleWidth(this._handle, out Double_Pulse_Width);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the delay from the start of the first pulse to the start of the second pulse.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K23
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PULM:DOUBle:DELay
        /// 
        /// </summary>
        /// <param name="Double_Pulse_Delay">
        /// Sets the pulse delay. 
        /// 
        /// Valid Range: 10.0e-9 to 100.0 s
        /// 
        /// Default Value: 1.0e-3 s
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPULMDoubleDelay(double Double_Pulse_Delay)
        {
            int pInvokeResult = PInvoke.SetPULMDoubleDelay(this._handle, Double_Pulse_Delay);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the delay from the start of the first pulse to the start of the second pulse.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K23
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PULM:DOUBle:DELay?
        /// 
        /// </summary>
        /// <param name="Double_Pulse_Delay">
        /// Returns the delay from the start of the first pulse to the start of the second pulse.
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPULMDoubleDelay(out double Double_Pulse_Delay)
        {
            int pInvokeResult = PInvoke.GetPULMDoubleDelay(this._handle, out Double_Pulse_Delay);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the trigger mode for pulse modulation.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K23
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PULM:TRIGger:MODE AUTO | EXTernal | EGATe
        /// </summary>
        /// <param name="Trigger_Mode">
        /// Selects the trigger mode for pulse modulation.
        /// 
        /// Valid Values:
        /// RSSMA_PULM_TRIGGER_MODE_AUTO      (0) - Auto
        /// RSSMA_PULM_TRIGGER_MODE_EXTERNAL  (1) - External
        /// RSSMA_PULM_TRIGGER_MODE_EGATE     (2) - External Gate
        /// 
        /// Default Value: RSSMA_PULM_TRIGGER_MODE_AUTO  (0)
        /// 
        /// Notes:
        /// 
        /// (1) Auto:
        /// The pulse modulation is generated continuously.
        /// 
        /// (2) External:
        /// The pulse modulation is triggered by an external trigger event. The trigger signal is supplied via the PULSE EXT connector.
        /// 
        /// (3) External Gate:
        /// The pulse modulation is gated by an external gate signal. The signal is supplied via the PULSE EXT connector.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPULMTriggerMode(int Trigger_Mode)
        {
            int pInvokeResult = PInvoke.SetPULMTriggerMode(this._handle, Trigger_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the trigger mode for pulse modulation.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K23
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PULM:TRIGger:MODE?
        /// </summary>
        /// <param name="Trigger_Mode">
        /// Returns the trigger mode for pulse modulation.
        /// 
        /// Valid Values:
        /// RSSMA_PULM_TRIGGER_MODE_AUTO      (0) - Auto
        /// RSSMA_PULM_TRIGGER_MODE_EXTERNAL  (1) - External
        /// RSSMA_PULM_TRIGGER_MODE_EGATE     (2) - External Gate
        /// 
        /// Notes:
        /// 
        /// (1) Auto:
        /// The pulse modulation is generated continuously.
        /// 
        /// (2) External:
        /// The pulse modulation is triggered by an external trigger event. The trigger signal is supplied via the PULSE EXT connector.
        /// 
        /// (3) External Gate:
        /// The pulse modulation is gated by an external gate signal. The signal is supplied via the PULSE EXT connector.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPULMTriggerMode(out int Trigger_Mode)
        {
            int pInvokeResult = PInvoke.GetPULMTriggerMode(this._handle, out Trigger_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the impedance for external pulse trigger. The trigger is fed via the PULSE EXT input.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K23
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PULM:TRIGger:EXTernal:IMPedance G50 | G10K
        /// </summary>
        /// <param name="External_Input_Impedance">
        /// Selects the impedance for external pulse trigger.
        /// 
        /// Valid Values:
        /// RSSMA_EXT_INPUT_IMPEDANCE_G50   (0) - 50 Ohm to ground
        /// RSSMA_EXT_INPUT_IMPEDANCE_G1K   (1) - 10 kOhm
        /// 
        /// Default Value: RSSMA_EXT_INPUT_IMPEDANCE_G50 (0)
        /// 
        /// Note(s):
        /// (1) This parameter is only valid if selected source is 'External'.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPULMExternalTriggerInputImpedance(int External_Input_Impedance)
        {
            int pInvokeResult = PInvoke.SetPULMExternalTriggerInputImpedance(this._handle, External_Input_Impedance);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the impedance for external pulse trigger. The trigger is fed via the PULSE EXT input.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K23
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PULM:TRIGger:EXTernal:IMPedance?
        /// </summary>
        /// <param name="External_Input_Impedance">
        /// Returns the impedance for external pulse trigger.
        /// 
        /// Valid Values:
        /// RSSMA_EXT_INPUT_IMPEDANCE_G50   (0) - 50 Ohm to ground
        /// RSSMA_EXT_INPUT_IMPEDANCE_G1K   (1) - 10 kOhm
        /// 
        /// Note(s):
        /// (1) This parameter is only valid if selected source is 'External'.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPULMExternalTriggerInputImpedance(out int External_Input_Impedance)
        {
            int pInvokeResult = PInvoke.GetPULMExternalTriggerInputImpedance(this._handle, out External_Input_Impedance);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the polarity of the active slope of an applied trigger at the PULSE EXT connector
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K23
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PULM:TRIGger:EXTernal:SLOPe POSitive | NEGative
        /// </summary>
        /// <param name="External_Trigger_Slope">
        /// Sets the polarity of the active slope of an applied trigger at the PULSE EXT connector
        /// 
        /// Valid Values:
        /// RSSMA_INPUT_TRIGGER_SLOPE_NEGATIVE (0) - Negative
        /// RSSMA_INPUT_TRIGGER_SLOPE_POSITIVE (1) - Positive
        /// 
        /// Default Value: RSSMA_INPUT_TRIGGER_SLOPE_POSITIVE (1)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPULMExternalTriggerSlope(int External_Trigger_Slope)
        {
            int pInvokeResult = PInvoke.SetPULMExternalTriggerSlope(this._handle, External_Trigger_Slope);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the polarity of the active slope of an applied trigger at the PULSE EXT connector.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K23
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PULM:TRIGger:EXTernal:SLOPe?
        /// </summary>
        /// <param name="External_Trigger_Slope">
        /// Returns the polarity of the active slope of an applied trigger at the PULSE EXT connector
        /// 
        /// Valid Values:
        /// RSSMA_INPUT_TRIGGER_SLOPE_NEGATIVE (0) - Negative
        /// RSSMA_INPUT_TRIGGER_SLOPE_POSITIVE (1) - Positive
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPULMExternalTriggerSlope(out int External_Trigger_Slope)
        {
            int pInvokeResult = PInvoke.GetPULMExternalTriggerSlope(this._handle, out External_Trigger_Slope);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the polarity of the external gate signal. The signal is supplied via the PULSE EXT connector.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K23
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PULM:TRIGger:EXTernal:GATE:POLarity NORMal | INVerted
        /// </summary>
        /// <param name="Gate_Input_Polarity">
        /// Selects the polarity of the external gate signal. The signal is supplied via the PULSE EXT connector.
        /// 
        /// Valid Values:
        /// RSSMA_PULM_POLARITY_NORMAL      (0) - Normal
        /// RSSMA_PULM_POLARITY_INVERTED    (1) - Inverted
        /// 
        /// Default Value: RSSMA_PULM_POLARITY_NORMAL  (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPULMGateInputPolarity(int Gate_Input_Polarity)
        {
            int pInvokeResult = PInvoke.SetPULMGateInputPolarity(this._handle, Gate_Input_Polarity);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the polarity of the external gate signal. The signal is supplied via the PULSE EXT connector.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K23
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PULM:TRIGger:EXTernal:GATE:POLarity?
        /// </summary>
        /// <param name="Gate_Input_Polarity">
        /// Returns the polarity of the external gate signal. The signal is supplied via the PULSE EXT connector.
        /// 
        /// Valid Values:
        /// RSSMA_PULM_POLARITY_NORMAL   (0) - Normal
        /// RSSMA_PULM_POLARITY_INVERTED (1) - Inverted
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPULMGateInputPolarity(out int Gate_Input_Polarity)
        {
            int pInvokeResult = PInvoke.GetPULMGateInputPolarity(this._handle, out Gate_Input_Polarity);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the mode for pulse generation.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is only available with option R&amp;S SMF-K23, parameter PTRain is only available with option R&amp;S SMF-K27.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PULM:MODE DOUBle | SINGle | PTRain
        /// </summary>
        /// <param name="Mode">
        /// Selects the mode for pulse generation.
        /// 
        /// Valid Values:
        /// RSSMA_PULM_MODE_SING (0) - Single
        /// RSSMA_PULM_MODE_DOUB (1) - Double
        /// RSSMA_PULM_MODE_PTR  (2) - Pulse Train
        /// 
        /// Default Value: RSSMA_PULM_MODE_SING  (0)
        /// 
        /// Notes:
        /// 
        /// (1) Single:
        /// A single pulse is generated in one pulse period.
        /// 
        /// (2) Double:
        /// Two pulses are generated in one pulse period.
        /// 
        /// (3) Pulse Train:
        /// A user-defined pulse train is generated The pulse train is defined by value pairs of on and off times that can be entered in a pulse train list.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPULMMode(int Mode)
        {
            int pInvokeResult = PInvoke.SetPULMMode(this._handle, Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the mode for pulse generation.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is only available with option R&amp;S SMF-K23, parameter PTRain is only available with option R&amp;S SMF-K27.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PULM:MODE?
        /// </summary>
        /// <param name="Mode">
        /// Returns the mode for pulse generation.
        /// 
        /// Valid Values:
        /// RSSMA_PULM_MODE_SING (0) - Single
        /// RSSMA_PULM_MODE_DOUB (1) - Double
        /// RSSMA_PULM_MODE_PTR  (2) - Pulse Train
        /// 
        /// Notes:
        /// 
        /// (1) Single:
        /// A single pulse is generated in one pulse period.
        /// 
        /// (2) Double:
        /// Two pulses are generated in one pulse period.
        /// 
        /// (3) Pulse Train:
        /// A user-defined pulse train is generated The pulse train is defined by value pairs of on and off times that can be entered in a pulse train list.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPULMMode(out int Mode)
        {
            int pInvokeResult = PInvoke.GetPULMMode(this._handle, out Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the signal at the SIGNAL VALID connector.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K23
        /// 
        /// Remote-control command(s):
        /// [:SOURce&lt;hw&gt;]:PULM:OUTPut:SYNC[:STATe]
        /// </summary>
        /// <param name="State">
        /// Configures the signal at the output connector.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// 
        /// Note(s):
        /// 
        /// (1) On - Generates a single pulse at the beginning of a pulse sequence,e.g. to synchronize pulse modulation.
        /// 
        /// (2) Off - Returns the validity of the RF signal at the output:
        /// 1 (high), while the signal settles.
        /// 0 (low), when it is stable (valid).
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPULMSynchronizationState(bool State)
        {
            int pInvokeResult = PInvoke.SetPULMSynchronizationState(this._handle, System.Convert.ToUInt16(State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the state of signal at the SIGNAL VALID connector.
        /// 
        /// Remote-control command(s):
        /// [:SOURce&lt;hw&gt;]:PULM:OUTPut:SYNC[:STATe]?
        /// </summary>
        /// <param name="State">
        /// Returns the state of signal configuration.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPULMSynchronizationState(out bool State)
        {
            ushort StateAsUShort;
            int pInvokeResult = PInvoke.GetPULMSynchronizationState(this._handle, out StateAsUShort);
            State = System.Convert.ToBoolean(StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function requests a list of available pulse train files. The individual pulse train files are separated by commas.  
        /// 
        /// The files are stored with the fixed file extensions *.pulstrn in a directory of the user's choice. The directory applicable to the commands is defined with the command MMEMory:CDIR.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is only available with option R&amp;S SMF-K27.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PULM:TRAin:CATalog?
        /// 
        /// </summary>
        /// <param name="Directory_Path">
        /// Directory path parameter.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: VI_NULL
        /// 
        /// Note:
        /// 
        /// If no directory is specified (VI_NULL), the default directory is used.
        /// 
        /// </param>
        /// <param name="Array_Size">
        /// Array size of the parameter labeled 'Catalog List'.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 256
        /// 
        /// </param>
        /// <param name="Catalog_List">
        /// Reads back catalog list. Size of the list is limited by the 'Array Size' parameter.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int PULMPulseTrainCatalog(string Directory_Path, int Array_Size, System.Text.StringBuilder Catalog_List)
        {
            int pInvokeResult = PInvoke.PULMPulseTrainCatalog(this._handle, Directory_Path, Array_Size, Catalog_List);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function deletes the specified pulse train file.
        /// 
        /// The files are stored with the fixed file extensions *.pulstrn in a directory of the user's choice. The directory applicable to the command is defined with the command MMEMory:CDIR. To access the files in this directory, only the file name has to be given without the path and the file extension. 
        /// 
        /// Note(s):
        /// 
        /// (1) This function is only available with option R&amp;S SMF-K27.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PULM:TRAin:DELete '&lt;pulse_train_file&gt;'
        /// 
        /// </summary>
        /// <param name="File_Name">
        /// File name of the pulse train to be deleted.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int PULMDeletePulseTrainFile(string File_Name)
        {
            int pInvokeResult = PInvoke.PULMDeletePulseTrainFile(this._handle, File_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the specified pulse train file. If a new file is to be created, the name can be entered here. The file is created if it does not yet exist. The file selected here is available for the further processing steps (editing) and is used in the instrument when the pulse train mode is activated. 
        /// 
        /// The files are stored with the fixed file extensions *.pulstrn in a directory of the user's choice. The directory applicable to the command is defined with the command MMEMory:CDIR. 
        /// 
        /// *RST does not affect data lists.
        /// 
        /// Note(s):
        /// (1) This function is only available with option R&amp;S SMA-K27.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PULM:TRAin:SELect   '&lt;path&gt;'
        /// 
        /// </summary>
        /// <param name="File_Name">
        /// File name of the pulse train to be selected.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int PULMSelectPulseTrainFile(string File_Name)
        {
            int pInvokeResult = PInvoke.PULMSelectPulseTrainFile(this._handle, File_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function fills the Offtime part of the selected file with data. The data can be given either as a list of numbers (list can be of any length and list entries must be separated by commas) or as binary block data. When block data is transferred, 8 (4) bytes are always interpreted as a floating-point number with double accuracy (see the command FORMat:DATA). The maximum length is 1023 values.
        /// 
        /// *RST does not affect data lists. 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PULM:TRAin:OFFTime  &lt;5ns?5ms&gt;,&lt;5ns?5ms&gt;,&lt;5ns?5ms&gt;,...
        /// </summary>
        /// <param name="Array_Size">
        /// Defines the number of elements in the 'Offtime' array.
        /// 
        /// Valid Range: 0 to 1023
        /// 
        /// Default Value: none
        /// 
        /// </param>
        /// <param name="Offtime">
        /// Offtime part of the selected file with data. Number of values is defined by 'Array Size' parameter.
        /// 
        /// Valid Values: 5ns to 5ms
        /// 
        /// Default Value: none
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPULMTrainOfftime(int Array_Size, double[] Offtime)
        {
            int pInvokeResult = PInvoke.SetPULMTrainOfftime(this._handle, Array_Size, Offtime);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the Offtime part of the selected file with data. The data can be given either as a list of numbers (list can be of any length and list entries must be separated by commas) or as binary block data. When block data is transferred, 8 (4) bytes are always interpreted as a floating-point number with double accuracy (see the command FORMat:DATA). The maximum length is 1023 values.
        /// 
        /// *RST does not affect data lists. 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PULM:TRAin:OFFTime?
        /// </summary>
        /// <param name="Array_Size">
        /// Defines the number of elements in the 'Offtime' array.
        /// 
        /// Valid Range: 0 to 1023
        /// 
        /// Default Value: none
        /// 
        /// </param>
        /// <param name="Offtime">
        /// Offtime part of the selected file with data. Number of values is defined by 'Array Size' parameter.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPULMTrainOfftime(int Array_Size, double[] Offtime)
        {
            int pInvokeResult = PInvoke.GetPULMTrainOfftime(this._handle, Array_Size, Offtime);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries queries the length (in points) of the offtime component of the selected list. 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PULM:TRAin:OFFTime:POINts? 
        /// </summary>
        /// <param name="Number_of_Offtime_Points">
        /// Returns the length (in points) of the offtime component of the selected list. 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetTrainOfftimePoints(out int Number_of_Offtime_Points)
        {
            int pInvokeResult = PInvoke.GetTrainOfftimePoints(this._handle, out Number_of_Offtime_Points);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function fills the Ontime part of the selected file with data. The data can be given either as a list of numbers (list can be of any length and list entries must be separated by commas) or as binary block data. When block data is transferred, 8 (4) bytes are always interpreted as a floating-point number with double accuracy (see the command FORMat:DATA). The maximum length is 1023 values.
        /// 
        /// *RST does not affect data lists. 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PULM:TRAin:ONTime  &lt;5ns?5ms&gt;,&lt;5ns?5ms&gt;,&lt;5ns?5ms&gt;,...
        /// </summary>
        /// <param name="Array_Size">
        /// Defines the number of elements in the 'Otime' array.
        /// 
        /// Valid Range: 0 to 1023
        /// 
        /// Default Value: none
        /// 
        /// </param>
        /// <param name="Ontime">
        /// Ontime part of the selected file with data. Number of values is defined by 'Array Size' parameter.
        /// 
        /// Valid Values: 5ns to 5ms
        /// 
        /// Default Value: none
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPULMTrainOntime(int Array_Size, double[] Ontime)
        {
            int pInvokeResult = PInvoke.SetPULMTrainOntime(this._handle, Array_Size, Ontime);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the Ontime part of the selected file with data. The data can be given either as a list of numbers (list can be of any length and list entries must be separated by commas) or as binary block data. When block data is transferred, 8 (4) bytes are always interpreted as a floating-point number with double accuracy (see the command FORMat:DATA). The maximum length is 1023 values.
        /// 
        /// *RST does not affect data lists. 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PULM:TRAin:ONTime?
        /// </summary>
        /// <param name="Array_Size">
        /// Defines the number of elements in the 'Ontime' array.
        /// 
        /// Valid Range: 0 to 1023
        /// 
        /// Default Value: none
        /// 
        /// </param>
        /// <param name="Ontime">
        /// Offtime part of the selected file with data. Number of values is defined by 'Array Size' parameter.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPULMTrainOntime(int Array_Size, double[] Ontime)
        {
            int pInvokeResult = PInvoke.GetPULMTrainOntime(this._handle, Array_Size, Ontime);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries queries the length (in points) of the ontime component of the selected list. 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PULM:TRAin:ONTime:POINts? 
        /// </summary>
        /// <param name="Number_of_Ontime_Points">
        /// Returns the length (in points) of the ontime component of the selected list. 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetTrainOntimePoints(out int Number_of_Ontime_Points)
        {
            int pInvokeResult = PInvoke.GetTrainOntimePoints(this._handle, out Number_of_Ontime_Points);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the number of repetitions for each ontime/offtime value pair. The maximum length is 1023 values.
        /// 
        /// *RST does not affect data lists. 
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K27
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PULM:TRAin:REPetition
        /// </summary>
        /// <param name="Array_Size">
        /// Defines the number of elements in the 'Otime' array.
        /// 
        /// Valid Range: 0 to 1023
        /// 
        /// Default Value: none
        /// 
        /// </param>
        /// <param name="Repetition">
        /// Sets the number of repetitions for each ontime/offtime value pair. Number of values is defined by 'Array Size' parameter.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: none
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPULMTrainRepetition(int Array_Size, int[] Repetition)
        {
            int pInvokeResult = PInvoke.SetPULMTrainRepetition(this._handle, Array_Size, Repetition);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the number of repetitions for each ontime/offtime value pair. The maximum length is 1023 values.
        /// 
        /// *RST does not affect data lists. 
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K27
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PULM:TRAin:REPetition?
        /// </summary>
        /// <param name="Array_Size">
        /// Defines the number of elements in the 'Otime' array.
        /// 
        /// Valid Range: 0 to 1023
        /// 
        /// Default Value: none
        /// 
        /// </param>
        /// <param name="Repetition">
        /// Returns the number of repetitions for each ontime/offtime value pair. Number of values is defined by 'Array Size' parameter.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPULMTrainRepetition(int Array_Size, int[] Repetition)
        {
            int pInvokeResult = PInvoke.GetPULMTrainRepetition(this._handle, Array_Size, Repetition);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the length (in points) of the repetition component of the selected list. 
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K27
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PULM:TRAin:REPetition:POINts? 
        /// </summary>
        /// <param name="Number_of_Repetition_Points">
        /// Returns the length (in points) of the repetition component of the selected list. 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPULMTrainRepetitionPoints(out int Number_of_Repetition_Points)
        {
            int pInvokeResult = PInvoke.GetPULMTrainRepetitionPoints(this._handle, out Number_of_Repetition_Points);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects if pulse train lists should be imported or exported.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PULM:TRAin:DEXChange:MODE IMPort | EXPort
        /// </summary>
        /// <param name="List_Mode">
        /// This control selects if pulse train lists should be imported or exported. The settings offered below depend on the selected mode.
        /// 
        /// Valid Values:
        /// RSSMA_DEXC_MODE_IMPORT (0) - Import
        /// RSSMA_DEXC_MODE_EXPORT (1) - Export
        /// 
        /// Default Value: RSSMA_DEXC_MODE_IMPORT (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPULMTrainImportExportListMode(int List_Mode)
        {
            int pInvokeResult = PInvoke.SetPULMTrainImportExportListMode(this._handle, List_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns whether pulse train lists is imported or exported.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PULM:TRAin:DEXChange:MODE?
        /// </summary>
        /// <param name="List_Mode">
        /// This control returns whether pulse train lists is imported or exported.
        /// 
        /// Valid Values:
        /// RSSMA_DEXC_MODE_IMPORT (0) - Import
        /// RSSMA_DEXC_MODE_EXPORT (1) - Export
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPULMTrainImportExportListMode(out int List_Mode)
        {
            int pInvokeResult = PInvoke.GetPULMTrainImportExportListMode(this._handle, out List_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function calls the File Manager for selecting the pulse train list to be exported (source) into an ASCII file or the destination for the ASCII file to be imported (destination) in. 
        /// 
        /// The user correction files are stored with the fixed file extensions *.lsw in a directory of the user's choice. The directory applicable to the commands is defined with the command MMEMory:CDIR. A path can also be specified, in which case the files are stored or loaded in the specified directory.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PULM:TRAin:DEXChange:SELect
        /// </summary>
        /// <param name="Source_File">
        /// This control sets the source file.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPULMTrainImportExportListFile(string Source_File)
        {
            int pInvokeResult = PInvoke.SetPULMTrainImportExportListFile(this._handle, Source_File);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function calls the File Manager for querying the pulse train list to be exported (source) into an ASCII file or the destination for the ASCII file to be imported (destination) in.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PULM:TRAin:DEXChange:SELect?
        /// </summary>
        /// <param name="Source_File">
        /// This control queries the source file.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPULMTrainImportExportListFile(System.Text.StringBuilder Source_File)
        {
            int pInvokeResult = PInvoke.GetPULMTrainImportExportListFile(this._handle, Source_File);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function starts the export or import of the selected file. 
        /// When import is selected, the ASCII file is imported as pulse train list.
        /// 
        /// When export is selected, the pulse train list is exported into the selected ASCII file.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PULM:TRAin:DEXChange:EXECute
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int PULMTrainImportExportExecute()
        {
            int pInvokeResult = PInvoke.PULMTrainImportExportExecute(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function calls the File Manager for selecting the ASCII file to be imported into a pulse train list (source) or the ASCII file the pulse train list is exported (destination) in.
        /// 
        /// The ASCII files are stored with the fixed file extensions *.txt or *.csv in a directory of the user's choice. The directory applicable to the commands is defined with the command MMEMory:CDIR.  A path can also be specified, in which case the files are stored or loaded in the specified directory.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PULM:TRAin:DEXChange:AFILe:SELect
        /// </summary>
        /// <param name="ASCII_Source_File">
        /// This control sets the ASCII source file.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPULMTrainImportExportASCIIFile(string ASCII_Source_File)
        {
            int pInvokeResult = PInvoke.SetPULMTrainImportExportASCIIFile(this._handle, ASCII_Source_File);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function calls the File Manager for querying the ASCII file to be imported into a pulse train list (source) or the ASCII file the pulse train list is exported (destination) in.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PULM:TRAin:DEXChange:AFILe:SELect?
        /// </summary>
        /// <param name="ASCII_Source_File">
        /// This control queries the ASCII source file.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPULMTrainImportExportASCIIFile(System.Text.StringBuilder ASCII_Source_File)
        {
            int pInvokeResult = PInvoke.GetPULMTrainImportExportASCIIFile(this._handle, ASCII_Source_File);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the file extension of the ASCII file to be imported or exported. Selection TXT (text file) or CSV (Excel file) is available. 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PULM:TRAin:DEXChange:AFILe:EXTension TXT | CSV
        /// </summary>
        /// <param name="Extension">
        /// This control selects the file extension of the ASCII file to be imported or exported. Selection TXT (text file) or CSV (Excel file) is available.
        /// 
        /// Valid Values:
        /// RSSMA_DEXC_ASCII_SOURCE_FILE_EXT_TXT (0) - txt
        /// RSSMA_DEXC_ASCII_SOURCE_FILE_EXT_CSV (1) - csv
        /// 
        /// Default Value:
        /// RSSMA_DEXC_ASCII_SOURCE_FILE_EXT_TXT (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPULMTrainImportExportASCIIExtension(int Extension)
        {
            int pInvokeResult = PInvoke.SetPULMTrainImportExportASCIIExtension(this._handle, Extension);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the selected file extension of the ASCII file to be imported or exported. Selection TXT (text file) or CSV (Excel file) is available. 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PULM:TRAin:DEXChange:AFILe:EXTension?
        /// </summary>
        /// <param name="Extension">
        /// This control displays the file extension of the ASCII file to be imported or exported. Selection TXT (text file) or CSV (Excel file) is available.
        /// 
        /// Valid Values:
        /// RSSMA_DEXC_ASCII_SOURCE_FILE_EXT_TXT (0) - txt
        /// RSSMA_DEXC_ASCII_SOURCE_FILE_EXT_CSV (1) - csv
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPULMTrainImportExportASCIIExtension(out int Extension)
        {
            int pInvokeResult = PInvoke.GetPULMTrainImportExportASCIIExtension(this._handle, out Extension);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the separator between the frequency and level column of the ASCII table. 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PULM:TRAin:DEXChange:AFILe:SEParator:COLumn TABulator | SEMicolon | COMMa | SPACe
        /// </summary>
        /// <param name="Separator">
        /// This control selects the separator between the frequency and level column of the ASCII table. 
        /// 
        /// Valid Values:
        /// RSSMA_DEXC_ASCII_SOURCE_FILE_COLUMN_SEP_TAB   (0) - Tabulator
        /// RSSMA_DEXC_ASCII_SOURCE_FILE_COLUMN_SEP_SEM   (1) - Semicolon
        /// RSSMA_DEXC_ASCII_SOURCE_FILE_COLUMN_SEP_COMMA (2) - Comma
        /// RSSMA_DEXC_ASCII_SOURCE_FILE_COLUMN_SEP_SPACE (3) - Space
        /// 
        /// Default Value:
        /// RSSMA_DEXC_ASCII_SOURCE_FILE_COLUMN_SEP_TAB (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPULMTrainImportExportASCIIColumnSeparator(int Separator)
        {
            int pInvokeResult = PInvoke.SetPULMTrainImportExportASCIIColumnSeparator(this._handle, Separator);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the selected separator between the frequency and level column of the ASCII table. 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PULM:TRAin:DEXChange:AFILe:SEParator:COLumn?
        /// </summary>
        /// <param name="Separator">
        /// This control displays the separator between the frequency and level column of the ASCII table. 
        /// 
        /// Valid Values:
        /// RSSMA_DEXC_ASCII_SOURCE_FILE_COLUMN_SEP_TAB   (0) - Tabulator
        /// RSSMA_DEXC_ASCII_SOURCE_FILE_COLUMN_SEP_SEM   (1) - Semicolon
        /// RSSMA_DEXC_ASCII_SOURCE_FILE_COLUMN_SEP_COMMA (2) - Comma
        /// RSSMA_DEXC_ASCII_SOURCE_FILE_COLUMN_SEP_SPACE (3) - Space
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPULMTrainImportExportASCIIColumnSeparator(out int Separator)
        {
            int pInvokeResult = PInvoke.GetPULMTrainImportExportASCIIColumnSeparator(this._handle, out Separator);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the decimal separator used in the ASCII data between '.' (decimal point) and ',' (comma) with floating-point numerals.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PULM:TRAin:DEXChange:AFILe:SEParator:DECimal DOT | COMMa
        /// </summary>
        /// <param name="Decimal_Separator">
        /// This control selects the decimal separator used in the ASCII data between '.' (decimal point) and ',' (comma) with floating-point numerals.  
        /// 
        /// Valid Values:
        /// RSSMA_DEXC_ASCII_SOURCE_FILE_COLUMN_DEC_SEP_DOT   (0) - Dot
        /// RSSMA_DEXC_ASCII_SOURCE_FILE_COLUMN_DEC_SEP_COMMA (1) - Comma
        /// 
        /// Default Value:
        /// RSSMA_DEXC_ASCII_SOURCE_FILE_COLUMN_DEC_SEP_DOT (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPULMTrainImportExportASCIIDecimalSeparator(int Decimal_Separator)
        {
            int pInvokeResult = PInvoke.SetPULMTrainImportExportASCIIDecimalSeparator(this._handle, Decimal_Separator);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function displays the selected decimal separator used in the ASCII data - '.' (decimal point) and ',' (comma) with floating-point numerals.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PULM:TRAin:DEXChange:AFILe:SEParator:DECimal?
        /// </summary>
        /// <param name="Decimal_Separator">
        /// This control displays the decimal separator used in the ASCII data between '.' (decimal point) and ',' (comma) with floating-point numerals.  
        /// 
        /// Valid Values:
        /// RSSMA_DEXC_ASCII_SOURCE_FILE_COLUMN_DEC_SEP_DOT   (0) - Dot
        /// RSSMA_DEXC_ASCII_SOURCE_FILE_COLUMN_DEC_SEP_COMMA (1) - Comma
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPULMTrainImportExportASCIIDecimalSeparator(out int Decimal_Separator)
        {
            int pInvokeResult = PInvoke.GetPULMTrainImportExportASCIIDecimalSeparator(this._handle, out Decimal_Separator);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function requests a list of available ASCII files for export/import of pulse train data. The individual files are separated by commas.
        ///  
        /// The ASCII files are stored with the fixed file extensions *.txt or *.csv in a directory of the user's choice. The directory applicable to the commands is defined with the command MMEMory:CDIR.  A path can also be specified, in which case the files in the specified directory are read.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PULM:TRAin:DEXChange:AFILe:CATalog?
        /// 
        /// </summary>
        /// <param name="Array_Size">
        /// Array size of the parameter labeled 'Catalog List'.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 256
        /// 
        /// </param>
        /// <param name="Catalog_List">
        /// Reads back catalog list. Size of the list is limited by the 'Array Size' parameter.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int PULMTrainImportExportCatalog(int Array_Size, System.Text.StringBuilder Catalog_List)
        {
            int pInvokeResult = PInvoke.PULMTrainImportExportCatalog(this._handle, Array_Size, Catalog_List);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configure the DME modulation.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:STATe ON | OFF
        /// [SOURce:]DME:MODE INTerrogation | REPLy
        /// [SOURce:]DME:LOWemission ON | OFF
        /// [SOURce:]DME:SINGle ON | OFF
        /// [SOURce:]DME:SQUitter 
        /// [SOURce:]DME:RDIStance
        /// [SOURce:]DME:RATE
        /// </summary>
        /// <param name="State">
        /// Activate/deactivate DME modulation.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <param name="Mode">
        /// Selects the mode of the DME modulation.
        /// 
        /// Valid Values:
        /// RSSMA_DMEM_MODE_INT (0) - Interrogation
        /// RSSMA_DMEM_MODE_REP (1) - Reply
        /// 
        /// Default Value: RSSMA_DMEM_MODE_INT (0)
        /// 
        /// Note(s):
        /// 
        /// (1) Interrogation:
        /// The interrogation signal of the airborne transmitter  is simulated.
        /// 
        /// (2) Reply:
        /// The reply signal of the ground based transponder is simulated. The trigger is automatically set to external and the default trigger delay either to 50 us (channel X) or 56 us (channel Y) depending on the selected channel.
        /// </param>
        /// <param name="Low_Emission">
        /// Activates the generation of a DME signal with higher spectral purity but less dynamic compared to the default mode. 
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <param name="Single_Pulse">
        /// Activate/deactivate a single test pulse.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <param name="Pulse_Squitter">
        /// Activates the random pulse repetition rate.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// Note(s):
        /// 
        /// (1) This control is only available if the Mode is set to Reply.
        /// </param>
        /// <param name="Range_Distance">
        /// Sets the simulated distance between interrogator and transponder for reply mode. The distance is given in nautic miles (nm). 1 nm is 1852.01 meters and corresponds to a run time of 12.359 us.
        /// 
        /// Valid Values:
        /// 
        /// 
        /// Default Value: 0 nm
        /// 
        /// Note(s):
        /// 
        /// (1) This control is only available if the Mode is set to Reply.
        /// </param>
        /// <param name="Rate">
        /// Sets the pulse repetition rate for trigger setting Auto or Ext Gated. 
        /// 
        /// Valid Values:
        /// 10 Hz to 60000 Hz
        /// 
        /// Default Value: 48 Hz
        /// 
        /// Note(s):
        /// 
        /// (1) This control is only available if the Mode is set to Interrogation.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int confDMEM(bool State, int Mode, bool Low_Emission, bool Single_Pulse, bool Pulse_Squitter, int Range_Distance, int Rate)
        {
            int pInvokeResult = PInvoke.confDMEM(this._handle, System.Convert.ToUInt16(State), Mode, System.Convert.ToUInt16(Low_Emission), System.Convert.ToUInt16(Single_Pulse), System.Convert.ToUInt16(Pulse_Squitter), Range_Distance, Rate);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the echo pulse. 
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:ECHO
        /// [SOURce:]DME:ECHO:ATT
        /// [SOURce:]DME:ECHO:DEL
        /// </summary>
        /// <param name="Echo_Pulse">
        /// Activates an echo pulse pair.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <param name="Echo_Attenuation">
        /// Sets the attenuation of the echo pulses compared to the original pulses. 
        /// 
        /// Valid Values:
        /// 0 dB to 20dB
        /// 
        /// Default Value: 0 dB
        /// </param>
        /// <param name="Echo_Delay">
        /// Sets the attenuation of the echo pulses compared to the original pulses. 
        /// 
        /// Valid Values:
        /// 10 us to 1000 us
        /// 
        /// Default Value: 400.0e-6 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int confDMEMEcho(bool Echo_Pulse, double Echo_Attenuation, double Echo_Delay)
        {
            int pInvokeResult = PInvoke.confDMEMEcho(this._handle, System.Convert.ToUInt16(Echo_Pulse), Echo_Attenuation, Echo_Delay);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configure the pulse.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:CSUFfix
        /// [SOURce:]DME:SHAPe
        /// [SOURce:]DME:RISE
        /// [SOURce:]DME:FALL
        /// [SOURce:]DME:WIDTh
        /// [SOURce:]DME:PPS
        /// </summary>
        /// <param name="Channel_Suffix">
        /// Selects the channel that is simulated.
        /// 
        /// Valid Values:
        /// RSSMA_SOURCE_DMEM_CHANNEL_SUFFIC_X    (0) - X
        /// RSSMA_SOURCE_DMEM_CHANNEL_SUFFIC_Y    (1) - Y
        /// 
        /// Default Value:
        /// RSSMA_SOURCE_DMEM_CHANNEL_SUFFIC_X (0) - X
        /// 
        /// </param>
        /// <param name="Pulse_Shape">
        /// Selects the pulse shape.
        /// 
        /// Valid Values:
        /// RSSMA_DMEM_SHAPE_COS  (0) - Cos^2
        /// RSSMA_DMEM_SHAPE_COS2 (1) - Cos Cos^2
        /// RSSMA_DMEM_SHAPE_LIN  (2) - Linear
        /// 
        /// Default Value: RSSMA_DMEM_SHAPE_COS  (0)
        /// 
        /// Note(s):
        /// 
        /// (1) Cos^2:
        /// The falling and the rising edge of the pulse are cos^2 shaped.
        /// 
        /// (2) Cos Cos^2:
        /// The rising edge is cos shaped and the falling edge is cos^2 shaped.
        /// 
        /// (3) Linear:
        /// The falling and the rising edge of the pulse are shaped linear.
        /// </param>
        /// <param name="Pulse_Rise">
        /// Sets the rise time of the pulse (10% to 90% of peak voltage).
        /// 
        /// Valid Values:
        /// 0.5e-6 to 20.0e-6 s
        /// 
        /// Default Value: 2.0e-6 s
        /// </param>
        /// <param name="Pulse_Fall">
        /// Sets the fall time of the pulse (90% to 10% of peak voltage).
        /// 
        /// Valid Values:
        /// 0.5e-6 to 20.0e-6 s
        /// 
        /// Default Value: 2.0e-6 s
        /// </param>
        /// <param name="Pulse_Width">
        /// Sets the pulse width (50% to 50% of peak voltage).
        /// 
        /// Valid Values:
        /// 1.0e-6 to 100.0e-6 s
        /// 
        /// Default Value: 3.5e-6 s
        /// </param>
        /// <param name="Pulse_Spacing">
        /// Sets the spacing between the first and second pulse of a pulse pair (time between half-voltage points on the leading edge of each pulse).
        /// 
        /// Valid Values:
        /// 1.0e-6 to 100.0e-6 s
        /// 
        /// Default Value: 12.0e-6 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int confDMEMPulse(int Channel_Suffix, int Pulse_Shape, double Pulse_Rise, double Pulse_Fall, double Pulse_Width, double Pulse_Spacing)
        {
            int pInvokeResult = PInvoke.confDMEMPulse(this._handle, Channel_Suffix, Pulse_Shape, Pulse_Rise, Pulse_Fall, Pulse_Width, Pulse_Spacing);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the DMEM trigger.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:TRIGger:MODE 
        /// [SOURce:]DME:TRIGger:DELay
        /// [SOURce:]DME:TRIGger:IMPedance
        /// [SOURce:]DME:TRIGger:SLOPe
        /// </summary>
        /// <param name="Trigger_Mode">
        /// Selects the trigger mode for DME modulation.
        /// 
        /// Valid Values:
        /// RSSMA_DME_TRIGGER_MODE_AUTO      (0) - Auto
        /// RSSMA_DME_TRIGGER_MODE_EXTERNAL  (1) - Ext Single
        /// RSSMA_DME_TRIGGER_MODE_EGATE     (2) - Ext Gated
        /// RSSMA_DME_TRIGGER_MODE_PSEN      (3) - Power Sensor
        /// 
        /// Default Value: RSSMA_DME_TRIGGER_MODE_AUTO  (0)
        /// 
        /// Notes:
        /// (1) AUTO - The DME modulation signals are generated continuously. This mode is only available for the interrogation signal.
        /// 
        /// (2) EXTernal - The DME modulation signals are triggered by an external trigger event. The trigger signal is supplied via the PULSE EXT connector.
        /// 
        /// (3) EGATe - The DME modulation signals are gated by an external gate signal. The signal is supplied via the PULSE EXT connector.  This mode is only available for the interrogation signal.
        /// 
        /// (4) PSensor - The DME modulation signals are triggered by an external power sensor. This mode is only available for the interrogation signal
        /// </param>
        /// <param name="Trigger_Delay">
        /// Sets the delay between the external trigger and the first DME output pulse (50% voltage point of first pulse).
        /// 
        /// Valid Values:
        /// 20E-9 s to 1 s
        /// 
        /// Default Value: 50.0e-6 s
        /// </param>
        /// <param name="External_Input_Impedance">
        /// Selects the input impedance for the external trigger and gate signal input PULSE EXT (10 kOhm or 50 Ohm).
        /// 
        /// Valid Values:
        /// RSSMA_INPUT_IMPEDANCE_G50   (0) - 50 Ohm
        /// RSSMA_INPUT_IMPEDANCE_G10K  (1) - 10 kOhm
        /// 
        /// Default Value: RSSMA_INPUT_IMPEDANCE_G50 (0)
        /// </param>
        /// <param name="Ext_Trigger_Input_Slope">
        /// Sets the polarity of the active slope of an applied trigger at the PULSE EXT connector.
        /// 
        /// Valid Values:
        /// RSSMA_INPUT_TRIGGER_SLOPE_POSITIVE (0) - Positive
        /// RSSMA_INPUT_TRIGGER_SLOPE_NEGATIVE (1) - Negative
        /// 
        /// Default Value: RSSMA_INPUT_TRIGGER_SLOPE_POSITIVE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int confDMEMTrigger(int Trigger_Mode, double Trigger_Delay, int External_Input_Impedance, int Ext_Trigger_Input_Slope)
        {
            int pInvokeResult = PInvoke.confDMEMTrigger(this._handle, Trigger_Mode, Trigger_Delay, External_Input_Impedance, Ext_Trigger_Input_Slope);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activate the DME defaultsetting (see *RST value column of command descriptions).
        /// 
        /// Note(s):
        /// 
        /// (1) This command triggers an event and therefore has no *RST value.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:PRESet  
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int DMEMPreset()
        {
            int pInvokeResult = PInvoke.DMEMPreset(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activate/deactivate DME modulation. The DME modulation signal can be output at the LF connector.
        /// 
        /// Note(s):
        /// 
        /// (1) Modulations PULSE, VOR, ILS-GS, ILS-LOC, MKR-BCN, ADF, AM, and internal FM/PhiM  are automatically switched off when DME modulation is activated. Also, the pulse generator is automatically switched off.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:STATe ON | OFF
        /// </summary>
        /// <param name="State">
        /// Activate/deactivate DME modulation.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDMEMState(bool State)
        {
            int pInvokeResult = PInvoke.SetDMEMState(this._handle, System.Convert.ToUInt16(State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the state of the DME modulation.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:STATe?
        /// </summary>
        /// <param name="State">
        /// Returns the state of the DME modulation.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDMEMState(out bool State)
        {
            ushort StateAsUShort;
            int pInvokeResult = PInvoke.GetDMEMState(this._handle, out StateAsUShort);
            State = System.Convert.ToBoolean(StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the mode of the DME modulation. The mode determines the signal type that is simulated. The exact timing of the signal for each mode is determined by the selected channel.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:MODE INTerrogation | REPLy
        /// </summary>
        /// <param name="Mode">
        /// Selects the mode of the DME modulation.
        /// 
        /// Valid Values:
        /// RSSMA_DMEM_MODE_INT (0) - Interrogation
        /// RSSMA_DMEM_MODE_REP (1) - Reply
        /// 
        /// Default Value: RSSMA_DMEM_MODE_INT (0)
        /// 
        /// Note(s):
        /// 
        /// (1) Interrogation:
        /// The interrogation signal of the airborne transmitter  is simulated.
        /// 
        /// (2) Reply:
        /// The reply signal of the ground based transponder is simulated. The trigger is automatically set to external and the default trigger delay either to 50 us (channel X) or 56 us (channel Y) depending on the selected channel.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDMEMMode(int Mode)
        {
            int pInvokeResult = PInvoke.SetDMEMMode(this._handle, Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the mode of the DME modulation.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:MODE?
        /// </summary>
        /// <param name="Mode">
        /// Returnss the mode of the DME modulation.
        /// 
        /// Valid Values:
        /// RSSMA_DMEM_MODE_INT (0) - Interrogation
        /// RSSMA_DMEM_MODE_REP (1) - Reply
        /// 
        /// Note(s):
        /// 
        /// (1) Interrogation:
        /// The interrogation signal of the airborne transmitter  is simulated.
        /// 
        /// (2) Reply:
        /// The reply signal of the ground based transponder is simulated. The trigger is automatically set to external and the default trigger delay either to 50 us (channel X) or 56 us (channel Y) depending on the selected channel.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDMEMMode(out int Mode)
        {
            int pInvokeResult = PInvoke.GetDMEMMode(this._handle, out Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the pulse shape.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:SHAPe COS | COS2 | LIN
        /// </summary>
        /// <param name="Pulse_Shape">
        /// Selects the pulse shape.
        /// 
        /// Valid Values:
        /// RSSMA_DMEM_SHAPE_COS  (0) - Cos^2
        /// RSSMA_DMEM_SHAPE_COS2 (1) - Cos Cos^2
        /// RSSMA_DMEM_SHAPE_LIN  (2) - Linear
        /// 
        /// Default Value: RSSMA_DMEM_SHAPE_COS  (0)
        /// 
        /// Note(s):
        /// 
        /// (1) Cos^2:
        /// The falling and the rising edge of the pulse are cos^2 shaped.
        /// 
        /// (2) Cos Cos^2:
        /// The rising edge is cos shaped and the falling edge is cos^2 shaped.
        /// 
        /// (3) Linear:
        /// The falling and the rising edge of the pulse are shaped linear.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDMEMPulseShape(int Pulse_Shape)
        {
            int pInvokeResult = PInvoke.SetDMEMPulseShape(this._handle, Pulse_Shape);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the pulse shape.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:SHAPe?
        /// </summary>
        /// <param name="Pulse_Shape">
        /// Returns the pulse shape.
        /// 
        /// Valid Values:
        /// RSSMA_DMEM_SHAPE_COS  (0) - Cos^2
        /// RSSMA_DMEM_SHAPE_COS2 (1) - Cos Cos^2
        /// RSSMA_DMEM_SHAPE_LIN  (2) - Linear
        /// 
        /// Note(s):
        /// 
        /// (1) Cos^2:
        /// The falling and the rising edge of the pulse are cos^2 shaped.
        /// 
        /// (2) Cos Cos^2:
        /// The rising edge is cos shaped and the falling edge is cos^2 shaped.
        /// 
        /// (3) Linear:
        /// The falling and the rising edge of the pulse are shaped linear.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDMEMPulseShape(out int Pulse_Shape)
        {
            int pInvokeResult = PInvoke.GetDMEMPulseShape(this._handle, out Pulse_Shape);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the rise time of the pulse (10% to 90% of peak voltage).
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:RISE
        /// </summary>
        /// <param name="Pulse_Rise">
        /// Sets the rise time of the pulse (10% to 90% of peak voltage).
        /// 
        /// Valid Values:
        /// 0.5e-6 to 20.0e-6 s
        /// 
        /// Default Value: 2.0e-6 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDMEMPulseRise(double Pulse_Rise)
        {
            int pInvokeResult = PInvoke.SetDMEMPulseRise(this._handle, Pulse_Rise);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the rise time of the pulse (10% to 90% of peak voltage).
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:RISE?
        /// </summary>
        /// <param name="Pulse_Rise">
        /// Returns the rise time of the pulse (10% to 90% of peak voltage).
        /// 
        /// Valid Values:
        /// 0.5e-6 to 20.0e-6 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDMEMPulseRise(out double Pulse_Rise)
        {
            int pInvokeResult = PInvoke.GetDMEMPulseRise(this._handle, out Pulse_Rise);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the pulse width (50% to 50% of peak voltage).
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:WIDTh
        /// </summary>
        /// <param name="Pulse_Width">
        /// Sets the pulse width (50% to 50% of peak voltage).
        /// 
        /// Valid Values:
        /// 1.0e-6 to 100.0e-6 s
        /// 
        /// Default Value: 3.5e-6 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDMEMPulseWidth(double Pulse_Width)
        {
            int pInvokeResult = PInvoke.SetDMEMPulseWidth(this._handle, Pulse_Width);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the pulse width (50% to 50% of peak voltage).
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:WIDTh?
        /// </summary>
        /// <param name="Pulse_Width">
        /// Returns the pulse width (50% to 50% of peak voltage).
        /// 
        /// Valid Values:
        /// 1.0e-6 to 100.0e-6 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDMEMPulseWidth(out double Pulse_Width)
        {
            int pInvokeResult = PInvoke.GetDMEMPulseWidth(this._handle, out Pulse_Width);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the fall time of the pulse (90% to 10% of peak voltage).
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:FALL
        /// </summary>
        /// <param name="Pulse_Fall">
        /// Sets the fall time of the pulse (90% to 10% of peak voltage).
        /// 
        /// Valid Values:
        /// 0.5e-6 to 20.0e-6 s
        /// 
        /// Default Value: 2.0e-6 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDMEMPulseFall(double Pulse_Fall)
        {
            int pInvokeResult = PInvoke.SetDMEMPulseFall(this._handle, Pulse_Fall);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the fall time of the pulse (90% to 10% of peak voltage).
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:FALL?
        /// </summary>
        /// <param name="Pulse_Fall">
        /// Returns the fall time of the pulse (90% to 10% of peak voltage).
        /// 
        /// Valid Values:
        /// 0.5e-6 to 20.0e-6 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDMEMPulseFall(out double Pulse_Fall)
        {
            int pInvokeResult = PInvoke.GetDMEMPulseFall(this._handle, out Pulse_Fall);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the spacing between the first and second pulse of a pulse pair (time between half-voltage points on the leading edge of each pulse).
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:PPS
        /// </summary>
        /// <param name="Pulse_Spacing">
        /// Sets the spacing between the first and second pulse of a pulse pair (time between half-voltage points on the leading edge of each pulse).
        /// 
        /// Valid Values:
        /// 1.0e-6 to 100.0e-6 s
        /// 
        /// Default Value: 12.0e-6 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDMEMPulseSpacing(double Pulse_Spacing)
        {
            int pInvokeResult = PInvoke.SetDMEMPulseSpacing(this._handle, Pulse_Spacing);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the spacing between the first and second pulse of a pulse pair (time between half-voltage points on the leading edge of each pulse).
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:PPS?
        /// </summary>
        /// <param name="Pulse_Spacing">
        /// Displays the spacing between the first and second pulse of a pulse pair (time between half-voltage points on the leading edge of each pulse).
        /// 
        /// Valid Values:
        /// 1.0e-6 to 100.0e-6 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDMEMPulseSpacing(out double Pulse_Spacing)
        {
            int pInvokeResult = PInvoke.GetDMEMPulseSpacing(this._handle, out Pulse_Spacing);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates the random pulse repetition rate. The average repetition rate is 2700 pp/s. The pulse spacing is distributed randomly in the range of 60 us to about 1500 us according to EUROCAE EN-54 6.2.12.  The squitter pulses are constantly sent by the ground station in order to ensure proper operation and in order to ease synchronization of the aircraft interrogator to the ground station.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available for Reply mode on and Echo Pulse off only.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:SQUitter ON | OFF
        /// </summary>
        /// <param name="Pulse_Squitter">
        /// Activates the random pulse repetition rate.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDMEMSquitter(bool Pulse_Squitter)
        {
            int pInvokeResult = PInvoke.SetDMEMSquitter(this._handle, System.Convert.ToUInt16(Pulse_Squitter));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the state of the random pulse repetition rate. The average repetition rate is 2700 pp/s. The pulse spacing is distributed randomly in the range of 60 us to about 1500 us according to EUROCAE EN-54 6.2.12.  The squitter pulses are constantly sent by the ground station in order to ensure proper operation and in order to ease synchronization of the aircraft interrogator to the ground station.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available for Reply mode on and Echo Pulse off only.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:SQUitter?
        /// </summary>
        /// <param name="Pulse_Squitter">
        /// Returns the state of the random pulse repetition rate.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDMEMSquitter(out bool Pulse_Squitter)
        {
            ushort Pulse_SquitterAsUShort;
            int pInvokeResult = PInvoke.GetDMEMSquitter(this._handle, out Pulse_SquitterAsUShort);
            Pulse_Squitter = System.Convert.ToBoolean(Pulse_SquitterAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the pulse repetition rate for trigger setting Auto or Ext Gated. 
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:RATE
        /// 
        /// </summary>
        /// <param name="Rate">
        /// Sets the pulse repetition rate for trigger setting Auto or Ext Gated. 
        /// 
        /// Valid Values:
        /// 10 Hz to 60000 Hz
        /// 
        /// Default Value: 48 Hz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDMEMRate(int Rate)
        {
            int pInvokeResult = PInvoke.SetDMEMRate(this._handle, Rate);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function reeturns the pulse repetition rate for trigger setting Auto or Ext Gated. 
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:RATE?
        /// 
        /// </summary>
        /// <param name="Rate">
        /// Displays the pulse repetition rate for trigger setting Auto or Ext Gated. 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDMEMRate(out int Rate)
        {
            int pInvokeResult = PInvoke.GetDMEMRate(this._handle, out Rate);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates an echo pulse pair. The echo pulses have the same shape and timing as the original pulses.The delay and amplitude of the echo pulses can be set. The selection is possible for pulse squitter off (SOURce:DME:SQUitter OFF).
        /// 
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available for Reply mode on and Echo Pulse off only.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:ECHO ON | OFF
        /// </summary>
        /// <param name="Echo_Pulse">
        /// Activates an echo pulse pair.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDMEMEchoPulse(bool Echo_Pulse)
        {
            int pInvokeResult = PInvoke.SetDMEMEchoPulse(this._handle, System.Convert.ToUInt16(Echo_Pulse));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns an echo pulse pair. The echo pulses have the same shape and timing as the original pulses.The delay and amplitude of the echo pulses can be set. The selection is possible for pulse squitter off (SOURce:DME:SQUitter OFF).
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:ECHO?
        /// </summary>
        /// <param name="Echo_Pulse">
        /// Displays an echo pulse pair.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDMEMEchoPulse(out bool Echo_Pulse)
        {
            ushort Echo_PulseAsUShort;
            int pInvokeResult = PInvoke.GetDMEMEchoPulse(this._handle, out Echo_PulseAsUShort);
            Echo_Pulse = System.Convert.ToBoolean(Echo_PulseAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the attenuation of the echo pulses compared to the original pulses. A positive attenuation leads to echo pulses with reduced amplitude compared to the original pulses, and a negative attenuation leads to echo pulses with increased amplitude compared to the original pulses. 
        /// 
        /// Examples:
        /// (1) DME:ECHO ON - activates the simulation of an echo pulse pair.
        ///     DME:ECHO:ATT 4 dB - 'an echo is simulated with an amplitude that is reduced by 4 dB compared to the original pulse pair.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:ECHO:ATTenuation
        /// </summary>
        /// <param name="Echo_Attenuation">
        /// Sets the attenuation of the echo pulses compared to the original pulses. 
        /// 
        /// Valid Values:
        /// 0 dB to 20dB
        /// 
        /// Default Value: 0 dB
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDMEMEchoAttenuation(double Echo_Attenuation)
        {
            int pInvokeResult = PInvoke.SetDMEMEchoAttenuation(this._handle, Echo_Attenuation);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the attenuation of the echo pulses compared to the original pulses. A positive attenuation leads to echo pulses with reduced amplitude compared to the original pulses, and a negative attenuation leads to echo pulses with increased amplitude compared to the original pulses. 
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:ECHO:ATTenuation?
        /// </summary>
        /// <param name="Echo_Attenuation">
        /// Sets the attenuation of the echo pulses compared to the original pulses. 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDMEMEchoAttenuation(out double Echo_Attenuation)
        {
            int pInvokeResult = PInvoke.GetDMEMEchoAttenuation(this._handle, out Echo_Attenuation);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the delay from the first original pulse to the first echo pulse. 
        /// 
        /// Examples:
        ///  DME:ECHO ON
        ///  DME:ECHO:ATT 4 dB
        ///  DME:ECHO:DEL 600 us
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:ECHO:DELay
        /// </summary>
        /// <param name="Echo_Delay">
        /// Sets the attenuation of the echo pulses compared to the original pulses. 
        /// 
        /// Valid Values:
        /// 10 us to 1000 us
        /// 
        /// Default Value: 400.0e-6 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDMEMEchoDelay(double Echo_Delay)
        {
            int pInvokeResult = PInvoke.SetDMEMEchoDelay(this._handle, Echo_Delay);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the delay from the first original pulse to the first echo pulse. 
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:ECHO:DELay? 
        /// </summary>
        /// <param name="Echo_Delay">
        /// Displays the attenuation of the echo pulses compared to the original pulses.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDMEMEchoDelay(out double Echo_Delay)
        {
            int pInvokeResult = PInvoke.GetDMEMEchoDelay(this._handle, out Echo_Delay);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the trigger mode for DME modulation signals. For Reply mode only external trigger is possible 
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:TRIGger AUTO | EXTernal | EGATe | PSENsor 
        /// </summary>
        /// <param name="Trigger_Mode">
        /// Selects the trigger mode for DME modulation.
        /// 
        /// Valid Values:
        /// RSSMA_DME_TRIGGER_MODE_AUTO      (0) - Auto
        /// RSSMA_DME_TRIGGER_MODE_EXTERNAL  (1) - Ext Single
        /// RSSMA_DME_TRIGGER_MODE_EGATE     (2) - Ext Gated
        /// RSSMA_DME_TRIGGER_MODE_PSEN      (3) - Power Sensor
        /// 
        /// Default Value: RSSMA_DME_TRIGGER_MODE_AUTO  (0)
        /// 
        /// Notes:
        /// (1) AUTO - The DME modulation signals are generated continuously. This mode is only available for the interrogation signal.
        /// 
        /// (2) EXTernal - The DME modulation signals are triggered by an external trigger event. The trigger signal is supplied via the PULSE EXT connector.
        /// 
        /// (3) EGATe - The DME modulation signals are gated by an external gate signal. The signal is supplied via the PULSE EXT connector.  This mode is only available for the interrogation signal.
        /// 
        /// (4) PSensor - The DME modulation signals are triggered by an external power sensor. This mode is only available for the interrogation signal.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDMEMTriggerMode(int Trigger_Mode)
        {
            int pInvokeResult = PInvoke.SetDMEMTriggerMode(this._handle, Trigger_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the trigger mode for DME modulation signals. For Reply mode only external trigger is possible 
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:TRIGger:MODE?
        /// </summary>
        /// <param name="Trigger_Mode">
        /// Selects the trigger mode for DME modulation.
        /// 
        /// Valid Values:
        /// RSSMA_DME_TRIGGER_MODE_AUTO      (0) - Auto
        /// RSSMA_DME_TRIGGER_MODE_EXTERNAL  (1) - Ext Single
        /// RSSMA_DME_TRIGGER_MODE_EGATE     (2) - Ext Gated
        /// RSSMA_DME_TRIGGER_MODE_PSEN      (3) - Power Sensor
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDMEMTriggerMode(out int Trigger_Mode)
        {
            int pInvokeResult = PInvoke.GetDMEMTriggerMode(this._handle, out Trigger_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the delay between the external trigger and the first DME output pulse (50% voltage point of first pulse). This command is effective for external trigger only.
        /// 
        /// For DME Reply mode this simulates the defined delay of the DME transponder and twice the run time of the signal (from interrogator to transponder and back). The delay is a measure of the range distance, thus, the two values are interdependent according to:
        /// 
        /// Delay = X/Y mode delay + range distance * 12.359 nm/?s
        /// 
        /// (X mode delay = 50 us, Y mode delay is 56 us)
        /// 
        /// Changing one value automatically changes the other value. 
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:TRIGger:DELay
        ///  
        /// </summary>
        /// <param name="Trigger_Delay">
        /// Sets the delay between the external trigger and the first DME output pulse (50% voltage point of first pulse).
        /// 
        /// Valid Values:
        /// 4.0e-6s to 50.0e-6
        /// 
        /// Default Value: 50.0e-6 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDMEMTriggerDelay(double Trigger_Delay)
        {
            int pInvokeResult = PInvoke.SetDMEMTriggerDelay(this._handle, Trigger_Delay);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the delay between the external trigger and the first DME output pulse (50% voltage point of first pulse). This command is effective for external trigger only.
        /// 
        /// For DME Reply mode this simulates the defined delay of the DME transponder and twice the run time of the signal (from interrogator to transponder and back). The delay is a measure of the range distance, thus, the two values are interdependent according to:
        /// 
        /// Delay = X/Y mode delay + range distance * 12.359 nm/?s
        /// 
        /// (X mode delay = 50 us, Y mode delay is 56 us)
        /// 
        /// Changing one value automatically changes the other value. 
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:TRIGger:DELay?
        ///  
        /// </summary>
        /// <param name="Trigger_Delay">
        /// Displays the delay between the external trigger and the first DME output pulse (50% voltage point of first pulse).
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDMEMTriggerDelay(out double Trigger_Delay)
        {
            int pInvokeResult = PInvoke.GetDMEMTriggerDelay(this._handle, out Trigger_Delay);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function performs a normalization of the test setup. The delay due to the test setup is measured and subsequently considered in the trigger delay. This function is effective for external power sensor trigger only (rssma_SetDMEMTriggerMode). 
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:TRIGger:DELay:NORMalize?
        /// </summary>
        /// <param name="Trigger_Normalize_Delay">
        /// The delay due to the test setup is measured.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDMEMTriggerNormalizeDelay(out double Trigger_Normalize_Delay)
        {
            int pInvokeResult = PInvoke.GetDMEMTriggerNormalizeDelay(this._handle, out Trigger_Normalize_Delay);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the polarity of the active level of the external gate trigger at the PULSE EXT connector. This function is effective for external gate only (rssma_SetDMEMTriggerMode).
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:TRIGger:GPOLarity NORMal | INVerted 
        /// </summary>
        /// <param name="Gate_Polarity">
        /// Sets the polarity of the active level of the external gate trigger at the PULSE EXT connector.
        /// 
        /// Valid Values:
        /// RSSMA_DME_GATE_POLARITY_NORM (0) - Normal
        /// RSSMA_DME_GATE_POLARITY_INV  (1) - Inverted
        /// 
        /// Default Value: RSSMA_DME_GATE_POLARITY_NORM  (0)
        /// 
        /// Notes:
        /// (1) NORMal - The DME modulation signal is generated while the gate signal is high.
        /// 
        /// (2) INVerted - The DME modulation signal is generated while the gate signal is low.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDMEMGatePolarity(int Gate_Polarity)
        {
            int pInvokeResult = PInvoke.SetDMEMGatePolarity(this._handle, Gate_Polarity);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the polarity of the active level of the external gate trigger at the PULSE EXT connector. This function is effective for external gate only (rssma_SetDMEMTriggerMode).
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:TRIGger:GPOLarity?
        /// </summary>
        /// <param name="Gate_Polarity">
        /// Returns the polarity of the active level of the external gate trigger at the PULSE EXT connector.
        /// 
        /// Valid Values:
        /// RSSMA_DME_GATE_POLARITY_NORM (0) - Normal
        /// RSSMA_DME_GATE_POLARITY_INV  (1) - Inverted
        /// 
        /// Notes:
        /// (1) NORMal - The DME modulation signal is generated while the gate signal is high.
        /// 
        /// (2) INVerted - The DME modulation signal is generated while the gate signal is low.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDMEMGatePolarity(out int Gate_Polarity)
        {
            int pInvokeResult = PInvoke.GetDMEMGatePolarity(this._handle, out Gate_Polarity);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the input impedance for the external trigger and gate signal input PULSE EXT (10 kOhm or 50 Ohm).This command is only available for external or gate trigger mode.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:TRIGger:IMPedance
        /// </summary>
        /// <param name="External_Input_Impedance">
        /// Selects the input impedance for the external trigger and gate signal input PULSE EXT (10 kOhm or 50 Ohm).
        /// 
        /// Valid Values:
        /// RSSMA_INPUT_IMPEDANCE_G50   (0) - 50 Ohm
        /// RSSMA_INPUT_IMPEDANCE_G10K  (1) - 10 kOhm
        /// 
        /// Default Value: RSSMA_INPUT_IMPEDANCE_G50 (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssmb_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDMEMExternalInputImpedance(int External_Input_Impedance)
        {
            int pInvokeResult = PInvoke.SetDMEMExternalInputImpedance(this._handle, External_Input_Impedance);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the input impedance for the external trigger and gate signal input PULSE EXT (10 kOhm or 50 Ohm).This command is only available for external or gate trigger mode.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:TRIGger:IMPedance?
        /// </summary>
        /// <param name="External_Input_Impedance">
        /// Displays the input impedance for the external trigger and gate signal input PULSE EXT (10 kOhm or 50 Ohm).
        /// 
        /// Valid Values:
        /// RSSMA_INPUT_IMPEDANCE_G50   (0) - 50 Ohm
        /// RSSMA_INPUT_IMPEDANCE_G10K  (1) - 10 kOhm
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssmb_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDMEMExternalInputImpedance(out int External_Input_Impedance)
        {
            int pInvokeResult = PInvoke.GetDMEMExternalInputImpedance(this._handle, out External_Input_Impedance);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the polarity of the active slope of an applied trigger at the PULSE EXT connector. This command is effective for external trigger only.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:TRIGger:SLOPe
        /// </summary>
        /// <param name="Ext_Trigger_Input_Slope">
        /// Sets the polarity of the active slope of an applied trigger at the PULSE EXT connector.
        /// 
        /// Valid Values:
        /// RSSMA_INPUT_TRIGGER_SLOPE_POSITIVE (0) - Positive
        /// RSSMA_INPUT_TRIGGER_SLOPE_NEGATIVE (1) - Negative
        /// 
        /// Default Value: RSSMA_INPUT_TRIGGER_SLOPE_POSITIVE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssmb_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDMEMExtTriggerInputSlope(int Ext_Trigger_Input_Slope)
        {
            int pInvokeResult = PInvoke.SetDMEMExtTriggerInputSlope(this._handle, Ext_Trigger_Input_Slope);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the polarity of the active slope of an applied trigger at the PULSE EXT connector. This command is effective for external trigger only.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:TRIGger:SLOPe?
        /// </summary>
        /// <param name="Ext_Trigger_Input_Slope">
        /// Displays the polarity of the active slope of an applied trigger at the PULSE EXT connector.
        /// 
        /// Valid Values:
        /// RSSMA_INPUT_TRIGGER_SLOPE_POSITIVE (0) - Positive
        /// RSSMA_INPUT_TRIGGER_SLOPE_NEGATIVE (1) - Negative
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssmb_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDMEMExtTriggerInputSlope(out int Ext_Trigger_Input_Slope)
        {
            int pInvokeResult = PInvoke.GetDMEMExtTriggerInputSlope(this._handle, out Ext_Trigger_Input_Slope);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the simulated distance between interrogator and transponder for reply mode. The distance is given in nautic miles (nm). 1 nm is 1852.01 meters and corresponds to a run time of 12.359 us.  This function is available for reply mode only.
        /// 
        /// The range distance and the external  trigger delay are interdependent according to:
        /// 
        /// range distance = (trigger delay ? X/Y mode delay)/12.359 ?s/nm
        /// 
        /// (X mode delay = 50 us, Y mode delay is 56 us)
        /// 
        /// Changing one value automatically changes the other value.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:RDIStance
        ///  
        /// </summary>
        /// <param name="Range_Distance">
        /// Sets the simulated distance between interrogator and transponder for reply mode. The distance is given in nautic miles (nm). 1 nm is 1852.01 meters and corresponds to a run time of 12.359 us.
        /// 
        /// Valid Values:
        /// 
        /// 
        /// Default Value: 0 nm
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDMEMRangeDistance(int Range_Distance)
        {
            int pInvokeResult = PInvoke.SetDMEMRangeDistance(this._handle, Range_Distance);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the simulated distance between interrogator and transponder for reply mode. The distance is given in nautic miles (nm). 1 nm is 1852.01 meters and corresponds to a run time of 12.359 us.  This function is available for reply mode only.
        /// 
        /// The range distance and the external  trigger delay are interdependent according to:
        /// 
        /// range distance = (trigger delay ? X/Y mode delay)/12.359 ?s/nm
        /// 
        /// (X mode delay = 50 us, Y mode delay is 56 us)
        /// 
        /// Changing one value automatically changes the other value.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:RDIStance?
        /// </summary>
        /// <param name="Range_Distance">
        /// Displays the simulated distance between interrogator and transponder for reply mode. The distance is given in nautic miles (nm). 1 nm is 1852.01 meters and corresponds to a run time of 12.359 us.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDMEMRangeDistance(out int Range_Distance)
        {
            int pInvokeResult = PInvoke.GetDMEMRangeDistance(this._handle, out Range_Distance);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates the generation of a DME signal with higher spectral purity but less dynamic compared to the default mode. The ON/OFF ratio of the pulses is reduced from typ. &gt;100 dB to typ 35 dB.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:LOWemission
        /// </summary>
        /// <param name="Low_Emission">
        /// Activates the generation of a DME signal with higher spectral purity but less dynamic compared to the default mode. 
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDMEMLowSpectralEmission(bool Low_Emission)
        {
            int pInvokeResult = PInvoke.SetDMEMLowSpectralEmission(this._handle, System.Convert.ToUInt16(Low_Emission));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the generation of a DME signal with higher spectral purity but less dynamic compared to the default mode. The ON/OFF ratio of the pulses is reduced from typ. &gt;100 dB to typ 35 dB.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:LOWemission?
        /// </summary>
        /// <param name="Low_Emission">
        /// Displays the generation of a DME signal with higher spectral purity but less dynamic compared to the default mode. 
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDMEMLowSpectralEmission(out bool Low_Emission)
        {
            ushort Low_EmissionAsUShort;
            int pInvokeResult = PInvoke.GetDMEMLowSpectralEmission(this._handle, out Low_EmissionAsUShort);
            Low_Emission = System.Convert.ToBoolean(Low_EmissionAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the channel that is simulated.
        /// 
        /// Standard compliant X and Y channels differ in the spacing between the two pulses of the pulse pair and the delay of the groundstation.
        /// ICAO indicates the ICAO channel parameter for selecting the ICAO channel.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:CSUFfix 
        /// </summary>
        /// <param name="Channel_Suffix">
        /// Selects the channel that is simulated.
        /// 
        /// Valid Values:
        /// RSSMA_SOURCE_DMEM_CHANNEL_SUFFIC_X    (0) - X
        /// RSSMA_SOURCE_DMEM_CHANNEL_SUFFIC_Y    (1) - Y
        /// RSSMA_SOURCE_DMEM_CHANNEL_SUFFIC_ICAO (2) - ICAO
        /// 
        /// Default Value:
        /// RSSMA_SOURCE_DMEM_CHANNEL_SUFFIC_X (0) - X
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssmb_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDMEMChannelSuffix(int Channel_Suffix)
        {
            int pInvokeResult = PInvoke.SetDMEMChannelSuffix(this._handle, Channel_Suffix);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the channel that is simulated.
        /// 
        /// Standard compliant X and Y channels differ in the spacing between the two pulses of the pulse pair and the delay of the groundstation. 
        /// ICAO indicates the ICAO channel parameter for selecting the ICAO channel.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:CSUFfix?
        /// </summary>
        /// <param name="Channel_Suffix">
        /// Displays the channel that is simulated.
        /// 
        /// Valid Values:
        /// RSSMA_SOURCE_DMEM_CHANNEL_SUFFIC_X    (0) - X
        /// RSSMA_SOURCE_DMEM_CHANNEL_SUFFIC_Y    (1) - Y
        /// RSSMA_SOURCE_DMEM_CHANNEL_SUFFIC_ICAO (2) - ICAO
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssmb_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDMEMChannelSuffix(out int Channel_Suffix)
        {
            int pInvokeResult = PInvoke.GetDMEMChannelSuffix(this._handle, out Channel_Suffix);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the relation between reply pulse pairs and received trigger signals, e.g. with a set efficiency of 50% only every second trigger event leads to the generation of a reply pulse pair.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:EFFiciency
        ///  
        /// </summary>
        /// <param name="Reply_Efficiency">
        /// Sets the relation between reply pulse pairs and received trigger signals, e.g. with a set efficiency of 50% only every second trigger event leads to the generation of a reply pulse pair.
        /// 
        /// Valid Values:
        /// 0 to 100 PCT
        /// 
        /// Default Value: 75 PCT
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDMEMReplyEfficiency(int Reply_Efficiency)
        {
            int pInvokeResult = PInvoke.SetDMEMReplyEfficiency(this._handle, Reply_Efficiency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the relation between reply pulse pairs and received trigger signals, e.g. with a set efficiency of 50% only every second trigger event leads to the generation of a reply pulse pair.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:EFFiciency?
        /// </summary>
        /// <param name="Reply_Efficiency">
        /// Displays the relation between reply pulse pairs and received trigger signals, e.g. with a set efficiency of 50% only every second trigger event leads to the generation of a reply pulse pair.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDMEMReplyEfficiency(out int Reply_Efficiency)
        {
            int pInvokeResult = PInvoke.GetDMEMReplyEfficiency(this._handle, out Reply_Efficiency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activate/deactivate a single test pulse.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:SINGle ON | OFF
        /// </summary>
        /// <param name="Single_Pulse">
        /// Activate/deactivate a single test pulse.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDMEMSinglePulse(bool Single_Pulse)
        {
            int pInvokeResult = PInvoke.SetDMEMSinglePulse(this._handle, System.Convert.ToUInt16(Single_Pulse));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns a state of the single test pulse.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:SINGle?
        /// </summary>
        /// <param name="Single_Pulse">
        /// Displays a single test pulse state.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDMEMSinglePulse(out bool Single_Pulse)
        {
            ushort Single_PulseAsUShort;
            int pInvokeResult = PInvoke.GetDMEMSinglePulse(this._handle, out Single_PulseAsUShort);
            Single_Pulse = System.Convert.ToBoolean(Single_PulseAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the ICAO channel number i.e., the DME transmitting frequency. The RF- frequency is set to the value selected here
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [:SOURce]:DME:ICAO:CHANnel X1|Y1|X2|Y2|X3|Y3|X4|Y4|X5|Y5|X6|Y6|X7|Y7|X8|Y8|X9|Y9|X10|Y10|X11|Y11|X12|Y12|X13|Y13|X14|Y14|X15|Y15|X16|Y16|X17|Y17|X18|Y18|X19|Y19|X20|Y20|X21|Y21|X22|Y22|X23|Y23|X24|Y24|X25|Y25|X26|Y26|X27|Y27|X28|Y28|X29|Y29|X30|Y30|X31|Y31|X32|Y32|X33|Y33|X34|Y34|X35|Y35|X36|Y36|X37|Y37|X38|Y38|X39|Y39|X40|Y40|X41|Y41|X42|Y42|X43|Y43|X44|Y44|X45|Y45|X46|Y46|X47|Y47|X48|Y48|X49|Y49|X50|Y50|X51|Y51|X52|Y52|X53|Y53|X54|Y54|X55|Y55|X56|Y56|X57|Y57|X58|Y58|X59|Y59|X60|Y60|X61|Y61|X62|Y62|X63|Y63|X64|Y64|X65|Y65|X66|Y66|X67|Y67|X68|Y68|X69|Y69|X70|Y70|X71|Y71|X72|Y72|X73|Y73|X74|Y74|X75|Y75|X76|Y76|X77|Y77|X78|Y78|X79|Y79|X80|Y80|X81|Y81|X82|Y82|X83|Y83|X84|Y84|X85|Y85|X86|Y86|X87|Y87|X88|Y88|X89|Y89|X90|Y90|X91|Y91|X92|Y92|X93|Y93|X94|Y94|X95|Y95|X96|Y96|X97|Y97|X98|Y98|X99|Y99|X100|Y100|X101|Y101|X102|Y102|X103|Y103|X104|Y104|X105|Y105|X106|Y106|X107|Y107|X108|Y108|X109|Y109|X110|Y110|X111|Y111|X112|Y112|X113|Y113|X114|Y114|X115|Y115|X116|Y116|X117|Y117|X118|Y118|X119|Y119|X120|Y120|X121|Y121|X122|Y122|X123|Y123|X124|Y124|X125|Y125|X126|Y126
        /// </summary>
        /// <param name="ICAO_Channel">
        /// Selects the ICAO channel X or Y
        /// 
        /// Valid Values:
        /// RSSMA_SOURCE_ICAO_CHANNEL_X (0) - X
        /// RSSMA_SOURCE_ICAO_CHANNEL_Y (1) - Y
        /// 
        /// 
        /// Default Value: RSSMA_SOURCE_ICAO_CHANNEL_X (0) - X
        /// 
        /// 
        /// </param>
        /// <param name="ICAO_Number">
        /// This control selects the ICAO number. 
        /// 
        /// Valid Values:
        /// 1 to 126
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// (1) Depending on selected ICAO channel, the ICAO channel number will be selected. E.g. ICAO Channel is X, ICAO Number is 2, ICAO Channel Number is X2.
        /// 
        /// (2) See documentatin for the VOR Freq. = VOR interrogation frequency (MHz), DME Interrog. Freq. = DME interrogation frequency (MHz) and DME Reply Freq. = DME reply frequency (MHz) for selected ICAO Channel Number
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssmb_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDMEMICAOChannel(int ICAO_Channel, int ICAO_Number)
        {
            int pInvokeResult = PInvoke.SetDMEMICAOChannel(this._handle, ICAO_Channel, ICAO_Number);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the ICAO channel number i.e., the DME transmitting frequency. The RF- frequency is set to the value selected here
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [:SOURce]:DME:ICAO:CHANnel?
        /// </summary>
        /// <param name="ICAO_Channel">
        /// Returns the ICAO channel X or Y
        /// 
        /// Returned Values:
        /// RSSMA_SOURCE_ICAO_CHANNEL_X (0) - X
        /// RSSMA_SOURCE_ICAO_CHANNEL_Y (1) - Y
        /// 
        /// 
        /// 
        /// </param>
        /// <param name="ICAO_Number">
        /// This control returns the ICAO number. 
        /// 
        /// Returned Values:
        /// 1 to 126
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssmb_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDMEMICAOChannel(out int ICAO_Channel, out int ICAO_Number)
        {
            int pInvokeResult = PInvoke.GetDMEMICAOChannel(this._handle, out ICAO_Channel, out ICAO_Number);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activate/deactivate the two-tone signal
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [:SOURce]:DME:TACan:STATe ON | OFF
        /// </summary>
        /// <param name="State">
        /// Activate/deactivate the two-tone signal.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDMEMCompositeAMState(bool State)
        {
            int pInvokeResult = PInvoke.SetDMEMCompositeAMState(this._handle, System.Convert.ToUInt16(State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Returns the two-tone signal state.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [:SOURce]:DME:TACan:STATe?
        /// </summary>
        /// <param name="State">
        /// Returns the two-tone signal state.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDMEMCompositeAMState(out bool State)
        {
            ushort StateAsUShort;
            int pInvokeResult = PInvoke.GetDMEMCompositeAMState(this._handle, out StateAsUShort);
            State = System.Convert.ToBoolean(StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the modulation depth in per cent.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [:SOURce]:DME:TACan:DEPTh
        /// [:SOURce]:DME:TACan:INTernal&lt;ch&gt;:DEPTh
        /// </summary>
        /// <param name="Signal_Component">
        /// Selects the signal component the modulation depth should be set for.
        /// 
        /// Valid Values:
        /// RSSMA_SOURCE_DMEM_AM_SIGNAL_BOTH   (0) - Depth (Both component)
        /// RSSMA_SOURCE_DMEM_AM_SIGNAL_CHANN1 (1) - Depth 1 (First tone)
        /// RSSMA_SOURCE_DMEM_AM_SIGNAL_CHANN2 (2) - Depth 2 (Second tone)
        /// 
        /// Default Value:
        /// RSSMA_SOURCE_DMEM_AM_SIGNAL_BOTH   (0)
        /// 
        /// 
        /// Note(s):
        /// 
        /// (1) Depth:  Sets the modulation depth in per cent. This value is valid for both signal components of the two-tone signal and the sum modulation depth is determined by doubling the set modulation depth. This results in overmodulation if the maximal value for modulation depth is exceeded (see
        /// data sheet).
        /// 
        /// (2) Depth 1/Depth 2: Determines the modulation depth in per cent for one component of the two-tone signal. The sum of the two components must not exceed the overall modulation depth.
        /// 
        /// </param>
        /// <param name="Modulation_Depth">
        /// This control sets the modulation depth in percent.
        /// 
        /// Valid Values:
        /// 0.0 to 100.0 PCT
        /// 
        /// Default Value: 21.0 PCT
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssmb_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDMEMCompositeAMModulationDepth(int Signal_Component, double Modulation_Depth)
        {
            int pInvokeResult = PInvoke.SetDMEMCompositeAMModulationDepth(this._handle, Signal_Component, Modulation_Depth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the modulation depth in per cent.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [:SOURce]:DME:TACan:DEPTh?
        /// [:SOURce]:DME:TACan:INTernal&lt;ch&gt;:DEPTh?
        /// </summary>
        /// <param name="Signal_Component">
        /// Selects the signal component the modulation depth should be set for.
        /// 
        /// Valid Values:
        /// RSSMA_SOURCE_DMEM_AM_SIGNAL_BOTH   (0) - Depth (Both component)
        /// RSSMA_SOURCE_DMEM_AM_SIGNAL_CHANN1 (1) - Depth 1 (First tone)
        /// RSSMA_SOURCE_DMEM_AM_SIGNAL_CHANN2 (2) - Depth 2 (Second tone)
        /// 
        /// Default Value:
        /// RSSMA_SOURCE_DMEM_AM_SIGNAL_BOTH   (0)
        /// 
        /// 
        /// Note(s):
        /// 
        /// (1) Depth:  Sets the modulation depth in per cent. This value is valid for both signal components of the two-tone signal and the sum modulation depth is determined by doubling the set modulation depth. This results in overmodulation if the maximal value for modulation depth is exceeded (see
        /// data sheet).
        /// 
        /// (2) Depth 1/Depth 2: Determines the modulation depth in per cent for one component of the two-tone signal. The sum of the two components must not exceed the overall modulation depth.
        /// 
        /// </param>
        /// <param name="Modulation_Depth">
        /// Returns the modulation depth in percent.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssmb_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDMEMCompositeAMModulationDepth(int Signal_Component, out double Modulation_Depth)
        {
            int pInvokeResult = PInvoke.GetDMEMCompositeAMModulationDepth(this._handle, Signal_Component, out Modulation_Depth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the individual frequencies of the two-tone signal.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [:SOURce]:DME:TACan&lt;ch&gt;:FREQuency
        /// </summary>
        /// <param name="Signal_Component">
        /// Selects the signal component the frequency should be set for.
        /// 
        /// Valid Values:
        /// RSSMA_SOURCE_DMEM_AM_SIGNAL_CHANN1 (1) - Frequency 1 (First tone)
        /// RSSMA_SOURCE_DMEM_AM_SIGNAL_CHANN2 (2) - Frequency 2 (Second tone)
        /// 
        /// Default Value:
        /// RSSMA_SOURCE_DMEM_AM_SIGNAL_CHANN1 (1)
        /// </param>
        /// <param name="Frequency">
        /// This control sets the freuency of selected part of two-toned signal.
        /// 
        /// Valid Values:
        /// 0.10 to 10000.0 Hz
        /// 
        /// Default Value: 15.0 Hz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssmb_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDMEMCompositeAMFrequency(int Signal_Component, double Frequency)
        {
            int pInvokeResult = PInvoke.SetDMEMCompositeAMFrequency(this._handle, Signal_Component, Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Returns the individual frequencies of the two-tone signal.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [:SOURce]:DME:TACan&lt;ch&gt;:FREQuency?
        /// 
        /// </summary>
        /// <param name="Signal_Component">
        /// Selects the signal component the frequency should be set for.
        /// 
        /// Valid Values:
        /// RSSMA_SOURCE_DMEM_AM_SIGNAL_CHANN1 (1) - Frequency 1 (First tone)
        /// RSSMA_SOURCE_DMEM_AM_SIGNAL_CHANN2 (2) - Frequency 2 (Second tone)
        /// 
        /// Default Value:
        /// RSSMA_SOURCE_DMEM_AM_SIGNAL_CHANN1 (1)
        /// </param>
        /// <param name="Frequency">
        /// Returns the frequency of selected part of two-toned signal.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssmb_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDMEMCompositeAMFrequency(int Signal_Component, out double Frequency)
        {
            int pInvokeResult = PInvoke.GetDMEMCompositeAMFrequency(this._handle, Signal_Component, out Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the phase of the two-tone signal.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [:SOURce]:DME:TACan:PHASe
        /// 
        /// </summary>
        /// <param name="Phase">
        /// This control sets the phase of the two-tone signal.
        /// 
        /// Valid Values:
        /// -180.0 to 180.0 deg
        /// 
        /// Default Value: o.o deg
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssmb_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDMEMCompositeAMPhase(double Phase)
        {
            int pInvokeResult = PInvoke.SetDMEMCompositeAMPhase(this._handle, Phase);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the phase of the two-tone signal.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [:SOURce]:DME:TACan:PHASe?
        /// 
        /// </summary>
        /// <param name="Phase">
        /// Returns the phase of the two-tone signal.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssmb_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDMEMCompositeAMPhase(out double Phase)
        {
            int pInvokeResult = PInvoke.GetDMEMCompositeAMPhase(this._handle, out Phase);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the measured reply efficiency in percent. The measurement is the ratio of the number of measured valid reply pulse pairs to transmitted pulse pairs in a measurement cycle.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:ANALysis:EFFiciency?
        /// </summary>
        /// <param name="Efficiency">
        /// Displays the measured reply efficiency in percent.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDMEMAnalysisReplyEfficiency(out double Efficiency)
        {
            int pInvokeResult = PInvoke.GetDMEMAnalysisReplyEfficiency(this._handle, out Efficiency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activate/deactivate the measurement of the average reply delay of all valid pulse pairs in a measurement cycle. 
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:ANALysis:EFFiciency:STATe  ON | OFF
        /// </summary>
        /// <param name="Efficiency_State">
        /// Activate/deactivate the measurement of the average reply delay of all valid pulse pairs in a measurement cycle. 
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDMEMReplyEfficiencyState(bool Efficiency_State)
        {
            int pInvokeResult = PInvoke.SetDMEMReplyEfficiencyState(this._handle, System.Convert.ToUInt16(Efficiency_State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the measurement of the average reply delay of all valid pulse pairs in a measurement cycle state. 
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:ANALysis:EFFiciency:STATe?
        /// </summary>
        /// <param name="Efficiency_State">
        /// Displays the measurement of the average reply delay of all valid pulse pairs in a measurement cycle state.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDMEMReplyEfficiencyState(out bool Efficiency_State)
        {
            ushort Efficiency_StateAsUShort;
            int pInvokeResult = PInvoke.GetDMEMReplyEfficiencyState(this._handle, out Efficiency_StateAsUShort);
            Efficiency_State = System.Convert.ToBoolean(Efficiency_StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries if there are valid measurement values available in the set measurement window.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:ANALysis:EFFiciency:OK?
        /// </summary>
        /// <param name="Efficiency_Validity">
        /// Queries if there are valid measurement values available in the set measurement window.
        /// 
        /// Valid Values:
        /// (0) - Not Valid
        /// (1) - Valid
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDMEMReplyEfficiencyValidity(out int Efficiency_Validity)
        {
            int pInvokeResult = PInvoke.GetDMEMReplyEfficiencyValidity(this._handle, out Efficiency_Validity);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the number of pulse pairs which are sent from the R&amp;S SMA (= interrogator) to the ground station in one measurement cycle.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:ANALysis:GATE:COUNt 
        /// </summary>
        /// <param name="Measurement_Count">
        /// Sets the number of pulse pairs which are sent from the R&amp;S SMA (= interrogator) to the ground station in one measurement cycle.
        /// 
        /// Valid Values:
        /// 1 to 1000
        /// 
        /// Default Value: 100
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDMEMMeasurementCount(int Measurement_Count)
        {
            int pInvokeResult = PInvoke.SetDMEMMeasurementCount(this._handle, Measurement_Count);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the number of pulse pairs which are sent from the R&amp;S SMA (= interrogator) to the ground station in one measurement cycle.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:ANALysis:GATE:COUNt?
        /// </summary>
        /// <param name="Measurement_Count">
        /// Displays the number of pulse pairs which are sent from the R&amp;S SMA (= interrogator) to the ground station in one measurement cycle.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDMEMMeasurementCount(out int Measurement_Count)
        {
            int pInvokeResult = PInvoke.GetDMEMMeasurementCount(this._handle, out Measurement_Count);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the expected reply delay. 
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:ANALysis:GATE:EDELay 
        /// </summary>
        /// <param name="Reply_Delay">
        /// Sets the expected reply delay. 
        /// 
        /// Valid Values:
        /// 0 to 157.0e-6 s
        /// 
        /// Default Value: 50.0e-6 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDMEMExpectedReplyDelay(double Reply_Delay)
        {
            int pInvokeResult = PInvoke.SetDMEMExpectedReplyDelay(this._handle, Reply_Delay);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the expected reply delay. 
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:ANALysis:GATE:EDELay? 
        /// </summary>
        /// <param name="Reply_Delay">
        /// Displays the expected reply delay. 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDMEMExpectedReplyDelay(out double Reply_Delay)
        {
            int pInvokeResult = PInvoke.GetDMEMExpectedReplyDelay(this._handle, out Reply_Delay);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the gate length for the measurement window. 
        /// 
        /// The measurement gate settings determine the measurement window (expected reply delay +/- gate length/2). Only reply pulses within the measurement window are used to evaluate the delay time and reply efficiency. 
        /// 
        /// The delay measurement is averaged within the measurement cycle. The reply efficiency is calculated once for each measurement cycle.
        /// 
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:ANALysis:GATE[:LENGth]
        /// </summary>
        /// <param name="Gate_Length">
        /// Sets the gate length for the measurement window.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 1.0e-6 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDMEMGateLength(double Gate_Length)
        {
            int pInvokeResult = PInvoke.SetDMEMGateLength(this._handle, Gate_Length);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the gate length for the measurement window. 
        /// 
        /// The measurement gate settings determine the measurement window (expected reply delay +/- gate length/2). Only reply pulses within the measurement window are used to evaluate the delay time and reply efficiency. 
        /// 
        /// The delay measurement is averaged within the measurement cycle. The reply efficiency is calculated once for each measurement cycle.
        /// 
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:ANALysis:GATE[:LENGth]?
        /// </summary>
        /// <param name="Gate_Length">
        /// Displays the gate length for the measurement window.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDMEMGateLength(out double Gate_Length)
        {
            int pInvokeResult = PInvoke.GetDMEMGateLength(this._handle, out Gate_Length);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function performs a normalization of the test setup. The delay due to the test setup is measured and subsequently considered in the reply measurements.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:ANALysis:NORMalize? 
        /// </summary>
        /// <param name="Delay">
        /// Displays the delay.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDMEMNormalize(out double Delay)
        {
            int pInvokeResult = PInvoke.GetDMEMNormalize(this._handle, out Delay);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the measured average peak level of all valid pulse pairs in a measurement cycle.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:ANALysis:POWer?
        /// </summary>
        /// <param name="Peak_Level">
        /// Displays the measured average peak level of all valid pulse pairs in a measurement cycle.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDMEMPeakLevel(out double Peak_Level)
        {
            int pInvokeResult = PInvoke.GetDMEMPeakLevel(this._handle, out Peak_Level);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activate/deactivate the measurement of the average peak level of all valid pulse pairs in a measurement cycle.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:ANALysis:POWer:STATe   ON | OFF
        /// </summary>
        /// <param name="Peak_Level">
        /// Activate/deactivate the measurement of the average peak level of all valid pulse pairs in a measurement cycle.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDMEMPeakLevelState(bool Peak_Level)
        {
            int pInvokeResult = PInvoke.SetDMEMPeakLevelState(this._handle, System.Convert.ToUInt16(Peak_Level));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the measurement of the average peak level of all valid pulse pairs in a measurement cycle state.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:ANALysis:POWer:STATe?
        /// </summary>
        /// <param name="Peak_Level">
        /// Displays the state of measurement of the average peak level of all valid pulse pairs in a measurement cycle.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDMEMPeakLevelState(out bool Peak_Level)
        {
            ushort Peak_LevelAsUShort;
            int pInvokeResult = PInvoke.GetDMEMPeakLevelState(this._handle, out Peak_LevelAsUShort);
            Peak_Level = System.Convert.ToBoolean(Peak_LevelAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries if there are measurement values available in the set measurement window.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:ANALysis:POWer:OK?
        /// </summary>
        /// <param name="Peak_Level_Validity">
        /// Queries if there are measurement values available in the set measurement window.
        /// 
        /// Valid Values:
        /// (0) - Not Valid
        /// (1) - Valid
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDMEMPeakLevelValidity(out int Peak_Level_Validity)
        {
            int pInvokeResult = PInvoke.GetDMEMPeakLevelValidity(this._handle, out Peak_Level_Validity);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the measured mean pulse repetition rate of the DME ground station. For this measurement all received pulses of the DME ground station are considered.
        /// 
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:ANALysis:PRRate?
        /// </summary>
        /// <param name="Pulse_Repetition_Frequency">
        /// Displays the measured mean pulse repetition rate of the DME ground station. For this measurement all received pulses of the DME ground station are considered.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDMEMPulseRepetitionFrequency(out double Pulse_Repetition_Frequency)
        {
            int pInvokeResult = PInvoke.GetDMEMPulseRepetitionFrequency(this._handle, out Pulse_Repetition_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activate/deactivate the measurement of the mean pulse repetition rate of the DME ground station. For this measurement all received pulses of the DME ground station are considered.
        /// 
        /// This measurement and the measurement of the delay, efficiency and average peak power are performed alternately. 
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:ANALysis:PRRate:STATe   ON | OFF
        /// </summary>
        /// <param name="Pulse_Rep_Freq_Stat">
        /// Activate/deactivate the measurement of the mean pulse repetition rate of the DME ground station. For this measurement all received pulses of the DME ground station are considered.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDMEMPulseRepetitionFrequencyState(bool Pulse_Rep_Freq_Stat)
        {
            int pInvokeResult = PInvoke.SetDMEMPulseRepetitionFrequencyState(this._handle, System.Convert.ToUInt16(Pulse_Rep_Freq_Stat));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the measurement of the mean pulse repetition rate of the DME ground station state.. 
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:ANALysis:PRRate:STATe?
        /// </summary>
        /// <param name="Pulse_Rep_Freq_Stat">
        /// Displays the measurement of the mean pulse repetition rate of the DME ground station state.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDMEMPulseRepetitionFrequencyState(out bool Pulse_Rep_Freq_Stat)
        {
            ushort Pulse_Rep_Freq_StatAsUShort;
            int pInvokeResult = PInvoke.GetDMEMPulseRepetitionFrequencyState(this._handle, out Pulse_Rep_Freq_StatAsUShort);
            Pulse_Rep_Freq_Stat = System.Convert.ToBoolean(Pulse_Rep_Freq_StatAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries if there are valid measurement values available in the set measurement window.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:ANALysis:PRRate:OK?
        /// </summary>
        /// <param name="Pulse_Repetition_Freq_Validity">
        /// Queries if there are valid measurement values available in the set measurement window.
        /// 
        /// Valid Values:
        /// (0) - Not Valid
        /// (1) - Valid
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDMEMPulseRepetitionFrequencyValidity(out int Pulse_Repetition_Freq_Validity)
        {
            int pInvokeResult = PInvoke.GetDMEMPulseRepetitionFrequencyValidity(this._handle, out Pulse_Repetition_Freq_Validity);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activate/deactivate the DME analysis. The setting is only available after connecting the R&amp;S NRP-Z81 power sensor. 
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:ANALysis:STATe   ON | OFF
        /// </summary>
        /// <param name="Analysis_State">
        /// Activate/deactivate the DME analysis. The setting is only available after connecting the R&amp;S NRP-Z81 power sensor. 
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDMEMAnalysisState(bool Analysis_State)
        {
            int pInvokeResult = PInvoke.SetDMEMAnalysisState(this._handle, System.Convert.ToUInt16(Analysis_State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the DME analysis state. The setting is only available after connecting the R&amp;S NRP-Z81 power sensor. 
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:ANALysis:STATe?
        /// </summary>
        /// <param name="Analysis_State">
        /// Displays the DME analysis state.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDMEMAnalysisState(out bool Analysis_State)
        {
            ushort Analysis_StateAsUShort;
            int pInvokeResult = PInvoke.GetDMEMAnalysisState(this._handle, out Analysis_StateAsUShort);
            Analysis_State = System.Convert.ToBoolean(Analysis_StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the measured average reply delay of all valid pulse pairs in a measurement cycle. 
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:ANALysis:TIME?
        /// </summary>
        /// <param name="Reply_Delay">
        /// Displays the measured average reply delay of all valid pulse pairs in a measurement cycle. 
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDMEMReplyDelay(out double Reply_Delay)
        {
            int pInvokeResult = PInvoke.GetDMEMReplyDelay(this._handle, out Reply_Delay);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activate/deactivate the measurement of the average reply delay of all valid pulse pairs in a measurement cycle. 
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:ANALysis:TIME:STATe   ON | OFF
        /// </summary>
        /// <param name="Reply_Delay_State">
        /// Activate/deactivate the measurement of the average reply delay of all valid pulse pairs in a measurement cycle. 
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDMEMReplyDelayState(bool Reply_Delay_State)
        {
            int pInvokeResult = PInvoke.SetDMEMReplyDelayState(this._handle, System.Convert.ToUInt16(Reply_Delay_State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the measurement of the average reply delay of all valid pulse pairs in a measurement cycle state. 
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:ANALysis:TIME:STATe?
        /// </summary>
        /// <param name="Reply_Delay_State">
        /// Displays the measurement of the average reply delay of all valid pulse pairs in a measurement cycle state.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDMEMReplyDelayState(out bool Reply_Delay_State)
        {
            ushort Reply_Delay_StateAsUShort;
            int pInvokeResult = PInvoke.GetDMEMReplyDelayState(this._handle, out Reply_Delay_StateAsUShort);
            Reply_Delay_State = System.Convert.ToBoolean(Reply_Delay_StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries if there are valid measurement values available in the set measurement window. 
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:ANALysis:TIME:OK?
        /// </summary>
        /// <param name="Reply_Delay_Validity">
        /// Queries if there are valid measurement values available in the set measurement window.
        /// 
        /// Valid Values:
        /// (0) - Not Valid
        /// (1) - Valid
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDMEMReplyDelayValidity(out int Reply_Delay_Validity)
        {
            int pInvokeResult = PInvoke.GetDMEMReplyDelayValidity(this._handle, out Reply_Delay_Validity);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function determines the trigger level = 50% voltage point of first pulse of the external DME interrogation signal.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [:SOURce]:DME:ANALysis:TRIGger:SEARch?
        /// </summary>
        /// <param name="Trigger_Level">
        /// Displays the trigger level = 50% voltage point of first pulse of the external DME interrogation signal.
        /// This command determines the trigger point after connecting the R&amp;S NRP-Z81 sensor to the external interrogation signal source. The search function has to be executed with each change of the level of the external DME signal.
        /// 
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDMEMAnalysisTriggerLevel(out double Trigger_Level)
        {
            int pInvokeResult = PInvoke.GetDMEMAnalysisTriggerLevel(this._handle, out Trigger_Level);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the generation of ID.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:ID:STATe  ON | OFF
        /// [SOURce:]DME:ID:RATE 
        /// [SOURce:]DME:ID:CODE &lt;string&gt; 
        /// [SOURce:]DME:ID:DOTLength 
        /// [SOURce:]DME:ID:PERiod
        /// </summary>
        /// <param name="Id_State">
        /// Activate/deactivate the generation of the identification sequence (ID signal) of the ground station. The Id signal consists of a series of pulse pairs transmitted at a rate of 1350 Hz. 
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0) - Off
        /// 
        /// </param>
        /// <param name="Id_Frequency">
        /// Sets the pulse repetition rate of the ID sequence.
        /// 
        /// Valid Values:
        /// 100 Hz to 10 kHz
        /// 
        /// Default Value: 1350 Hz
        /// 
        /// Notes:
        /// (1) Resolution 0.1 Hz
        /// </param>
        /// <param name="Id_Code">
        /// The coding of the ID signal by the international short name of the airport (e.g. MUC for the Munic airport). (ID signal).
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <param name="Id_Dot_Length">
        /// Sets the length of a morse dot by means of seconds. The length of the dash (3xdot), space (=dot) and letter space (=3xdot) is also determined by this entry.
        /// 
        /// Valid Values:
        /// 50 to 200 ms
        /// 
        /// Default Value: 0.1 s
        /// 
        /// Notes:
        /// (1) Resolution 0.1ms
        /// </param>
        /// <param name="Id_Period">
        /// Sets the period of the ID sequence by means of seconds.
        /// 
        /// Valid Values:
        /// 0 to 120 s
        /// 
        /// Default Value: 40s
        /// 
        /// Notes:
        /// (1) Resolution 1s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int confDMEMId(bool Id_State, double Id_Frequency, string Id_Code, double Id_Dot_Length, int Id_Period)
        {
            int pInvokeResult = PInvoke.confDMEMId(this._handle, System.Convert.ToUInt16(Id_State), Id_Frequency, Id_Code, Id_Dot_Length, Id_Period);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the default settings for the ID signal. This function is available for reply mode only. This command triggers an event and therefore has no *RST value.
        /// 
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:ID:PRESet  
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int DMEMIdPreset()
        {
            int pInvokeResult = PInvoke.DMEMIdPreset(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activate/deactivate the generation of the identification sequence (ID signal) of the ground station. The Id signal consists of a series of pulse pairs transmitted at a rate of 1350 Hz. 
        /// 
        /// The transmission of the ground signal is interrupted every 40 seconds (ID period) and one ID sequence is transmitted instead. The "key down time" of the ground signal corresponds to the period of transmission for a dot or dash in the morse code ID sequence (e.g. 100ms for a dot). During the key down times reply pulses are not transmitted, however, they are transmitted between the key down times.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:ID:STATe  ON | OFF
        /// </summary>
        /// <param name="Id_State">
        /// Activate/deactivate the generation of the identification sequence (ID signal) of the ground station. The Id signal consists of a series of pulse pairs transmitted at a rate of 1350 Hz. 
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0) - Off
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDMEMIdState(bool Id_State)
        {
            int pInvokeResult = PInvoke.SetDMEMIdState(this._handle, System.Convert.ToUInt16(Id_State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns state of the generation of the identification sequence (ID signal) of the ground station. The Id signal consists of a series of pulse pairs transmitted at a rate of 1350 Hz. 
        /// 
        /// The transmission of the ground signal is interrupted every 40 seconds (ID period) and one ID sequence is transmitted instead. The "key down time" of the ground signal corresponds to the period of transmission for a dot or dash in the morse code ID sequence (e.g. 100ms for a dot). During the key down times reply pulses are not transmitted, however, they are transmitted between the key down times.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:ID:STATe?
        /// </summary>
        /// <param name="Id_State">
        /// Displays the state of the generation of the identification sequence (ID signal) of the ground station. The Id signal consists of a series of pulse pairs transmitted at a rate of 1350 Hz. 
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDMEMIdState(out bool Id_State)
        {
            ushort Id_StateAsUShort;
            int pInvokeResult = PInvoke.GetDMEMIdState(this._handle, out Id_StateAsUShort);
            Id_State = System.Convert.ToBoolean(Id_StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the coding of the ID signal by the international short name of the airport (e.g. MUC for the Munic airport). (ID signal). The ID tone is sent according to the selected code. This function is available for reply mode only.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:ID:CODE &lt;string&gt; 
        /// 
        /// </summary>
        /// <param name="Id_Code">
        /// The coding of the ID signal by the international short name of the airport (e.g. MUC for the Munic airport). (ID signal).
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDMEMIdCode(string Id_Code)
        {
            int pInvokeResult = PInvoke.SetDMEMIdCode(this._handle, Id_Code);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the coding of the ID signal by the international short name of the airport (e.g. MUC for the Munic airport). (ID signal). The ID tone is sent according to the selected code. This function is available for reply mode only.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:ID:CODE?
        /// </summary>
        /// <param name="Id_Code">
        /// Displays the coding of the ID signal by the international short name of the airport (e.g. MUC for the Munic airport). (ID signal).
        /// 
        /// Note(s):
        /// 
        /// (1) The array must contain at least 256 elements ViChar[256].
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDMEMIdCode(System.Text.StringBuilder Id_Code)
        {
            int pInvokeResult = PInvoke.GetDMEMIdCode(this._handle, Id_Code);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects if the set dot length determines the dash length (= three times the dot length) (setting STD) or if all length parameters can be set independently (setting USER. (ID signal).
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:ID:TSCHema STD | USER
        /// </summary>
        /// <param name="Id_Time_Schema">
        /// Selects if the set dot length determines the dash length (= three times the dot length) (setting STD) or if all length parameters can be set independently (setting USER. (ID signal).
        /// 
        /// Valid Range: 
        /// RSSMA_TIME_SCHEMA_STD  (0) - Standard
        /// RSSMA_TIME_SCHEMA_USER (1) - User
        /// 
        /// Default Value: RSSMA_TIME_SCHEMA_STD  (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDMEMIdTimeSchema(int Id_Time_Schema)
        {
            int pInvokeResult = PInvoke.SetDMEMIdTimeSchema(this._handle, Id_Time_Schema);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns whether the set dot length is determined by the dash length (= three times the dot length) (setting STD) or all length parameters is set independently (setting USER. (COM/ID signal).
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:ID:TSCHema?
        /// </summary>
        /// <param name="Id_Time_Schema">
        /// Returns whether the set dot length is determined by the dash length (= three times the dot length) (setting STD) or all length parameters is set independently (setting USER. (COM/ID signal).
        /// 
        /// Valid Range: 
        /// RSSMA_TIME_SCHEMA_STD  (0) - Standard
        /// RSSMA_TIME_SCHEMA_USER (1) - User
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDMEMIdTimeSchema(out int Id_Time_Schema)
        {
            int pInvokeResult = PInvoke.GetDMEMIdTimeSchema(this._handle, out Id_Time_Schema);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the length of a morse dash by means of seconds. This function is available for user time schema only (rssma_SetDMEMIdTimeSchema).
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:ID:DASH
        /// </summary>
        /// <param name="Id_Dash_Length">
        /// Enters the length of a morse dash by means of seconds.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.3 s
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDMEMIdDashLength(double Id_Dash_Length)
        {
            int pInvokeResult = PInvoke.SetDMEMIdDashLength(this._handle, Id_Dash_Length);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the length of a morse dash by means of seconds. This function is available for user time schema only (rssma_SetDMEMIdTimeSchema).
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:ID:DASH?
        /// </summary>
        /// <param name="Id_Dash_Length">
        /// Returns the length of a morse dash by means of seconds.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDMEMIdDashLength(out double Id_Dash_Length)
        {
            int pInvokeResult = PInvoke.GetDMEMIdDashLength(this._handle, out Id_Dash_Length);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the length of a morse dot by means of seconds. The length of the dash (3xdot), space (=dot) and letter space (=3xdot) is also determined by this entry. This function is available for reply mode only.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:ID:DOT
        /// </summary>
        /// <param name="Id_Dot_Length">
        /// Sets the length of a morse dot by means of seconds. The length of the dash (3xdot), space (=dot) and letter space (=3xdot) is also determined by this entry.
        /// 
        /// Valid Values:
        /// 0.05 to 0.1 s
        /// 
        /// Default Value: 0.1 s
        /// 
        /// Notes:
        /// (1) Resolution 0.1ms
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDMEMIdDotLength(double Id_Dot_Length)
        {
            int pInvokeResult = PInvoke.SetDMEMIdDotLength(this._handle, Id_Dot_Length);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the length of a morse dot by means of seconds. The length of the dash (3xdot), space (=dot) and letter space (=3xdot) is also determined by this entry. This function is available for reply mode only.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:ID:DOT?
        ///  
        /// </summary>
        /// <param name="Id_Dot_Length">
        /// Displays the length of a morse dot by means of seconds.
        /// 
        /// Notes:
        /// (1) Resolution 0.1ms
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDMEMIdDotLength(out double Id_Dot_Length)
        {
            int pInvokeResult = PInvoke.GetDMEMIdDotLength(this._handle, out Id_Dot_Length);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the length of a letter space by means of seconds. This function is available user time schema only (rssma_SetDMEMIdTimeSchema).
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:ID:LETTer
        /// </summary>
        /// <param name="Id_Letter_Space">
        /// Enters the length of a letter space by means of seconds. 
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.3 s
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDMEMIdLetterSpace(double Id_Letter_Space)
        {
            int pInvokeResult = PInvoke.SetDMEMIdLetterSpace(this._handle, Id_Letter_Space);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the length of a letter space by means of seconds. This function is available user time schema only (rssma_SetDMEMIdTimeSchema).
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:ID:LETTer?
        /// </summary>
        /// <param name="Id_Letter_Space">
        /// Returns the length of a letter space by means of seconds.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDMEMIdLetterSpace(out double Id_Letter_Space)
        {
            int pInvokeResult = PInvoke.GetDMEMIdLetterSpace(this._handle, out Id_Letter_Space);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the length of the symbol space by means of seconds. This function is available for user time schema only (rssma_SetDMEMIdTimeSchema).
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:ID:SYMBol
        /// </summary>
        /// <param name="Id_Symbol_Space">
        /// Enters the length of the symbol space by means of seconds.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.1 s
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDMEMIdSymbolSpace(double Id_Symbol_Space)
        {
            int pInvokeResult = PInvoke.SetDMEMIdSymbolSpace(this._handle, Id_Symbol_Space);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the length of the symbol space by means of seconds. This function is available for user time schema only (rssma_SetDMEMIdTimeSchema).
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:ID:SYMBol?
        /// </summary>
        /// <param name="Id_Symbol_Space">
        /// Returns the length of the symbol space by means of seconds.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDMEMIdSymbolSpace(out double Id_Symbol_Space)
        {
            int pInvokeResult = PInvoke.GetDMEMIdSymbolSpace(this._handle, out Id_Symbol_Space);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the period of the ID sequence by means of seconds. This function is available for reply mode only.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:ID:PERiod
        /// </summary>
        /// <param name="Id_Period">
        /// Sets the period of the ID sequence by means of seconds.
        /// 
        /// Valid Values:
        /// 0 to 120 s
        /// 
        /// Default Value: 40s
        /// 
        /// Notes:
        /// (1) Resolution 1s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDMEMIdPeriod(int Id_Period)
        {
            int pInvokeResult = PInvoke.SetDMEMIdPeriod(this._handle, Id_Period);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the period of the ID sequence by means of seconds. This function is available for reply mode only.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:ID:PERiod?
        /// </summary>
        /// <param name="Id_Period">
        /// Displays the period of the ID sequence by means of seconds.
        /// 
        /// Notes:
        /// (1) Resolution 1s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDMEMIdPeriod(out int Id_Period)
        {
            int pInvokeResult = PInvoke.GetDMEMIdPeriod(this._handle, out Id_Period);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the pulse repetition rate of the ID sequence. This function is available for reply mode only.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:ID:RATE 
        /// </summary>
        /// <param name="Id_Frequency">
        /// Sets the pulse repetition rate of the ID sequence.
        /// 
        /// Valid Values:
        /// 100 Hz to 10 kHz
        /// 
        /// Default Value: 1350 Hz
        /// 
        /// Notes:
        /// (1) Resolution 0.1 Hz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDMEMIdFrequency(double Id_Frequency)
        {
            int pInvokeResult = PInvoke.SetDMEMIdFrequency(this._handle, Id_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the pulse repetition rate of the ID sequence. This function is available for reply mode only.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// [SOURce:]DME:ID:RATE?
        /// </summary>
        /// <param name="Id_Frequency">
        /// Displays the pulse repetition rate of the ID sequence.
        /// 
        /// Notes:
        /// (1) Resolution 0.1 Hz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDMEMIdFrequency(out double Id_Frequency)
        {
            int pInvokeResult = PInvoke.GetDMEMIdFrequency(this._handle, out Id_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the VOR modulation.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]VOR:STATe ON | OFF
        /// [SOURce:]VOR:MODE NORM | VAR | SUBCarrier | FMSubcarrier
        /// [SOURce:]VOR[:BANGle] 0 to 360 DEG
        /// [SOURce:]VOR[:BANGle]:DIRection FROM | TO
        /// [SOURce:]VOR:VAR:FREQuency 20 to 60 Hz
        /// [SOURce:]VOR:VAR[:DEPTh] 0 to 100 PCT
        /// [SOURce:]VOR:SUBCarrier[:FREQuency] 5000 to 15000 Hz
        /// [SOURce:]VOR:SUBCarrier:DEPTh 0 to 100 PCT
        /// [SOURce:]VOR:REFerence[:DEViation] 0 to 960 Hz
        /// </summary>
        /// <param name="State">
        /// Activates/deactivates the VOR modulation.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <param name="Mode">
        /// Selects the operating mode for the VOR modulation signal.
        /// 
        /// Valid Values:
        /// RSSMA_VORM_MODE_NORM   (0) - Normal
        /// RSSMA_VORM_MODE_VAR    (1) - VAR
        /// RSSMA_VORM_MODE_SUBC   (2) - Subcarrier
        /// RSSMA_VORM_MODE_FMS    (3) - Subcarrier + FM
        /// 
        /// Default Value: RSSMA_VORM_MODE_NORM  (0)
        /// 
        /// Notes:
        /// 
        /// (1) Normal:
        /// VOR modulation is active. 
        /// 
        /// (2) VAR:
        /// Amplitude modulation of the output signal with the variable signal component (30Hz signal content) of the VOR signal. The modulation depth of the 30 Hz signal corresponds to the value set with command SOURce:VOR:VAR:DEPTh.
        /// 
        /// (3) Subcarrier:
        /// Amplitude modulation of the output signal with the unmodulated FM carrier (9960Hz) of the VOR signal. The modulation depth corresponds to the value set with command SOURce:VOR:SUBCarrier:DEPTh.
        /// 
        /// (4) Subcarrier + FM:
        /// Amplitude modulation of the output signal with the frequency-modulated FM carrier (9960Hz) of the VOR signal. The frequency deviation corresponds to the value set with command SOURce:VOR:REFerence:DEViation, the modulation depth corresponds to the value set with command SOURce:VOR:SUBCarrier:DEPTh.
        /// </param>
        /// <param name="Bearing_Angle">
        /// Sets the Bearing ANGle between the VAR signal and the reference signal.
        /// 
        /// Valid Range: 
        /// 0 to 360 DEG
        /// 
        /// Default Value: 0 DEG
        /// 
        /// </param>
        /// <param name="Direction">
        /// Selects the reference position of the phase information.
        /// 
        /// Valid Values:
        /// RSSMA_VORM_DIR_FROM   (0) - From
        /// RSSMA_VORM_DIR_TO     (1) - To
        /// 
        /// Default Value: RSSMA_VORM_DIR_FROM  (0)
        /// 
        /// Notes:
        /// 
        /// (1) From:
        /// The bearing angle is measured between the geographic north and the connection line from beacon to airplane. 
        /// 
        /// (2) To:
        /// The bearing angle is measured between the geographic north and the connection line from airplane to beacon.
        /// </param>
        /// <param name="VAR_REF_Frequency">
        /// Sets the frequency of the variable and the reference signal.
        /// 
        /// Valid Range: 
        /// 20 to 60 Hz
        /// 
        /// Default Value: 30 Hz
        /// 
        /// </param>
        /// <param name="VAR_Depth">
        /// Sets the AM modulation depth of the 30Hz variable signal.
        /// 
        /// Valid Range: 
        /// 0 to 100 PCT
        /// 
        /// Default Value: 30 PCT
        /// 
        /// </param>
        /// <param name="Subcarrier_Frequency">
        /// Sets the frequency of the FM carrier.
        /// 
        /// Valid Range: 
        /// 5000 to 15000 Hz (resolution 10 Hz)
        /// 
        /// Default Value: 9960 Hz
        /// 
        /// </param>
        /// <param name="Subcarrier_Depth">
        /// Sets the AM modulation depth of the FM carrier.
        /// 
        /// Valid Range: 
        /// 0 to 100 PCT
        /// 
        /// Default Value: 30 PCT
        /// 
        /// </param>
        /// <param name="REF_Deviation">
        /// Sets the frequency deviation of the reference signal on the FM carrier.
        /// 
        /// Valid Range: 
        /// 0 to 960 Hz
        /// 
        /// Default Value: 480 Hz
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureVORModulation(bool State, int Mode, double Bearing_Angle, int Direction, double VAR_REF_Frequency, double VAR_Depth, double Subcarrier_Frequency, double Subcarrier_Depth, int REF_Deviation)
        {
            int pInvokeResult = PInvoke.ConfigureVORModulation(this._handle, System.Convert.ToUInt16(State), Mode, Bearing_Angle, Direction, VAR_REF_Frequency, VAR_Depth, Subcarrier_Frequency, Subcarrier_Depth, REF_Deviation);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the additional communication/identification signal.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]VOR:COMid[:STATe] ON | OFF
        /// [SOURce:]VOR:COMid:CODE 'code'
        /// [SOURce:]VOR:COMid:FREQuency 0.1 to 20 000 Hz
        /// [SOURce:]VOR:COMid:DEPTh 0 to 100 PCT
        /// </summary>
        /// <param name="COM_ID_State">
        /// Switches on or off the additional communication/identification signal.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <param name="COM_ID_Code">
        /// Sets the coding of the COM/ID signal by the international short name of the airport
        /// 
        /// Valid Values:
        /// not checked
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <param name="COM_ID_Frequency">
        /// Sets the frequency of the communication/identification signal.
        /// 
        /// Valid Range: 
        /// 0.1 to 20 000 Hz
        /// 
        /// Default Value: 1020 Hz
        /// 
        /// </param>
        /// <param name="COM_ID_Depth">
        /// Sets the depth of the communication/identification signal.
        /// 
        /// Valid Range: 
        /// 0 to 100 PCT
        /// 
        /// Default Value: 10 PCT
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureVORMCOMID(bool COM_ID_State, string COM_ID_Code, double COM_ID_Frequency, double COM_ID_Depth)
        {
            int pInvokeResult = PInvoke.ConfigureVORMCOMID(this._handle, System.Convert.ToUInt16(COM_ID_State), COM_ID_Code, COM_ID_Frequency, COM_ID_Depth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates/deactivates the VOR modulation. Activation of VOR modulation deactivates AM, ILS, Marker Beacon and ADF modulation.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]VOR:STATe ON | OFF
        /// 
        /// </summary>
        /// <param name="State">
        /// Activates/deactivates the VOR modulation.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetVORMState(bool State)
        {
            int pInvokeResult = PInvoke.SetVORMState(this._handle, System.Convert.ToUInt16(State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the state of the VOR modulation.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]VOR:STATe?
        /// </summary>
        /// <param name="State">
        /// Returns the state of the VOR modulation.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetVORMState(out bool State)
        {
            ushort StateAsUShort;
            int pInvokeResult = PInvoke.GetVORMState(this._handle, out StateAsUShort);
            State = System.Convert.ToBoolean(StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the operating mode for the VOR modulation signal.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]VOR:MODE NORM | VAR | SUBCarrier | FMSubcarrier
        /// </summary>
        /// <param name="Mode">
        /// Selects the operating mode for the VOR modulation signal.
        /// 
        /// Valid Values:
        /// RSSMA_VORM_MODE_NORM   (0) - Normal
        /// RSSMA_VORM_MODE_VAR    (1) - VAR
        /// RSSMA_VORM_MODE_SUBC   (2) - Subcarrier
        /// RSSMA_VORM_MODE_FMS    (3) - Subcarrier + FM
        /// 
        /// Default Value: RSSMA_VORM_MODE_NORM  (0)
        /// 
        /// Notes:
        /// 
        /// (1) Normal:
        /// VOR modulation is active. 
        /// 
        /// (2) VAR:
        /// Amplitude modulation of the output signal with the variable signal component (30Hz signal content) of the VOR signal. The modulation depth of the 30 Hz signal corresponds to the value set with command SOURce:VOR:VAR:DEPTh.
        /// 
        /// (3) Subcarrier:
        /// Amplitude modulation of the output signal with the unmodulated FM carrier (9960Hz) of the VOR signal. The modulation depth corresponds to the value set with command SOURce:VOR:SUBCarrier:DEPTh.
        /// 
        /// (4) Subcarrier + FM:
        /// Amplitude modulation of the output signal with the frequency-modulated FM carrier (9960Hz) of the VOR signal. The frequency deviation corresponds to the value set with command SOURce:VOR:REFerence:DEViation, the modulation depth corresponds to the value set with command SOURce:VOR:SUBCarrier:DEPTh.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetVORMMode(int Mode)
        {
            int pInvokeResult = PInvoke.SetVORMMode(this._handle, Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the operating mode for the VOR modulation signal.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]VOR:MODE?
        /// </summary>
        /// <param name="Mode">
        /// Returns the operating mode for the VOR modulation signal.
        /// 
        /// Valid Values:
        /// RSSMA_VORM_MODE_NORM   (0) - Normal
        /// RSSMA_VORM_MODE_VAR    (1) - VAR
        /// RSSMA_VORM_MODE_SUBC   (2) - Subcarrier
        /// RSSMA_VORM_MODE_FMS    (3) - Subcarrier + FM
        /// 
        /// Notes:
        /// 
        /// (1) Normal:
        /// VOR modulation is active. 
        /// 
        /// (2) VAR:
        /// Amplitude modulation of the output signal with the variable signal component (30Hz signal content) of the VOR signal. The modulation depth of the 30 Hz signal corresponds to the value set with command SOURce:VOR:VAR:DEPTh.
        /// 
        /// (3) Subcarrier:
        /// Amplitude modulation of the output signal with the unmodulated FM carrier (9960Hz) of the VOR signal. The modulation depth corresponds to the value set with command SOURce:VOR:SUBCarrier:DEPTh.
        /// 
        /// (4) Subcarrier + FM:
        /// Amplitude modulation of the output signal with the frequency-modulated FM carrier (9960Hz) of the VOR signal. The frequency deviation corresponds to the value set with command SOURce:VOR:REFerence:DEViation, the modulation depth corresponds to the value set with command SOURce:VOR:SUBCarrier:DEPTh.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetVORMMode(out int Mode)
        {
            int pInvokeResult = PInvoke.GetVORMMode(this._handle, out Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the Bearing ANGle between the VAR signal and the reference signal. The orientation of the angle depends on the setting under SOURce:VOR:BANGle:DIRection.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]VOR[:BANGle] 0 to 360 DEG
        /// </summary>
        /// <param name="Bearing_Angle">
        /// Sets the Bearing ANGle between the VAR signal and the reference signal.
        /// 
        /// Valid Range: 
        /// 0 to 360 DEG
        /// 
        /// Default Value: 0 DEG
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetVORMBearingAngle(double Bearing_Angle)
        {
            int pInvokeResult = PInvoke.SetVORMBearingAngle(this._handle, Bearing_Angle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the Bearing ANGle between the VAR signal and the reference signal. The orientation of the angle depends on the setting under SOURce:VOR:BANGle:DIRection.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]VOR[:BANGle]?
        /// </summary>
        /// <param name="Bearing_Angle">
        /// Gets the Bearing ANGle between the VAR signal and the reference signal.
        /// 
        /// Valid Range: 
        /// 0 to 360 DEG
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetVORMBearingAngle(out double Bearing_Angle)
        {
            int pInvokeResult = PInvoke.GetVORMBearingAngle(this._handle, out Bearing_Angle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the reference position of the phase information.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]VOR[:BANGle]:DIRection FROM | TO
        /// </summary>
        /// <param name="Direction">
        /// Selects the reference position of the phase information.
        /// 
        /// Valid Values:
        /// RSSMA_VORM_DIR_FROM   (0) - From
        /// RSSMA_VORM_DIR_TO     (1) - To
        /// 
        /// Default Value: RSSMA_VORM_DIR_FROM  (0)
        /// 
        /// Notes:
        /// 
        /// (1) From:
        /// The bearing angle is measured between the geographic north and the connection line from beacon to airplane. 
        /// 
        /// (2) To:
        /// The bearing angle is measured between the geographic north and the connection line from airplane to beacon.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetVORMDirection(int Direction)
        {
            int pInvokeResult = PInvoke.SetVORMDirection(this._handle, Direction);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the reference position of the phase information.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]VOR[:BANGle]:DIRection?
        /// </summary>
        /// <param name="Direction">
        /// Returns the reference position of the phase information.
        /// 
        /// Valid Values:
        /// RSSMA_VORM_DIR_FROM   (0) - From
        /// RSSMA_VORM_DIR_TO     (1) - To
        /// 
        /// Notes:
        /// 
        /// (1) From:
        /// The bearing angle is measured between the geographic north and the connection line from beacon to airplane. 
        /// 
        /// (2) To:
        /// The bearing angle is measured between the geographic north and the connection line from airplane to beacon.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetVORMDirection(out int Direction)
        {
            int pInvokeResult = PInvoke.GetVORMDirection(this._handle, out Direction);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the frequency of the variable and the reference signal. As the two signals must have the same frequency, the setting is valid for both signals.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]VOR:VAR:FREQuency 20 to 60 Hz
        /// </summary>
        /// <param name="VAR_REF_Frequency">
        /// Sets the frequency of the variable and the reference signal.
        /// 
        /// Valid Range: 
        /// 20 to 60 Hz
        /// 
        /// Default Value: 30 Hz
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetVORMVARREFFrequency(double VAR_REF_Frequency)
        {
            int pInvokeResult = PInvoke.SetVORMVARREFFrequency(this._handle, VAR_REF_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the frequency of the variable and the reference signal. As the two signals must have the same frequency, the setting is valid for both signals.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]VOR:VAR:FREQuency?
        /// </summary>
        /// <param name="VAR_REF_Frequency">
        /// Gets the frequency of the variable and the reference signal.
        /// 
        /// Valid Range: 
        /// 20 to 60 Hz
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetVORMVARREFFrequency(out double VAR_REF_Frequency)
        {
            int pInvokeResult = PInvoke.GetVORMVARREFFrequency(this._handle, out VAR_REF_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the AM modulation depth of the 30Hz variable signal.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]VOR:VAR[:DEPTh] 0 to 100 PCT
        /// </summary>
        /// <param name="VAR_Depth">
        /// Sets the AM modulation depth of the 30Hz variable signal.
        /// 
        /// Valid Range: 
        /// 0 to 100 PCT
        /// 
        /// Default Value: 30 PCT
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetVORMVARDepth(double VAR_Depth)
        {
            int pInvokeResult = PInvoke.SetVORMVARDepth(this._handle, VAR_Depth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the AM modulation depth of the 30Hz variable signal.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]VOR:VAR[:DEPTh]?
        /// </summary>
        /// <param name="VAR_Depth">
        /// Gets the AM modulation depth of the 30Hz variable signal.
        /// 
        /// Valid Range: 
        /// 0 to 100 PCT
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetVORMVARDepth(out double VAR_Depth)
        {
            int pInvokeResult = PInvoke.GetVORMVARDepth(this._handle, out VAR_Depth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the frequency of the FM carrier.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]VOR:SUBCarrier[:FREQuency] 5000 to 15000 Hz
        /// </summary>
        /// <param name="Subcarrier_Frequency">
        /// Sets the frequency of the FM carrier.
        /// 
        /// Valid Range: 
        /// 5000 to 15000 Hz (resolution 10 Hz)
        /// 
        /// Default Value: 9960 Hz
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetVORMSubcarrierFrequency(double Subcarrier_Frequency)
        {
            int pInvokeResult = PInvoke.SetVORMSubcarrierFrequency(this._handle, Subcarrier_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the frequency of the FM carrier.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]VOR:SUBCarrier[:FREQuency]?
        /// </summary>
        /// <param name="Subcarrier_Frequency">
        /// Gets the frequency of the FM carrier.
        /// 
        /// Valid Range: 
        /// 5000 to 15000 Hz (resolution 10 Hz)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetVORMSubcarrierFrequency(out double Subcarrier_Frequency)
        {
            int pInvokeResult = PInvoke.GetVORMSubcarrierFrequency(this._handle, out Subcarrier_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the AM modulation depth of the FM carrier.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]VOR:SUBCarrier:DEPTh 0 to 100 PCT
        /// </summary>
        /// <param name="Subcarrier_Depth">
        /// Sets the AM modulation depth of the FM carrier.
        /// 
        /// Valid Range: 
        /// 0 to 100 PCT
        /// 
        /// Default Value: 30 PCT
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetVORMSubcarrierDepth(double Subcarrier_Depth)
        {
            int pInvokeResult = PInvoke.SetVORMSubcarrierDepth(this._handle, Subcarrier_Depth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the AM modulation depth of the FM carrier.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]VOR:SUBCarrier:DEPTh?
        /// </summary>
        /// <param name="Subcarrier_Depth">
        /// Gets the AM modulation depth of the FM carrier.
        /// 
        /// Valid Range: 
        /// 0 to 100 PCT
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetVORMSubcarrierDepth(out double Subcarrier_Depth)
        {
            int pInvokeResult = PInvoke.GetVORMSubcarrierDepth(this._handle, out Subcarrier_Depth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the frequency deviation of the reference signal on the FM carrier.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]VOR:REFerence[:DEViation] 0 to 960 Hz
        /// </summary>
        /// <param name="REF_Deviation">
        /// Sets the frequency deviation of the reference signal on the FM carrier.
        /// 
        /// Valid Range: 
        /// 0 to 960 Hz
        /// 
        /// Default Value: 480 Hz
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetVORMREFDeviation(int REF_Deviation)
        {
            int pInvokeResult = PInvoke.SetVORMREFDeviation(this._handle, REF_Deviation);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the frequency deviation of the reference signal on the FM carrier.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]VOR:REFerence[:DEViation]?
        /// </summary>
        /// <param name="REF_Deviation">
        /// Gets the frequency deviation of the reference signal on the FM carrier.
        /// 
        /// Valid Range: 
        /// 0 to 960 Hz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetVORMREFDeviation(out int REF_Deviation)
        {
            int pInvokeResult = PInvoke.GetVORMREFDeviation(this._handle, out REF_Deviation);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates the VOR default setting.
        /// 
        /// Note(s):
        /// 
        /// (1) 
        /// Parameter           Value
        /// State                Off
        /// Mode                 Norm
        /// Source               Internal
        /// Bearing Angle        0 deg
        /// Direction            From
        /// VAR / REF Frequency  30 Hz
        /// VAR Depth            30 Percent
        /// Subcarrier Frequency 9960 kHz
        /// Subcarrier Depth     30 Percent
        /// REF Deviation        480 Hz
        /// COM/ID State         Off
        /// COM/ID Frequency     1020 kHz
        /// COM/ID Depth         10 percent
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]VOR:PRESet
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetVORMToDefault()
        {
            int pInvokeResult = PInvoke.SetVORMToDefault(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function switches on or off the additional communication/identification signal.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]VOR:COMid[:STATe] ON | OFF
        /// 
        /// </summary>
        /// <param name="COM_ID_State">
        /// Switches on or off the additional communication/identification signal.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetVORMCOMIDState(bool COM_ID_State)
        {
            int pInvokeResult = PInvoke.SetVORMCOMIDState(this._handle, System.Convert.ToUInt16(COM_ID_State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the state of the additional communication/identification signal.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]VOR:COMid[:STATe]?
        /// </summary>
        /// <param name="COM_ID_State">
        /// Returns the state of the additional communication/identification signal.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetVORMCOMIDState(out bool COM_ID_State)
        {
            ushort COM_ID_StateAsUShort;
            int pInvokeResult = PInvoke.GetVORMCOMIDState(this._handle, out COM_ID_StateAsUShort);
            COM_ID_State = System.Convert.ToBoolean(COM_ID_StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the coding of the COM/ID signal by the international short name of the airport (e.g. MUC for the Munic airport). (COM/ID signal).
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]VOR:COMid:CODE 'code'
        /// </summary>
        /// <param name="COM_ID_Code">
        /// Sets the coding of the COM/ID signal by the international short name of the airport
        /// 
        /// Valid Values:
        /// not checked
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetVORMCOMIDCode(string COM_ID_Code)
        {
            int pInvokeResult = PInvoke.SetVORMCOMIDCode(this._handle, COM_ID_Code);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the coding of the COM/ID signal by the international short name of the airport (e.g. MUC for the Munic airport). (COM/ID signal).
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]VOR:COMid:CODE?
        /// </summary>
        /// <param name="COM_ID_Code">
        /// Gets the coding of the COM/ID signal by the international short name of the airport.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetVORMCOMIDCode(System.Text.StringBuilder COM_ID_Code)
        {
            int pInvokeResult = PInvoke.GetVORMCOMIDCode(this._handle, COM_ID_Code);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the frequency of the communication/identification signal.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]VOR:COMid:FREQuency 0.1 to 20 000 Hz
        /// </summary>
        /// <param name="COM_ID_Frequency">
        /// Sets the frequency of the communication/identification signal.
        /// 
        /// Valid Range: 
        /// 0.1 to 20 000 Hz
        /// 
        /// Default Value: 1020 Hz
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetVORMCOMIDFrequency(double COM_ID_Frequency)
        {
            int pInvokeResult = PInvoke.SetVORMCOMIDFrequency(this._handle, COM_ID_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the frequency of the communication/identification signal.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]VOR:COMid:FREQuency?
        /// </summary>
        /// <param name="COM_ID_Frequency">
        /// Gets the frequency of the communication/identification signal.
        /// 
        /// Valid Range: 
        /// 0.1 to 20 000 Hz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetVORMCOMIDFrequency(out double COM_ID_Frequency)
        {
            int pInvokeResult = PInvoke.GetVORMCOMIDFrequency(this._handle, out COM_ID_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the depth of the communication/identification signal.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]VOR:COMid:DEPTh 0 to 100 PCT
        /// </summary>
        /// <param name="COM_ID_Depth">
        /// Sets the depth of the communication/identification signal.
        /// 
        /// Valid Range: 
        /// 0 to 100 PCT
        /// 
        /// Default Value: 10 PCT
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetVORMCOMIDDepth(double COM_ID_Depth)
        {
            int pInvokeResult = PInvoke.SetVORMCOMIDDepth(this._handle, COM_ID_Depth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the depth of the communication/identification signal.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]VOR:COMid:DEPTh?
        /// </summary>
        /// <param name="COM_ID_Depth">
        /// Gets the depth of the communication/identification signal.
        /// 
        /// Valid Range: 
        /// 0 to 100 PCT
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetVORMCOMIDDepth(out double COM_ID_Depth)
        {
            int pInvokeResult = PInvoke.GetVORMCOMIDDepth(this._handle, out COM_ID_Depth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects if the set dot length determines the dash length (= three times the dot length) (setting STD) or if all length parameters can be set independently (setting USER. (COM/ID signal).
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]VOR:COMid:TSCHema STD | USER
        /// </summary>
        /// <param name="COM_ID_Time_Schema">
        /// Selects if the set dot length determines the dash length (= three times the dot length) (setting STD) or if all length parameters can be set independently (setting USER. (COM/ID signal).
        /// 
        /// Valid Range: 
        /// RSSMA_TIME_SCHEMA_STD  (0) - Standard
        /// RSSMA_TIME_SCHEMA_USER (1) - User
        /// 
        /// Default Value: RSSMA_TIME_SCHEMA_STD  (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetVORMCOMIDTimeSchema(int COM_ID_Time_Schema)
        {
            int pInvokeResult = PInvoke.SetVORMCOMIDTimeSchema(this._handle, COM_ID_Time_Schema);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns whether the set dot length is determined by the dash length (= three times the dot length) (setting STD) or all length parameters is set independently (setting USER. (COM/ID signal).
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]VOR:COMid:TSCHema?
        /// </summary>
        /// <param name="COM_ID_Time_Schema">
        /// Returns whether the set dot length is determined by the dash length (= three times the dot length) (setting STD) or all length parameters is set independently (setting USER. (COM/ID signal).
        /// 
        /// Valid Range: 
        /// RSSMA_TIME_SCHEMA_STD  (0) - Standard
        /// RSSMA_TIME_SCHEMA_USER (1) - User
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetVORMCOMIDTimeSchema(out int COM_ID_Time_Schema)
        {
            int pInvokeResult = PInvoke.GetVORMCOMIDTimeSchema(this._handle, out COM_ID_Time_Schema);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the length of a morse dash by means of seconds. This function is available for user time schema only (rssma_SetVORMCOMIDTimeSchema).
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]VOR:COMid:DASH
        /// </summary>
        /// <param name="COM_ID_Dash_Length">
        /// Enters the length of a morse dash by means of seconds.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.3 s
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetVORMCOMIDDashLength(double COM_ID_Dash_Length)
        {
            int pInvokeResult = PInvoke.SetVORMCOMIDDashLength(this._handle, COM_ID_Dash_Length);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the length of a morse dash by means of seconds. This function is available for user time schema only (rssma_SetVORMCOMIDTimeSchema).
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]VOR:COMid:DASH?
        /// </summary>
        /// <param name="COM_ID_Dash_Length">
        /// Returns the length of a morse dash by means of seconds.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetVORMCOMIDDashLength(out double COM_ID_Dash_Length)
        {
            int pInvokeResult = PInvoke.GetVORMCOMIDDashLength(this._handle, out COM_ID_Dash_Length);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the length of a morse dot by means of seconds. The length of the dash (3xdot), symbol space (=dot) and letter space (=3xdot) is also determined by this entry .
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]VOR:COMid:DOT
        /// </summary>
        /// <param name="COM_ID_Dot_Length">
        /// Enters the length of a morse dot by means of seconds.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.1 s
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetVORMCOMIDDotLength(double COM_ID_Dot_Length)
        {
            int pInvokeResult = PInvoke.SetVORMCOMIDDotLength(this._handle, COM_ID_Dot_Length);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the length of a morse dot by means of seconds.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]VOR:COMid:DOT?
        /// </summary>
        /// <param name="COM_ID_Dot_Length">
        /// Returns the length of a morse dot by means of seconds.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetVORMCOMIDDotLength(out double COM_ID_Dot_Length)
        {
            int pInvokeResult = PInvoke.GetVORMCOMIDDotLength(this._handle, out COM_ID_Dot_Length);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the length of a letter space by means of seconds. This function is available user time schema only (rssma_SetVORMCOMIDTimeSchema).
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]VOR:COMid:LETTer
        /// </summary>
        /// <param name="COM_ID_Letter_Space">
        /// Enters the length of a letter space by means of seconds. 
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.3 s
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetVORMCOMIDLetterSpace(double COM_ID_Letter_Space)
        {
            int pInvokeResult = PInvoke.SetVORMCOMIDLetterSpace(this._handle, COM_ID_Letter_Space);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the length of a letter space by means of seconds. This function is available user time schema only (rssma_SetVORMCOMIDTimeSchema).
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]VOR:COMid:LETTer?
        /// </summary>
        /// <param name="COM_ID_Letter_Space">
        /// Returns the length of a letter space by means of seconds.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetVORMCOMIDLetterSpace(out double COM_ID_Letter_Space)
        {
            int pInvokeResult = PInvoke.GetVORMCOMIDLetterSpace(this._handle, out COM_ID_Letter_Space);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the length of the symbol space by means of seconds. This function is available for user time schema only (rssma_SetVORMCOMIDTimeSchema).
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]VOR:COMid:SYMBol
        /// </summary>
        /// <param name="COM_ID_Symbol_Space">
        /// Enters the length of the symbol space by means of seconds.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.1 s
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetVORMCOMIDSymbolSpace(double COM_ID_Symbol_Space)
        {
            int pInvokeResult = PInvoke.SetVORMCOMIDSymbolSpace(this._handle, COM_ID_Symbol_Space);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the length of the symbol space by means of seconds. This function is available for user time schema only (rssma_SetVORMCOMIDTimeSchema).
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]VOR:COMid:SYMBol?
        /// </summary>
        /// <param name="COM_ID_Symbol_Space">
        /// Returns the length of the symbol space by means of seconds.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetVORMCOMIDSymbolSpace(out double COM_ID_Symbol_Space)
        {
            int pInvokeResult = PInvoke.GetVORMCOMIDSymbolSpace(this._handle, out COM_ID_Symbol_Space);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the period of the COM/ID signal in seconds.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [:SOURce]:VOR:COMid:PERiod
        /// </summary>
        /// <param name="Id_Period">
        /// Sets the period of the COM/ID signal in seconds.
        /// 
        /// Valid Values:
        /// 0.0 to 120.0 s
        /// 
        /// Default Value: 9.0 s
        /// 
        /// Notes:
        /// (1) Resolution 1ms
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetVORMCOMIDPeriod(double Id_Period)
        {
            int pInvokeResult = PInvoke.SetVORMCOMIDPeriod(this._handle, Id_Period);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the period of the COM/ID signal in seconds.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [:SOURce]:VOR:COMid:PERiod?
        /// </summary>
        /// <param name="Id_Period">
        /// Returns the period of the COM/ID signal in seconds.
        /// 
        /// Valid Values:
        /// 0.0 to 120.0 s
        /// 
        /// Notes:
        /// (1) Resolution 1ms
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetVORMCOMIDPeriod(out double Id_Period)
        {
            int pInvokeResult = PInvoke.GetVORMCOMIDPeriod(this._handle, out Id_Period);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the modulation source for VOR modulation. INT is the internal modulation source. The external signal is input at the AM EXT connector. The external signal is added to the internal signal. Switching off the internal source is not possible.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]VOR:SOURce INT | INT,EXT
        /// </summary>
        /// <param name="EXT_AM">
        /// Selects the modulation source for VOR modulation.
        /// 
        /// Valid Values:
        /// RSSMA_VORM_SRC_INT   (0) - Off
        /// RSSMA_VORM_SRC_EXT   (1) - EXT (MOD AM)
        /// 
        /// Default Value: RSSMA_VORM_SRC_INT  (0)
        /// 
        /// Notes:
        /// 
        /// (1) Off:
        /// Selects the internal modulation source for VOR modulation. 
        /// 
        /// (2) EXT (MOD AM):
        /// Selects the external source. The external signal is added to the internal signal. Switching off the internal source is not possible. The external signal is input via the AM EXT connector. The sensitivity is 10 mV per percent modulation depth.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetVORMEXTAM(int EXT_AM)
        {
            int pInvokeResult = PInvoke.SetVORMEXTAM(this._handle, EXT_AM);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the modulation source for VOR modulation. INT is the internal modulation source. 
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]VOR:SOURce?
        /// </summary>
        /// <param name="EXT_AM">
        /// Returns the modulation source for VOR modulation.
        /// 
        /// Valid Values:
        /// RSSMA_VORM_SRC_INT   (0) - Off
        /// RSSMA_VORM_SRC_EXT   (1) - EXT (MOD AM)
        /// 
        /// Notes:
        /// 
        /// (1) Off:
        /// Selects the internal modulation source for VOR modulation. 
        /// 
        /// (2) EXT (MOD AM):
        /// Selects the external source. The external signal is added to the internal signal. Switching off the internal source is not possible. The external signal is input via the AM EXT connector. The sensitivity is 10 mV per percent modulation depth.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetVORMEXTAM(out int EXT_AM)
        {
            int pInvokeResult = PInvoke.GetVORMEXTAM(this._handle, out EXT_AM);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the variation of the carrier frequency via the rotary knob.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [:SOURce]:VOR:FREQuency:STEP DECimal | ICAO
        /// </summary>
        /// <param name="Carrier_Frequency_Step">
        /// Sets  the variation of the carrier frequency via the rotary knob
        /// 
        /// Valid Range: 
        /// RSSMA_VAL_VORM_CARR_FREQ_STEP_DECIMAL (0) - Decimal
        /// RSSMA_VAL_VORM_CARR_FREQ_STEP_ICAO    (1) - ICAO
        /// 
        /// Default Value: RSSMA_VAL_VORM_CARR_FREQ_STEP_DECIMAL
        /// 
        /// Note(s):
        /// 
        /// (1) Decimal: Decimal variation according to the current cursor position.
        /// 
        /// (2) ICAO: Variation in predefined steps according to the standardized VOR transmitting frequencies, see documentation.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetVORMCarrierFrequencyStep(int Carrier_Frequency_Step)
        {
            int pInvokeResult = PInvoke.SetVORMCarrierFrequencyStep(this._handle, Carrier_Frequency_Step);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the variation of the carrier frequency via the rotary knob.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [:SOURce]:VOR:FREQuency:STEP?
        /// </summary>
        /// <param name="Carrier_Frequency_Step">
        /// Returns the variation of the carrier frequency.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetVORMCarrierFrequencyStep(out int Carrier_Frequency_Step)
        {
            int pInvokeResult = PInvoke.GetVORMCarrierFrequencyStep(this._handle, out Carrier_Frequency_Step);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the  ICAO channel i.e., the VOR transmitting frequency. The RF-frequency is set to the value selected here. 
        /// 
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [:SOURce]:VOR:ICAO:CHANnel X17|Y17|X19|Y19|X21|Y21|X23|Y23|X25|Y25|X27|
        /// Y27|X29|Y29|X31|Y31|X33|Y33|X35|Y35|X37|Y37|
        /// X39|Y39|X41|Y41|X43|Y43|X45|Y45|X47|Y47|X49|
        /// Y49|X51|Y51|X53|Y53|X55|Y55|X57|Y57|X58|Y58|
        /// X59|Y59|X70|Y70|X71|Y71|X72|Y72|X73|Y73|X74|
        /// Y74|X75|Y75|X76|Y76|X77|Y77|X78|Y78|X79|Y79|
        /// X80|Y80|X81|Y81|X82|Y82|X83|Y83|X84|Y84|X85|
        /// Y85|X86|Y86|X87|Y87|X88|Y88|X89|Y89|X90|Y90|
        /// X91|Y91|X92|Y92|X93|Y93|X94|Y94|X95|Y95|X96|
        /// Y96|X97|Y97|X98|Y98|X99|Y99|X100|Y100|X101|
        /// Y101|X102|Y102|X103|Y103|X104|Y104|X105|Y105|
        /// X106|Y106|X107|Y107|X108|Y108|X109|Y109|X110|
        /// Y110|X111|Y111|X112|Y112|X113|Y113|X114|Y114|
        /// X115|Y115|X116|Y116|X117|Y117|X118|Y118|X119|
        /// Y119|X120|Y120|X121|Y121|X122|Y122|X123|Y123|
        /// X124|Y124|X125|Y125|X126|Y126
        /// </summary>
        /// <param name="ICAO_Channel">
        /// Selects the ICAO channel X or Y
        /// 
        /// Valid Values:
        /// RSSMA_SOURCE_ICAO_CHANNEL_X (0) - X
        /// RSSMA_SOURCE_ICAO_CHANNEL_Y (1) - Y
        /// 
        /// 
        /// Default Value: RSSMA_SOURCE_ICAO_CHANNEL_X (0) - X
        /// 
        /// 
        /// </param>
        /// <param name="ICAO_Number">
        /// This control selects the ICAO number. 
        /// 
        /// Valid Values:
        /// 17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,
        /// 51,53,55,57,58,59,70,71,72,73,74,75,76,77,78,79,
        /// 80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,
        /// 101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126
        /// 
        /// Default Value: 17
        /// 
        /// Note(s):
        /// (1) See documentatin for the VOR interrogation frequency (MHz) for selected ICAO Channel Number
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetVORMICAOChannel(int ICAO_Channel, int ICAO_Number)
        {
            int pInvokeResult = PInvoke.SetVORMICAOChannel(this._handle, ICAO_Channel, ICAO_Number);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the selected ICAO channel.
        /// 
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [:SOURce]:VOR:ICAO:CHANnel?
        /// </summary>
        /// <param name="ICAO_Channel">
        /// Returns the ICAO channel X or Y
        /// 
        /// Returned Values:
        /// RSSMA_SOURCE_ICAO_CHANNEL_X (0) - X
        /// RSSMA_SOURCE_ICAO_CHANNEL_Y (1) - Y
        /// 
        /// </param>
        /// <param name="ICAO_Number">
        /// This control returns the ICAO number. 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetVORMICAOChannel(out int ICAO_Channel, out int ICAO_Number)
        {
            int pInvokeResult = PInvoke.GetVORMICAOChannel(this._handle, out ICAO_Channel, out ICAO_Number);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the ILS-GS modulation
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS[:GS|GSLope]:STATe ON | OFF
        /// [SOURce:]ILS[:GS|GSLope]:MODE NORM | ULOBe | LLOBe
        /// [SOURce:]ILS[:GS|GSLope]:DDM[:DEPTh] -0.8 to 0.8 PCT
        /// [SOURce:]ILS[:GS|GSLope]:DDM:CURRent -857.125 to +857.12 uA
        /// [SOURce:]ILS[:GS|GSLope]:DDM:LOGarithmic -999.9 to + 999.9 dB
        /// [SOURce:]ILS[:GS|GSLope]:DDM:DIRection UP | DOWN
        /// [SOURce:]ILS[:GS|GSLope]:SDM 0 to 100 PCT
        /// [SOURce:]ILS[:GS|GSLope]:ULOBe[:FREQuency] 60 to 120 Hz
        /// [SOURce:]ILS[:GS|GSLope]:LLOBe[:FREQuency] 100 to 200 Hz
        /// [SOURce:]ILS[:GS|GSLope]:PHASe 0 to 120 deg
        /// </summary>
        /// <param name="State">
        /// Activates/deactivates the ILS-GS modulation.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <param name="Mode">
        /// Selects the operating mode for the ILS-GS modulation signal.
        /// 
        /// Valid Values:
        /// RSSMA_ILSGSM_MODE_NORM   (0) - Normal
        /// RSSMA_ILSGSM_MODE_ULOB   (1) - 90 Hz
        /// RSSMA_ILSGSM_MODE_LLOB   (2) - 150 Hz
        /// 
        /// Default Value: RSSMA_ILSGSM_MODE_NORM  (0)
        /// 
        /// Notes:
        /// 
        /// (1) Normal:
        /// ILS-GS modulation is active. 
        /// 
        /// (2) 90 Hz:
        /// Amplitude modulation of the output signal with the upper lobe signal component (90Hz signal content) of the ILS-GS signal. The modulation depth of the 90-Hz signal results from the settings of parameters Sum of depth (SDM) and DDM according to
        /// (Direction Down):
        /// AM(90 Hz) = 0,5 ? (SDM + DDM ? 100%)
        /// and (Direction Up)
        /// AM(90 Hz) = 0,5 ? (SDM - DDM ? 100%)
        /// 
        /// (3) 150 Hz:
        /// Amplitude modulation of the output signal with the lower lobe signal component (150-Hzsignal content) of the ILS-GS signal. The modulation depth of the 150-Hz signal results from the settings of parameters Sum of depth (SDM) and DDM according to (Direction Down):
        /// AM (150 Hz) = 0,5 ? (SDM + DDM ? 100%)
        /// and (Direction Up)
        /// AM (150 Hz) = 0,5 ? (SDM - DDM ? 100%)
        /// 
        /// </param>
        /// <param name="DDM_Depth">
        /// Sets the difference in depth of modulation between the signal of the upper/left lobe (90 Hz) and the lower/right lobe (150 Hz).
        /// 
        /// Valid Range: 
        /// -0.8 to 0.8 PCT
        /// 
        /// Default Value: 0 PCT
        /// 
        /// </param>
        /// <param name="DDM_Current">
        /// Sets the DDM value alternatively as a current by means of the ILS indicating instrument.
        /// 
        /// Valid Range: 
        /// -857.125.....+857.12 uA
        /// 
        /// Default Value: 0 uA
        /// 
        /// </param>
        /// <param name="DDM_Logarithmic">
        /// Sets the DDM value in dB.
        /// 
        /// Valid Range: 
        /// -999.9 to + 999.9 dB
        /// 
        /// Default Value: 0 dB
        /// 
        /// </param>
        /// <param name="DDM_Direction">
        /// Selects the simulation mode for the ILS-GS modulation signal.
        /// 
        /// Valid Values:
        /// RSSMA_ILSGSM_DDM_DIR_UP     (0) - Up
        /// RSSMA_ILSGSM_DDM_DIR_DOWN   (1) - Down
        /// 
        /// Default Value: RSSMA_ILSGSM_DDM_DIR_UP  (0)
        /// 
        /// Notes:
        /// 
        /// (1) Up:
        /// The 150-Hz modulation signal is predominant, the DDM value is positive (the airplane is too low, it must climb). 
        /// 
        /// (2) Down:
        /// The 90-Hz modulation signal is predominant, the DDM value is negativ (the airplane is too high, it must descend).
        /// </param>
        /// <param name="Sum_Of_Depth">
        /// Sets the arithmetic sum of the modulation depths of the upper/left lobe (90Hz) and lower/right lobe (150Hz) ILS-GS/ILS-LOC signal contents.
        /// 
        /// Valid Range: 
        /// 0 to 100 PCT
        /// 
        /// Default Value: 80 PCT
        /// 
        /// </param>
        /// <param name="Up_Frequency">
        /// Sets the modulation frequency of the antenna lobe arranged at the top viewed from the air plane.
        /// 
        /// Valid Range: 
        /// 60 to 120 Hz
        /// 
        /// Default Value: 90 PCT
        /// 
        /// </param>
        /// <param name="Down_Frequency">
        /// Sets the modulation frequency of the antenna lobe arranged at the bottom viewed from the air plane.
        /// 
        /// Valid Range: 
        /// 100 to 200 Hz
        /// 
        /// Default Value: 150 PCT
        /// 
        /// </param>
        /// <param name="Up_Down_Phase">
        /// Sets the phase between the modulation signals of the upper/left and lower/right antenna lobe.
        /// 
        /// Valid Range: 
        /// 0 to 120 deg
        /// 
        /// Default Value: 0 deg
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureILSGSModulation(bool State, int Mode, double DDM_Depth, double DDM_Current, double DDM_Logarithmic, int DDM_Direction, double Sum_Of_Depth, double Up_Frequency, double Down_Frequency, double Up_Down_Phase)
        {
            int pInvokeResult = PInvoke.ConfigureILSGSModulation(this._handle, System.Convert.ToUInt16(State), Mode, DDM_Depth, DDM_Current, DDM_Logarithmic, DDM_Direction, Sum_Of_Depth, Up_Frequency, Down_Frequency, Up_Down_Phase);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates/deactivates the ILS-GS modulation. Activation of ILS-GS modulation deactivates AM, VOR, ILS-LOC,
        /// Marker Beacon and ADF modulation.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS[:GS|GSLope]:STATe ON | OFF
        /// 
        /// </summary>
        /// <param name="State">
        /// Activates/deactivates the ILS-GS modulation.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetILSGSMState(bool State)
        {
            int pInvokeResult = PInvoke.SetILSGSMState(this._handle, System.Convert.ToUInt16(State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the state of the ILS-GS modulation. 
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS[:GS|GSLope]:STATe?
        /// 
        /// </summary>
        /// <param name="State">
        /// Returns the state of the ILS-GS modulation.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetILSGSMState(out bool State)
        {
            ushort StateAsUShort;
            int pInvokeResult = PInvoke.GetILSGSMState(this._handle, out StateAsUShort);
            State = System.Convert.ToBoolean(StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the operating mode for the ILS-GS modulation signal.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS[:GS|GSLope]:MODE NORM | ULOBe | LLOBe
        /// </summary>
        /// <param name="Mode">
        /// Selects the operating mode for the ILS-GS modulation signal.
        /// 
        /// Valid Values:
        /// RSSMA_ILSGSM_MODE_NORM   (0) - Normal
        /// RSSMA_ILSGSM_MODE_ULOB   (1) - 90 Hz
        /// RSSMA_ILSGSM_MODE_LLOB   (2) - 150 Hz
        /// 
        /// Default Value: RSSMA_ILSGSM_MODE_NORM  (0)
        /// 
        /// Notes:
        /// 
        /// (1) Normal:
        /// ILS-GS modulation is active. 
        /// 
        /// (2) 90 Hz:
        /// Amplitude modulation of the output signal with the upper lobe signal component (90Hz signal content) of the ILS-GS signal. The modulation depth of the 90-Hz signal results from the settings of parameters Sum of depth (SDM) and DDM according to
        /// (Direction Down):
        /// AM(90 Hz) = 0,5 ? (SDM + DDM ? 100%)
        /// and (Direction Up)
        /// AM(90 Hz) = 0,5 ? (SDM - DDM ? 100%)
        /// 
        /// (3) 150 Hz:
        /// Amplitude modulation of the output signal with the lower lobe signal component (150-Hzsignal content) of the ILS-GS signal. The modulation depth of the 150-Hz signal results from the settings of parameters Sum of depth (SDM) and DDM according to (Direction Down):
        /// AM (150 Hz) = 0,5 ? (SDM + DDM ? 100%)
        /// and (Direction Up)
        /// AM (150 Hz) = 0,5 ? (SDM - DDM ? 100%)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetILSGSMMode(int Mode)
        {
            int pInvokeResult = PInvoke.SetILSGSMMode(this._handle, Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the operating mode for the ILS-GS modulation signal.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS[:GS|GSLope]:MODE?
        /// </summary>
        /// <param name="Mode">
        /// Returns the operating mode for the ILS-GS modulation signal.
        /// 
        /// Valid Values:
        /// RSSMA_ILSGSM_MODE_NORM   (0) - Normal
        /// RSSMA_ILSGSM_MODE_ULOB   (1) - 90 Hz
        /// RSSMA_ILSGSM_MODE_LLOB   (2) - 150 Hz
        /// 
        /// Notes:
        /// 
        /// (1) Normal:
        /// ILS-GS modulation is active. 
        /// 
        /// (2) 90 Hz:
        /// Amplitude modulation of the output signal with the upper lobe signal component (90Hz signal content) of the ILS-GS signal. The modulation depth of the 90-Hz signal results from the settings of parameters Sum of depth (SDM) and DDM according to
        /// (Direction Down):
        /// AM(90 Hz) = 0,5 ? (SDM + DDM ? 100%)
        /// and (Direction Up)
        /// AM(90 Hz) = 0,5 ? (SDM - DDM ? 100%)
        /// 
        /// (3) 150 Hz:
        /// Amplitude modulation of the output signal with the lower lobe signal component (150-Hzsignal content) of the ILS-GS signal. The modulation depth of the 150-Hz signal results from the settings of parameters Sum of depth (SDM) and DDM according to (Direction Down):
        /// AM (150 Hz) = 0,5 ? (SDM + DDM ? 100%)
        /// and (Direction Up)
        /// AM (150 Hz) = 0,5 ? (SDM - DDM ? 100%)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetILSGSMMode(out int Mode)
        {
            int pInvokeResult = PInvoke.GetILSGSMMode(this._handle, out Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the difference in depth of modulation between the signal of the upper lobe (90 Hz) and the lower lobe (150 Hz).
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS[:GS|GSLope]:DDM[:DEPTh] -0.8 to 0.8 PCT
        /// </summary>
        /// <param name="DDM_Depth">
        /// Sets the difference in depth of modulation between the signal of the upper lobe (90 Hz) and the lower lobe (150 Hz).
        /// 
        /// Valid Range: 
        /// -0.8 to 0.8 PCT
        /// 
        /// Default Value: 0 PCT
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetILSGSMDDMDepth(double DDM_Depth)
        {
            int pInvokeResult = PInvoke.SetILSGSMDDMDepth(this._handle, DDM_Depth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the difference in depth of modulation between the signal of the upper lobe (90 Hz) and the lower lobe (150 Hz).
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS[:GS|GSLope]:DDM[:DEPTh]?
        /// </summary>
        /// <param name="DDM_Depth">
        /// Gets the difference in depth of modulation between the signal of the upper lobe (90 Hz) and the lower lobe (150 Hz).
        /// 
        /// Valid Range: 
        /// -0.8 to 0.8 PCT
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetILSGSMDDMDepth(out double DDM_Depth)
        {
            int pInvokeResult = PInvoke.GetILSGSMDDMDepth(this._handle, out DDM_Depth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the DDM value alternatively as a current by means of the ILS indicating instrument.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS[:GS|GSLope]:DDM:CURRent -857.125 to +857.12 uA
        /// </summary>
        /// <param name="DDM_Current">
        /// Sets the DDM value alternatively as a current by means of the ILS indicating instrument.
        /// 
        /// Valid Range: 
        /// -857.125.....+857.12 uA
        /// 
        /// Default Value: 0 uA
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetILSGSMDDMCurrent(double DDM_Current)
        {
            int pInvokeResult = PInvoke.SetILSGSMDDMCurrent(this._handle, DDM_Current);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the DDM value alternatively as a current by means of the ILS indicating instrument.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS[:GS|GSLope]:DDM:CURRent?
        /// </summary>
        /// <param name="DDM_Current">
        /// Gets the DDM value alternatively as a current by means of the ILS indicating instrument.
        /// 
        /// Valid Range: 
        /// -857.125.....+857.12 uA
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetILSGSMDDMCurrent(out double DDM_Current)
        {
            int pInvokeResult = PInvoke.GetILSGSMDDMCurrent(this._handle, out DDM_Current);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the DDM value in dB.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS[:GS|GSLope]:DDM:LOGarithmic -999.9 to + 999.9 dB
        /// </summary>
        /// <param name="DDM_Logarithmic">
        /// Sets the DDM value in dB.
        /// 
        /// Valid Range: 
        /// -999.9 to + 999.9 dB
        /// 
        /// Default Value: 0 dB
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetILSGSMDDMLogarithmic(double DDM_Logarithmic)
        {
            int pInvokeResult = PInvoke.SetILSGSMDDMLogarithmic(this._handle, DDM_Logarithmic);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the DDM value in dB.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS[:GS|GSLope]:DDM:LOGarithmic?
        /// </summary>
        /// <param name="DDM_Logarithmic">
        /// Gets the DDM value in dB.
        /// 
        /// Valid Range: 
        /// -999.9 to + 999.9 dB
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetILSGSMDDMLogarithmic(out double DDM_Logarithmic)
        {
            int pInvokeResult = PInvoke.GetILSGSMDDMLogarithmic(this._handle, out DDM_Logarithmic);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects if the DDM value is fixed or is changed with a change of sum of modulation depths.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS[:GS|GSLope]:DDM:COUPling FIXed | SDM
        /// </summary>
        /// <param name="DDM_Coupling">
        /// Selects if the DDM value is fixed or is changed with a change of sum of modulation depths.
        /// 
        /// Valid Values:
        /// RSSMA_ILS_DDM_COUP_FIXED (0) - Fixed
        /// RSSMA_ILS_DDM_COUP_SDM   (1) - Sum of Modulation Depths
        /// 
        /// Default Value: RSSMA_ILS_DDM_COUP_FIXED (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetILSGSMDDMCoupling(int DDM_Coupling)
        {
            int pInvokeResult = PInvoke.SetILSGSMDDMCoupling(this._handle, DDM_Coupling);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries whether the DDM value is fixed or is changed with a change of sum of modulation depths.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS[:GS|GSLope]:DDM:COUPling?
        /// </summary>
        /// <param name="DDM_Coupling">
        /// Gets whether the DDM value is fixed or is changed with a change of sum of modulation depths.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetILSGSMDDMCoupling(out int DDM_Coupling)
        {
            int pInvokeResult = PInvoke.GetILSGSMDDMCoupling(this._handle, out DDM_Coupling);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function enters the difference in depth of modulation between the signal of the upper/left lobe (90 Hz) and the lower/right lobe (150 Hz).
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS[:GS|GSLope]:DDM:PCT
        /// </summary>
        /// <param name="DDM_Percent">
        /// Enters the difference in depth of modulation between the signal of the upper/left lobe (90 Hz) and the lower/right lobe (150 Hz).
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 0 %
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetILSGSMDDMPercent(int DDM_Percent)
        {
            int pInvokeResult = PInvoke.SetILSGSMDDMPercent(this._handle, DDM_Percent);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the difference in depth of modulation between the signal of the upper/left lobe (90 Hz) and the lower/right lobe (150 Hz).
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS[:GS|GSLope]:DDM:PCT?
        /// </summary>
        /// <param name="DDM_Percent">
        /// Returns the difference in depth of modulation between the signal of the upper/left lobe (90 Hz) and the lower/right lobe (150 Hz).
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetILSGSMDDMPercent(out int DDM_Percent)
        {
            int pInvokeResult = PInvoke.GetILSGSMDDMPercent(this._handle, out DDM_Percent);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function enters the polarity for DDM calculation (see DDM Depth).
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS[:GS|GSLope]:DDM:POLarity P90_150 | P150_90
        /// </summary>
        /// <param name="DDM_Polarity">
        /// Enters the polarity for DDM calculation (see DDM Depth).
        /// 
        /// Valid Values:
        /// RSSMA_ILS_DDM_POL_P90_150 (0) - 90 Hz - 150 Hz
        /// RSSMA_ILS_DDM_POL_P150_90 (1) - 150 Hz - 90 Hz
        /// 
        /// Default Value: RSSMA_ILS_DDM_POL_P90_150 (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetILSGSMDDMPolarity(int DDM_Polarity)
        {
            int pInvokeResult = PInvoke.SetILSGSMDDMPolarity(this._handle, DDM_Polarity);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the polarity for DDM calculation (see DDM Depth).
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS[:GS|GSLope]:DDM:POLarity?
        /// </summary>
        /// <param name="DDM_Polarity">
        /// Returns the polarity for DDM calculation (see DDM Depth).
        /// 
        /// Valid Values:
        /// RSSMA_ILS_DDM_POL_P90_150 (0) - 90 Hz - 150 Hz
        /// RSSMA_ILS_DDM_POL_P150_90 (1) - 150 Hz - 90 Hz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetILSGSMDDMPolarity(out int DDM_Polarity)
        {
            int pInvokeResult = PInvoke.GetILSGSMDDMPolarity(this._handle, out DDM_Polarity);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the simulation mode for the ILS-GS modulation signal.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS[:GS|GSLope]:DDM:DIRection UP | DOWN
        /// </summary>
        /// <param name="DDM_Direction">
        /// Selects the simulation mode for the ILS-GS modulation signal.
        /// 
        /// Valid Values:
        /// RSSMA_ILSGSM_DDM_DIR_UP     (0) - Up
        /// RSSMA_ILSGSM_DDM_DIR_DOWN   (1) - Down
        /// 
        /// Default Value: RSSMA_ILSGSM_DDM_DIR_UP  (0)
        /// 
        /// Notes:
        /// 
        /// (1) Up:
        /// The 150-Hz modulation signal is predominant, the DDM value is positive (the airplane is too low, it must climb). 
        /// 
        /// (2) Down:
        /// The 90-Hz modulation signal is predominant, the DDM value is negativ (the airplane is too high, it must descend).
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetILSGSMFly(int DDM_Direction)
        {
            int pInvokeResult = PInvoke.SetILSGSMFly(this._handle, DDM_Direction);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the simulation mode for the ILS-GS modulation signal.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS[:GS|GSLope]:DDM:DIRection?
        /// </summary>
        /// <param name="DDM_Direction">
        /// Returns the simulation mode for the ILS-GS modulation signal.
        /// 
        /// Valid Values:
        /// RSSMA_ILSGSM_DDM_DIR_UP     (0) - Up
        /// RSSMA_ILSGSM_DDM_DIR_DOWN   (1) - Down
        /// 
        /// Notes:
        /// 
        /// (1) Up:
        /// The 150-Hz modulation signal is predominant, the DDM value is positive (the airplane is too low, it must climb). 
        /// 
        /// (2) Down:
        /// The 90-Hz modulation signal is predominant, the DDM value is negativ (the airplane is too high, it must descend).
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetILSGSMFly(out int DDM_Direction)
        {
            int pInvokeResult = PInvoke.GetILSGSMFly(this._handle, out DDM_Direction);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the arithmetic sum of the modulation depths of the upper lobe (90Hz) and lower lobe (150Hz) ILS-GS signal contents. The RMS modulation depth of the sum signal depends on the phase setting of both modulation tones.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS[:GS|GSLope]:SDM 0 to 100 PCT
        /// </summary>
        /// <param name="Sum_Of_Depth">
        /// Sets the arithmetic sum of the modulation depths of the upper lobe (90Hz) and lower lobe (150Hz) ILS-GS signal contents.
        /// 
        /// Valid Range: 
        /// 0 to 100 PCT
        /// 
        /// Default Value: 80 PCT
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetILSGSMSumOfDepth(double Sum_Of_Depth)
        {
            int pInvokeResult = PInvoke.SetILSGSMSumOfDepth(this._handle, Sum_Of_Depth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the arithmetic sum of the modulation depths of the upper lobe (90Hz) and lower lobe (150Hz) ILS-GS signal contents. The RMS modulation depth of the sum signal depends on the phase setting of both modulation tones.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS[:GS|GSLope]:SDM?
        /// </summary>
        /// <param name="Sum_Of_Depth">
        /// Gets the arithmetic sum of the modulation depths of the upper lobe (90Hz) and lower lobe (150Hz) ILS-GS signal contents.
        /// 
        /// Valid Range: 
        /// 0 to 100 PCT
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetILSGSMSumOfDepth(out double Sum_Of_Depth)
        {
            int pInvokeResult = PInvoke.GetILSGSMSumOfDepth(this._handle, out Sum_Of_Depth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the modulation frequency of the antenna lobe arranged at the top viewed from the air plane.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS[:GS|GSLope]:ULOBe[:FREQuency] 60 to 120 Hz
        /// </summary>
        /// <param name="Up_Frequency">
        /// Sets the modulation frequency of the antenna lobe arranged at the top viewed from the air plane.
        /// 
        /// Valid Range: 
        /// 60 to 120 Hz
        /// 
        /// Default Value: 90 PCT
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetILSGSMUpFrequency(double Up_Frequency)
        {
            int pInvokeResult = PInvoke.SetILSGSMUpFrequency(this._handle, Up_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the modulation frequency of the antenna lobe arranged at the top viewed from the air plane.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS[:GS|GSLope]:ULOBe[:FREQuency]?
        /// </summary>
        /// <param name="Up_Frequency">
        /// Gets the modulation frequency of the antenna lobe arranged at the top viewed from the air plane.
        /// 
        /// Valid Range: 
        /// 60 to 120 Hz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetILSGSMUpFrequency(out double Up_Frequency)
        {
            int pInvokeResult = PInvoke.GetILSGSMUpFrequency(this._handle, out Up_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the modulation frequency of the antenna lobe arranged at the bottom viewed from the air plane.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS[:GS|GSLope]:LLOBe[:FREQuency] 100 to 200 Hz
        /// </summary>
        /// <param name="Down_Frequency">
        /// Sets the modulation frequency of the antenna lobe arranged at the bottom viewed from the air plane.
        /// 
        /// Valid Range: 
        /// 100 to 200 Hz
        /// 
        /// Default Value: 150 PCT
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetILSGSMDownFrequency(double Down_Frequency)
        {
            int pInvokeResult = PInvoke.SetILSGSMDownFrequency(this._handle, Down_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the modulation frequency of the antenna lobe arranged at the bottom viewed from the air plane.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS[:GS|GSLope]:LLOBe[:FREQuency]?
        /// </summary>
        /// <param name="Down_Frequency">
        /// Gets the modulation frequency of the antenna lobe arranged at the bottom viewed from the air plane.
        /// 
        /// Valid Range: 
        /// 100 to 200 Hz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetILSGSMDownFrequency(out double Down_Frequency)
        {
            int pInvokeResult = PInvoke.GetILSGSMDownFrequency(this._handle, out Down_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the phase between the modulation signals of the upper and lower antenna lobe. The zero crossing of the lower lobe (150Hz) signal serves as a reference. The angle refers to the period of the signal of the lower antenna lobe.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS[:GS|GSLope]:PHASe 0 to 120 deg
        /// </summary>
        /// <param name="Up_Down_Phase">
        /// Sets the phase between the modulation signals of the upper and lower antenna lobe.
        /// 
        /// Valid Range: 
        /// 0 to 120 deg
        /// 
        /// Default Value: 0 deg
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetILSGSMUpDownPhase(double Up_Down_Phase)
        {
            int pInvokeResult = PInvoke.SetILSGSMUpDownPhase(this._handle, Up_Down_Phase);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the phase between the modulation signals of the upper and lower antenna lobe. The zero crossing of the lower lobe (150Hz) signal serves as a reference. The angle refers to the period of the signal of the lower antenna lobe.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS[:GS|GSLope]:PHASe?
        /// </summary>
        /// <param name="Up_Down_Phase">
        /// Gets the phase between the modulation signals of the upper and lower antenna lobe.
        /// 
        /// Valid Range: 
        /// 0 to 120 deg
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetILSGSMUpDownPhase(out double Up_Down_Phase)
        {
            int pInvokeResult = PInvoke.GetILSGSMUpDownPhase(this._handle, out Up_Down_Phase);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activate the ILS-GS default setting.
        /// 
        /// Note(s):
        /// 
        /// (1) 
        /// Parameter        Value
        /// State            Off
        /// Mode             Norm
        /// DDM              0
        /// Fly              Up
        /// Sum of Depth     80 Percent
        /// Up Frequency     90 Hz
        /// Down Frequency   150 Hz
        /// Up/Down Phase    0 deg
        /// COM/ID State     Off
        /// COM/ID Frequency 1020 kHz
        /// COM/ID Depth     10 percent
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS[:GS|GSLope]:PRESet
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetILSGSMToDefault()
        {
            int pInvokeResult = PInvoke.SetILSGSMToDefault(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the variation of the carrier frequency.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS[:GS|GSLope]:FREQuency:STEP DECimal | ICAO
        /// </summary>
        /// <param name="Carrier_Frequency_Step">
        /// Selects the variation of the carrier frequency.
        /// 
        /// Valid Values:
        /// RSSMA_ILSGSM_FREQ_STEP_DEC  (0) - Decimal
        /// RSSMA_ILSGSM_FREQ_STEP_ICAO (1) - ICAO
        /// 
        /// Default Value: RSSMA_ILSGSM_FREQ_STEP_DEC  (0)
        /// 
        /// Notes:
        /// 
        /// (1) Decimal:
        /// Decimal variation according to the current cursor position. 
        /// 
        /// (2) ICAO:
        /// Variation in predefined steps according to the standardized ILS-GS/LOC transmitting frequencies. The start value can be selected with command ILS:GS|LOC:ICAO:CHANnel. The selection of the ICAO channel is effective on both ILS modulations. A  switch between the two modulations causes the RF frequency to be adapted to the associated value.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetILSGSMCarrierFrequencyStep(int Carrier_Frequency_Step)
        {
            int pInvokeResult = PInvoke.SetILSGSMCarrierFrequencyStep(this._handle, Carrier_Frequency_Step);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the variation of the carrier frequency.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS[:GS|GSLope]:FREQuency:STEP?
        /// </summary>
        /// <param name="Carrier_Frequency_Step">
        /// Returns the variation of the carrier frequency.
        /// 
        /// Valid Values:
        /// RSSMA_ILSGSM_FREQ_STEP_DEC  (0) - Decimal
        /// RSSMA_ILSGSM_FREQ_STEP_ICAO (1) - ICAO
        /// 
        /// Notes:
        /// 
        /// (1) Decimal:
        /// Decimal variation according to the current cursor position. 
        /// 
        /// (2) ICAO:
        /// Variation in predefined steps according to the standardized ILS-GS/LOC transmitting frequencies. The start value can be selected with command ILS:GS|LOC:ICAO:CHANnel. The selection of the ICAO channel is effective on both ILS modulations. A  switch between the two modulations causes the RF frequency to be adapted to the associated value.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetILSGSMCarrierFrequencyStep(out int Carrier_Frequency_Step)
        {
            int pInvokeResult = PInvoke.GetILSGSMCarrierFrequencyStep(this._handle, out Carrier_Frequency_Step);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the ICAO channel  i.e, the ILS transmitting frequency. The RF-frequency is set to the value selected here. A variation of the carrier frequency by the rotary knob is performed in predefined steps  according to the standardized ILS transmitting frequencies. The ICAO channel settings for ILS-GS and ILS-LOC are coupled.
        /// 
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS[:GS|GSLope]:ICAO:CHANnel CH18X | CH18Y | CH20X | CH20Y | CH22X | CH22Y | CH24X | CH24Y | CH26X | CH26Y | CH28X | CH28Y | CH30X | CH30Y | CH32X | CH32Y | CH34X | CH34Y | CH36X | CH36Y | CH38X | CH38Y | CH40X | CH40Y | CH42X | CH42Y | CH44X | CH44Y | CH46X | CH46Y | CH48X | CH48Y | CH50X | CH50Y | CH52X | CH52Y | CH54X | CH54Y | CH56X | CH56Y
        /// </summary>
        /// <param name="ICAO_Channel">
        /// Select the ICAO channel  i.e, the ILS transmitting frequency.
        /// 
        /// Valid Values:
        /// RSSMA_ILSGSM_ICAO_CHAN_18_X (0) - 18X
        /// RSSMA_ILSGSM_ICAO_CHAN_18_Y (1) - 18Y
        /// RSSMA_ILSGSM_ICAO_CHAN_20_X (2) - 20X
        /// RSSMA_ILSGSM_ICAO_CHAN_20_Y (3) - 20Y
        /// RSSMA_ILSGSM_ICAO_CHAN_22_X (4) - 22X
        /// RSSMA_ILSGSM_ICAO_CHAN_22_Y (5) - 22Y
        /// RSSMA_ILSGSM_ICAO_CHAN_24_X (6) - 24X
        /// RSSMA_ILSGSM_ICAO_CHAN_24_Y (7) - 24Y
        /// RSSMA_ILSGSM_ICAO_CHAN_26_X (8) - 26X
        /// RSSMA_ILSGSM_ICAO_CHAN_26_Y (9) - 26Y
        /// RSSMA_ILSGSM_ICAO_CHAN_28_X (10) - 28X
        /// RSSMA_ILSGSM_ICAO_CHAN_28_Y (11) - 28Y
        /// RSSMA_ILSGSM_ICAO_CHAN_30_X (12) - 30X
        /// RSSMA_ILSGSM_ICAO_CHAN_30_Y (13) - 30Y
        /// RSSMA_ILSGSM_ICAO_CHAN_32_X (14) - 32X
        /// RSSMA_ILSGSM_ICAO_CHAN_32_Y (15) - 32Y
        /// RSSMA_ILSGSM_ICAO_CHAN_34_X (16) - 34X
        /// RSSMA_ILSGSM_ICAO_CHAN_34_Y (17) - 34Y
        /// RSSMA_ILSGSM_ICAO_CHAN_36_X (18) - 36X
        /// RSSMA_ILSGSM_ICAO_CHAN_36_Y (19) - 36Y
        /// RSSMA_ILSGSM_ICAO_CHAN_38_X (20) - 38X
        /// RSSMA_ILSGSM_ICAO_CHAN_38_Y (21) - 38Y
        /// RSSMA_ILSGSM_ICAO_CHAN_40_X (22) - 40X
        /// RSSMA_ILSGSM_ICAO_CHAN_40_Y (23) - 40Y
        /// RSSMA_ILSGSM_ICAO_CHAN_42_X (24) - 42X
        /// RSSMA_ILSGSM_ICAO_CHAN_42_Y (25) - 42Y
        /// RSSMA_ILSGSM_ICAO_CHAN_44_X (26) - 44X
        /// RSSMA_ILSGSM_ICAO_CHAN_44_Y (27) - 44Y
        /// RSSMA_ILSGSM_ICAO_CHAN_46_X (28) - 46X
        /// RSSMA_ILSGSM_ICAO_CHAN_46_Y (29) - 46Y
        /// RSSMA_ILSGSM_ICAO_CHAN_48_X (30) - 48X
        /// RSSMA_ILSGSM_ICAO_CHAN_48_Y (31) - 48Y
        /// RSSMA_ILSGSM_ICAO_CHAN_50_X (32) - 50X
        /// RSSMA_ILSGSM_ICAO_CHAN_50_Y (33) - 50Y
        /// RSSMA_ILSGSM_ICAO_CHAN_52_X (34) - 52X
        /// RSSMA_ILSGSM_ICAO_CHAN_52_Y (35) - 52Y
        /// RSSMA_ILSGSM_ICAO_CHAN_54_X (36) - 54X
        /// RSSMA_ILSGSM_ICAO_CHAN_54_Y (37) - 54Y
        /// RSSMA_ILSGSM_ICAO_CHAN_56_X (38) - 56X
        /// RSSMA_ILSGSM_ICAO_CHAN_56_Y (39) - 56Y
        /// 
        /// Default Value: RSSMA_ILSGSM_ICAO_CHAN_18_X  (0)
        /// 
        /// Notes:
        /// 
        /// (1) 
        /// Channel: RF Frequency (ILS-GS) / RF Frequency (ILS-LOC)
        /// units: MHz
        /// 
        /// 18X:     334.7  / 108.1 
        /// 18Y:     108.15 / 334.55
        /// 20X:     108.30 / 334.10
        /// 20Y:     108.35 / 333.95
        /// 22X:     108.50 / 329.90
        /// 22Y:     108.55 / 329.75
        /// 24X:     108.70 / 330.50
        /// 24Y:     108.75 / 330.35
        /// 26X:     108.90 / 329.30
        /// 26Y:     108.95 / 329.15
        /// 28X:     109.10 / 331.40
        /// 28Y:     109.15 / 331.25
        /// 30X:     109.30 / 332.00
        /// 30Y:     109.35 / 331.85
        /// 32X:     109.50 / 332.60
        /// 32Y:     109.55 / 332.45
        /// 34X:     109.70 / 333.20
        /// 34Y:     109.75 / 333.05
        /// 36X:     109.90 / 333.80
        /// 36Y:     109.95 / 333.65
        /// 38X:     110.10 / 334.40
        /// 38Y:     110.15 / 334.25
        /// 40X:     110.30 / 335.00
        /// 40Y:     110.35 / 334.85
        /// 42X:     110.50 / 329.60
        /// 42Y:     110.55 / 329.45
        /// 44X:     110.70 / 330.20
        /// 44Y:     110.75 / 330.05
        /// 46X:     110.90 / 330.80
        /// 46Y:     110.95 / 330.65
        /// 48X:     111.10 / 331.70
        /// 48Y:     111.15 / 331.55
        /// 50X:     111.30 / 332.30
        /// 50Y:     111.35 / 332.15
        /// 52X:     111.50 / 332.90
        /// 52Y:     111.55 / 332.75
        /// 54X:     111.70 / 333.50
        /// 54Y:     111.75 / 333.35
        /// 56X:     111.90 / 331.10
        /// 56Y:     111.95 / 330.95
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetILSGSMICAOChannel(int ICAO_Channel)
        {
            int pInvokeResult = PInvoke.SetILSGSMICAOChannel(this._handle, ICAO_Channel);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the ICAO channel  i.e, the ILS transmitting frequency. 
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS[:GS|GSLope]:ICAO:CHANnel?
        /// </summary>
        /// <param name="ICAO_Channel">
        /// Returns the ICAO channel  i.e, the ILS transmitting frequency.
        /// 
        /// Valid Values:
        /// RSSMA_ILSGSM_ICAO_CHAN_18_X (0) - 18X
        /// RSSMA_ILSGSM_ICAO_CHAN_18_Y (1) - 18Y
        /// RSSMA_ILSGSM_ICAO_CHAN_20_X (2) - 20X
        /// RSSMA_ILSGSM_ICAO_CHAN_20_Y (3) - 20Y
        /// RSSMA_ILSGSM_ICAO_CHAN_22_X (4) - 22X
        /// RSSMA_ILSGSM_ICAO_CHAN_22_Y (5) - 22Y
        /// RSSMA_ILSGSM_ICAO_CHAN_24_X (6) - 24X
        /// RSSMA_ILSGSM_ICAO_CHAN_24_Y (7) - 24Y
        /// RSSMA_ILSGSM_ICAO_CHAN_26_X (8) - 26X
        /// RSSMA_ILSGSM_ICAO_CHAN_26_Y (9) - 26Y
        /// RSSMA_ILSGSM_ICAO_CHAN_28_X (10) - 28X
        /// RSSMA_ILSGSM_ICAO_CHAN_28_Y (11) - 28Y
        /// RSSMA_ILSGSM_ICAO_CHAN_30_X (12) - 30X
        /// RSSMA_ILSGSM_ICAO_CHAN_30_Y (13) - 30Y
        /// RSSMA_ILSGSM_ICAO_CHAN_32_X (14) - 32X
        /// RSSMA_ILSGSM_ICAO_CHAN_32_Y (15) - 32Y
        /// RSSMA_ILSGSM_ICAO_CHAN_34_X (16) - 34X
        /// RSSMA_ILSGSM_ICAO_CHAN_34_Y (17) - 34Y
        /// RSSMA_ILSGSM_ICAO_CHAN_36_X (18) - 36X
        /// RSSMA_ILSGSM_ICAO_CHAN_36_Y (19) - 36Y
        /// RSSMA_ILSGSM_ICAO_CHAN_38_X (20) - 38X
        /// RSSMA_ILSGSM_ICAO_CHAN_38_Y (21) - 38Y
        /// RSSMA_ILSGSM_ICAO_CHAN_40_X (22) - 40X
        /// RSSMA_ILSGSM_ICAO_CHAN_40_Y (23) - 40Y
        /// RSSMA_ILSGSM_ICAO_CHAN_42_X (24) - 42X
        /// RSSMA_ILSGSM_ICAO_CHAN_42_Y (25) - 42Y
        /// RSSMA_ILSGSM_ICAO_CHAN_44_X (26) - 44X
        /// RSSMA_ILSGSM_ICAO_CHAN_44_Y (27) - 44Y
        /// RSSMA_ILSGSM_ICAO_CHAN_46_X (28) - 46X
        /// RSSMA_ILSGSM_ICAO_CHAN_46_Y (29) - 46Y
        /// RSSMA_ILSGSM_ICAO_CHAN_48_X (30) - 48X
        /// RSSMA_ILSGSM_ICAO_CHAN_48_Y (31) - 48Y
        /// RSSMA_ILSGSM_ICAO_CHAN_50_X (32) - 50X
        /// RSSMA_ILSGSM_ICAO_CHAN_50_Y (33) - 50Y
        /// RSSMA_ILSGSM_ICAO_CHAN_52_X (34) - 52X
        /// RSSMA_ILSGSM_ICAO_CHAN_52_Y (35) - 52Y
        /// RSSMA_ILSGSM_ICAO_CHAN_54_X (36) - 54X
        /// RSSMA_ILSGSM_ICAO_CHAN_54_Y (37) - 54Y
        /// RSSMA_ILSGSM_ICAO_CHAN_56_X (38) - 56X
        /// RSSMA_ILSGSM_ICAO_CHAN_56_Y (39) - 56Y
        /// 
        /// Notes:
        /// 
        /// (1) 
        /// Channel: RF Frequency (ILS-GS) / RF Frequency (ILS-LOC)
        /// units: MHz
        /// 
        /// 18X:     334.7  / 108.1 
        /// 18Y:     108.15 / 334.55
        /// 20X:     108.30 / 334.10
        /// 20Y:     108.35 / 333.95
        /// 22X:     108.50 / 329.90
        /// 22Y:     108.55 / 329.75
        /// 24X:     108.70 / 330.50
        /// 24Y:     108.75 / 330.35
        /// 26X:     108.90 / 329.30
        /// 26Y:     108.95 / 329.15
        /// 28X:     109.10 / 331.40
        /// 28Y:     109.15 / 331.25
        /// 30X:     109.30 / 332.00
        /// 30Y:     109.35 / 331.85
        /// 32X:     109.50 / 332.60
        /// 32Y:     109.55 / 332.45
        /// 34X:     109.70 / 333.20
        /// 34Y:     109.75 / 333.05
        /// 36X:     109.90 / 333.80
        /// 36Y:     109.95 / 333.65
        /// 38X:     110.10 / 334.40
        /// 38Y:     110.15 / 334.25
        /// 40X:     110.30 / 335.00
        /// 40Y:     110.35 / 334.85
        /// 42X:     110.50 / 329.60
        /// 42Y:     110.55 / 329.45
        /// 44X:     110.70 / 330.20
        /// 44Y:     110.75 / 330.05
        /// 46X:     110.90 / 330.80
        /// 46Y:     110.95 / 330.65
        /// 48X:     111.10 / 331.70
        /// 48Y:     111.15 / 331.55
        /// 50X:     111.30 / 332.30
        /// 50Y:     111.35 / 332.15
        /// 52X:     111.50 / 332.90
        /// 52Y:     111.55 / 332.75
        /// 54X:     111.70 / 333.50
        /// 54Y:     111.75 / 333.35
        /// 56X:     111.90 / 331.10
        /// 56Y:     111.95 / 330.95
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetILSGSMICAOChannel(out int ICAO_Channel)
        {
            int pInvokeResult = PInvoke.GetILSGSMICAOChannel(this._handle, out ICAO_Channel);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the modulation source for ILS-GS modulation. INT is the internal modulation source. The external signal is input at the AM EXT connector. The external signal is added to the internal signal. Switching off the internal source is not possible.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS[:GS|GSLope]:SOURce INT | INT,EXT
        /// </summary>
        /// <param name="EXT_AM">
        /// Selects the modulation source for ILS-GS modulation.
        /// 
        /// Valid Values:
        /// RSSMA_ILSGSM_SRC_INT   (0) - Off
        /// RSSMA_ILSGSM_SRC_EXT   (1) - EXT (MOD AM)
        /// 
        /// Default Value: RSSMA_ILSGSM_SRC_INT  (0)
        /// 
        /// Notes:
        /// 
        /// (1) Off:
        /// Selects the internal modulation source for ILS-GS modulation.
        /// 
        /// (2) EXT (MOD AM):
        /// Selects the external source. The external signal is added to the internal signal. Switching off the internal source is not possible. The external signal is input via the AM EXT connector. The sensitivity is 10 mV per percent modulation depth.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetILSGSMEXTAM(int EXT_AM)
        {
            int pInvokeResult = PInvoke.SetILSGSMEXTAM(this._handle, EXT_AM);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the modulation source for ILS-GS modulation.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS[:GS|GSLope]:SOURce?
        /// </summary>
        /// <param name="EXT_AM">
        /// Returns the modulation source for ILS-GS modulation.
        /// 
        /// Valid Values:
        /// RSSMA_ILSGSM_SRC_INT   (0) - Off
        /// RSSMA_ILSGSM_SRC_EXT   (1) - EXT (MOD AM)
        /// 
        /// Notes:
        /// 
        /// (1) Off:
        /// Selects the internal modulation source for ILS-GS modulation.
        /// 
        /// (2) EXT (MOD AM):
        /// Selects the external source. The external signal is added to the internal signal. Switching off the internal source is not possible. The external signal is input via the AM EXT connector. The sensitivity is 10 mV per percent modulation depth.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetILSGSMEXTAM(out int EXT_AM)
        {
            int pInvokeResult = PInvoke.GetILSGSMEXTAM(this._handle, out EXT_AM);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the ILS-LOC modulation.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS:LOCalizer:STATe   ON | OFF
        /// [SOURce:]ILS:LOCalizer:MODE NORM | LLOBe | RLOBe
        /// [SOURce:]ILS:LOCalizer:DDM[:DEPTh] -0.4 to 0.4 PCT
        /// [SOURce:]ILS:LOCalizer:DDM:CURRent -967.75....+967.75 uA
        /// [SOURce:]ILS:LOCalizer:DDM:LOGarithmic -999.9 to + 999.9 dB
        /// [SOURce:]ILS:LOCalizer:DDM:DIRection LEFT | RIGHt
        /// [SOURce:]ILS:LOCalizer:SDM 0 to 100 PCT
        /// [SOURce:]ILS:LOCalizer:LLOBe[:FREQuency] 60 Hz to 120 Hz
        /// [SOURce:]ILS:LOCalizer:RLOBe[:FREQuency] 100 to 200 Hz
        /// [SOURce:]ILS:LOCalizer:PHASe 0 to 120 deg
        /// </summary>
        /// <param name="State">
        /// Activates/deactivates the ILS-LOC modulation.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <param name="Mode">
        /// Selects the operating mode for the ILS-LOC modulation signal.
        /// 
        /// Valid Values:
        /// RSSMA_ILSLOCM_MODE_NORM   (0) - Normal
        /// RSSMA_ILSLOCM_MODE_LLOB   (1) - 90 Hz
        /// RSSMA_ILSLOCM_MODE_RLOB   (2) - 150 Hz
        /// 
        /// Default Value: RSSMA_ILSLOCM_MODE_NORM  (0)
        /// 
        /// Notes:
        /// 
        /// (1) Normal:
        /// ILS-LOC modulation is active. 
        /// 
        /// (2) 90 Hz:
        /// Amplitude modulation of the output signal with the left lobe (90Hz) signal component of the ILS-LOC signal. The modulation depth of the 90Hz signal results from the settings of parameters Sum of depth (SDM) and DDM according to (parameter Fly = Right):
        /// AM(90 Hz) = 0,5 ? (SDM + DDM ? 100%)
        /// and (parameter Fly = Left):
        /// AM(90 Hz) = 0,5 ? (SDM - DDM ? 100%)
        /// 
        /// 
        /// 
        /// (3) 150 Hz:
        /// Amplitude modulation of the output signal with the right lobe (150Hz) signal component of the ILS-LOC signal. The modulation depth of the 150-Hz signal results from the settings of parameters Sum of depth (SDM) and DDM according to (parameter Fly = Right):
        /// AM (150 Hz) = 0,5 ? (SDM + DDM ? 100%)
        /// and (parameter Fly = Left):
        /// AM (150 Hz) = 0,5 ? (SDM - DDM ? 100%)
        /// </param>
        /// <param name="DDM_Depth">
        /// Sets the difference in depth of modulation between the signal of the left lobe (90 Hz) and the right lobe (150 Hz).
        /// 
        /// Valid Range: 
        /// -0.4 to 0.4 PCT
        /// 
        /// Default Value: 0 PCT
        /// 
        /// </param>
        /// <param name="DDM_Current">
        /// Sets the DDM value alternatively as a current by means of the ILS indicating instrument.
        /// 
        /// Valid Range: 
        /// -967.75....+967.75 uA
        /// 
        /// Default Value: 0 uA
        /// 
        /// </param>
        /// <param name="DDM_Logarithmic">
        /// Sets the DDM value in dB.
        /// 
        /// Valid Range: 
        /// -999.9 to + 999.9 dB
        /// 
        /// Default Value: 0 dB
        /// 
        /// </param>
        /// <param name="DDM_Direction">
        /// Selects the simulation mode for the ILS-LOC modulation signal.
        /// 
        /// Valid Values:
        /// RSSMA_ILSLOCM_DDM_DIR_LEFT    (0) - Left
        /// RSSMA_ILSLOCM_DDM_DIR_RIGHT   (1) - Right
        /// 
        /// Default Value: RSSMA_ILSLOCM_DDM_DIR_LEFT  (0)
        /// 
        /// Notes:
        /// 
        /// (1) Left:
        /// The 150-Hz modulation signal is predominant, the DDM value is negative (the airplane is too far to the right, it must turn to the left).
        /// 
        /// (2) Right:
        /// The 150-Hz modulation signal is predominant, the DDM value is negative (the airplane is too far to the right, it must turn to the left).
        /// </param>
        /// <param name="Sum_Of_Depth">
        /// Sets the arithmetic sum of the modulation depths  of the left lobe (90Hz) and right lobe (150Hz) ILS-LOC signal contents.
        /// 
        /// Valid Range: 
        /// 0 to 100 PCT
        /// 
        /// Default Value: 40 PCT
        /// 
        /// </param>
        /// <param name="Left_Frequency">
        /// Sets the modulation frequency of the antenna lobe arranged at the left viewed from the air plane.
        /// 
        /// Valid Range: 
        /// 60 to 120 Hz
        /// 
        /// Default Value: 90 PCT
        /// 
        /// </param>
        /// <param name="Right_Frequency">
        /// Sets the modulation frequency of the antenna lobe arranged at the right viewed from the air plane.antenna lobe arranged at the bottom viewed from the air plane.
        /// 
        /// Valid Range: 
        /// 100 to 200 Hz
        /// 
        /// Default Value: 150 PCT
        /// 
        /// </param>
        /// <param name="Left_Right_Phase">
        /// Sets the phase between the modulation signals of the left and right antenna lobe.
        /// 
        /// Valid Range: 
        /// 0 to 120 deg
        /// 
        /// Default Value: 0 deg
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureILSLOCModulation(bool State, int Mode, double DDM_Depth, double DDM_Current, double DDM_Logarithmic, int DDM_Direction, double Sum_Of_Depth, double Left_Frequency, double Right_Frequency, double Left_Right_Phase)
        {
            int pInvokeResult = PInvoke.ConfigureILSLOCModulation(this._handle, System.Convert.ToUInt16(State), Mode, DDM_Depth, DDM_Current, DDM_Logarithmic, DDM_Direction, Sum_Of_Depth, Left_Frequency, Right_Frequency, Left_Right_Phase);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the additional communication/identification signal.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS:LOCalizer:COMid[:STATe] ON | OFF
        /// [SOURce:]ILS:LOCalizer:COMid:CODE 'code'
        /// [SOURce:]ILS:LOCalizer:COMid:FREQuency 0.1 to 20 000 Hz
        /// [SOURce:]ILS:LOCalizer:COMid:DEPTh 0 to 100 PCT
        /// </summary>
        /// <param name="COM_ID_State">
        /// Switches on or off the additional communication/identification signal.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <param name="COM_ID_Code">
        /// Sets the coding of the COM/ID signal by the international short name of the airport
        /// 
        /// Valid Values:
        /// not checked
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <param name="COM_ID_Frequency">
        /// Sets the frequency of the communication/identification signal.
        /// 
        /// Valid Range: 
        /// 0.1 to 20 000 Hz
        /// 
        /// Default Value: 1020 Hz
        /// 
        /// </param>
        /// <param name="COM_ID_Depth">
        /// Sets the depth of the communication/identification signal.
        /// 
        /// Valid Range: 
        /// 0 to 100 PCT
        /// 
        /// Default Value: 10 PCT
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureILSLOCMCOMID(bool COM_ID_State, string COM_ID_Code, double COM_ID_Frequency, double COM_ID_Depth)
        {
            int pInvokeResult = PInvoke.ConfigureILSLOCMCOMID(this._handle, System.Convert.ToUInt16(COM_ID_State), COM_ID_Code, COM_ID_Frequency, COM_ID_Depth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates/deactivates the ILS-LOC modulation. Activation of ILS-LOC modulation deactivates AM, VOR, ILS-GS,
        /// Marker Beacon and ADF modulation.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS:LOCalizer:STATe   ON | OFF
        /// 
        /// </summary>
        /// <param name="State">
        /// Activates/deactivates the ILS-LOC modulation.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetILSLOCMState(bool State)
        {
            int pInvokeResult = PInvoke.SetILSLOCMState(this._handle, System.Convert.ToUInt16(State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the state of the ILS-LOC modulation. 
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS:LOCalizer:STATe?
        /// 
        /// </summary>
        /// <param name="State">
        /// Returns the state of the ILS-LOC modulation.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetILSLOCMState(out bool State)
        {
            ushort StateAsUShort;
            int pInvokeResult = PInvoke.GetILSLOCMState(this._handle, out StateAsUShort);
            State = System.Convert.ToBoolean(StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the operating mode for the ILS-LOC modulation signal.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS:LOCalizer:MODE NORM | LLOBe | RLOBe
        /// </summary>
        /// <param name="Mode">
        /// Selects the operating mode for the ILS-LOC modulation signal.
        /// 
        /// Valid Values:
        /// RSSMA_ILSLOCM_MODE_NORM   (0) - Normal
        /// RSSMA_ILSLOCM_MODE_LLOB   (1) - 90 Hz
        /// RSSMA_ILSLOCM_MODE_RLOB   (2) - 150 Hz
        /// 
        /// Default Value: RSSMA_ILSLOCM_MODE_NORM  (0)
        /// 
        /// Notes:
        /// 
        /// (1) Normal:
        /// ILS-LOC modulation is active. 
        /// 
        /// (2) 90 Hz:
        /// Amplitude modulation of the output signal with the left lobe (90Hz) signal component of the ILS-LOC signal. The modulation depth of the 90Hz signal results from the settings of parameters Sum of depth (SDM) and DDM according to (parameter Fly = Right):
        /// AM(90 Hz) = 0,5 ? (SDM + DDM ? 100%)
        /// and (parameter Fly = Left):
        /// AM(90 Hz) = 0,5 ? (SDM - DDM ? 100%)
        /// 
        /// 
        /// 
        /// (3) 150 Hz:
        /// Amplitude modulation of the output signal with the right lobe (150Hz) signal component of the ILS-LOC signal. The modulation depth of the 150-Hz signal results from the settings of parameters Sum of depth (SDM) and DDM according to (parameter Fly = Right):
        /// AM (150 Hz) = 0,5 ? (SDM + DDM ? 100%)
        /// and (parameter Fly = Left):
        /// AM (150 Hz) = 0,5 ? (SDM - DDM ? 100%)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetILSLOCMMode(int Mode)
        {
            int pInvokeResult = PInvoke.SetILSLOCMMode(this._handle, Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the operating mode for the ILS-LOC modulation signal.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS:LOCalizer:MODE?
        /// </summary>
        /// <param name="Mode">
        /// Returns the operating mode for the ILS-LOC modulation signal.
        /// 
        /// Valid Values:
        /// RSSMA_ILSLOCM_MODE_NORM   (0) - Normal
        /// RSSMA_ILSLOCM_MODE_LLOB   (1) - 90 Hz
        /// RSSMA_ILSLOCM_MODE_RLOB   (2) - 150 Hz
        /// 
        /// Notes:
        /// 
        /// (1) Normal:
        /// ILS-LOC modulation is active. 
        /// 
        /// (2) 90 Hz:
        /// Amplitude modulation of the output signal with the left lobe (90Hz) signal component of the ILS-LOC signal. The modulation depth of the 90Hz signal results from the settings of parameters Sum of depth (SDM) and DDM according to (parameter Fly = Right):
        /// AM(90 Hz) = 0,5 ? (SDM + DDM ? 100%)
        /// and (parameter Fly = Left):
        /// AM(90 Hz) = 0,5 ? (SDM - DDM ? 100%)
        /// 
        /// 
        /// 
        /// (3) 150 Hz:
        /// Amplitude modulation of the output signal with the right lobe (150Hz) signal component of the ILS-LOC signal. The modulation depth of the 150-Hz signal results from the settings of parameters Sum of depth (SDM) and DDM according to (parameter Fly = Right):
        /// AM (150 Hz) = 0,5 ? (SDM + DDM ? 100%)
        /// and (parameter Fly = Left):
        /// AM (150 Hz) = 0,5 ? (SDM - DDM ? 100%)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetILSLOCMMode(out int Mode)
        {
            int pInvokeResult = PInvoke.GetILSLOCMMode(this._handle, out Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the difference in depth of modulation between the signal of the left lobe (90 Hz) and the right lobe (150 Hz). 
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS:LOCalizer:DDM[:DEPTh] -0.4 to 0.4 PCT
        /// </summary>
        /// <param name="DDM_Depth">
        /// Sets the difference in depth of modulation between the signal of the left lobe (90 Hz) and the right lobe (150 Hz).
        /// 
        /// Valid Range: 
        /// -0.4 to 0.4 PCT
        /// 
        /// Default Value: 0 PCT
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetILSLOCMDDMDepth(double DDM_Depth)
        {
            int pInvokeResult = PInvoke.SetILSLOCMDDMDepth(this._handle, DDM_Depth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the difference in depth of modulation between the signal of the left lobe (90 Hz) and the right lobe (150 Hz). 
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS:LOCalizer:DDM[:DEPTh]?
        /// </summary>
        /// <param name="DDM_Depth">
        /// Gets the difference in depth of modulation between the signal of the left lobe (90 Hz) and the right lobe (150 Hz). 
        /// 
        /// Valid Range: 
        /// -0.4 to 0.4 PCT
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetILSLOCMDDMDepth(out double DDM_Depth)
        {
            int pInvokeResult = PInvoke.GetILSLOCMDDMDepth(this._handle, out DDM_Depth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the DDM value alternatively as a current by means of the ILS indicating instrument.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS:LOCalizer:DDM:CURRent -967.75....+967.75 uA
        /// </summary>
        /// <param name="DDM_Current">
        /// Sets the DDM value alternatively as a current by means of the ILS indicating instrument.
        /// 
        /// Valid Range: 
        /// -967.75....+967.75 uA
        /// 
        /// Default Value: 0 uA
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetILSLOCMDDMCurrent(double DDM_Current)
        {
            int pInvokeResult = PInvoke.SetILSLOCMDDMCurrent(this._handle, DDM_Current);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the DDM value alternatively as a current by means of the ILS indicating instrument.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS:LOCalizer:DDM:CURRent?
        /// </summary>
        /// <param name="DDM_Current">
        /// Gets the DDM value alternatively as a current by means of the ILS indicating instrument.
        /// 
        /// Valid Range: 
        /// -967.75....+967.75 uA
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetILSLOCMDDMCurrent(out double DDM_Current)
        {
            int pInvokeResult = PInvoke.GetILSLOCMDDMCurrent(this._handle, out DDM_Current);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the DDM value in dB.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS:LOCalizer:DDM:LOGarithmic -999.9 to + 999.9 dB
        /// </summary>
        /// <param name="DDM_Logarithmic">
        /// Sets the DDM value in dB.
        /// 
        /// Valid Range: 
        /// -999.9 to + 999.9 dB
        /// 
        /// Default Value: 0 dB
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetILSLOCMDDMLogarithmic(double DDM_Logarithmic)
        {
            int pInvokeResult = PInvoke.SetILSLOCMDDMLogarithmic(this._handle, DDM_Logarithmic);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the DDM value in dB.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS:LOCalizer:DDM:LOGarithmic?
        /// </summary>
        /// <param name="DDM_Logarithmic">
        /// Gets the DDM value in dB.
        /// 
        /// Valid Range: 
        /// -999.9 to + 999.9 dB
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetILSLOCMDDMLogarithmic(out double DDM_Logarithmic)
        {
            int pInvokeResult = PInvoke.GetILSLOCMDDMLogarithmic(this._handle, out DDM_Logarithmic);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects if the DDM value is fixed or is changed with a change of sum of modulation depths.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS:LOCalizer:DDM:COUPling FIXed | SDM
        /// </summary>
        /// <param name="DDM_Coupling">
        /// Selects if the DDM value is fixed or is changed with a change of sum of modulation depths.
        /// 
        /// Valid Values:
        /// RSSMA_ILS_DDM_COUP_FIXED (0) - Fixed
        /// RSSMA_ILS_DDM_COUP_SDM   (1) - Sum of Modulation Depths
        /// 
        /// Default Value: RSSMA_ILS_DDM_COUP_FIXED (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetILSLOCMDDMCoupling(int DDM_Coupling)
        {
            int pInvokeResult = PInvoke.SetILSLOCMDDMCoupling(this._handle, DDM_Coupling);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries whether the DDM value is fixed or is changed with a change of sum of modulation depths.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS:LOCalizer:DDM:COUPling?
        /// </summary>
        /// <param name="DDM_Coupling">
        /// Gets whether the DDM value is fixed or is changed with a change of sum of modulation depths.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetILSLOCMDDMCoupling(out int DDM_Coupling)
        {
            int pInvokeResult = PInvoke.GetILSLOCMDDMCoupling(this._handle, out DDM_Coupling);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function enters the difference in depth of modulation between the signal of the upper/left lobe (90 Hz) and the lower/right lobe (150 Hz).
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS:LOCalizer:DDM:PCT
        /// </summary>
        /// <param name="DDM_Percent">
        /// Enters the difference in depth of modulation between the signal of the upper/left lobe (90 Hz) and the lower/right lobe (150 Hz).
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 0 %
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetILSLOCMDDMPercent(int DDM_Percent)
        {
            int pInvokeResult = PInvoke.SetILSLOCMDDMPercent(this._handle, DDM_Percent);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the difference in depth of modulation between the signal of the upper/left lobe (90 Hz) and the lower/right lobe (150 Hz).
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS:LOCalizer:DDM:PCT?
        /// </summary>
        /// <param name="DDM_Percent">
        /// Returns the difference in depth of modulation between the signal of the upper/left lobe (90 Hz) and the lower/right lobe (150 Hz).
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetILSLOCMDDMPercent(out int DDM_Percent)
        {
            int pInvokeResult = PInvoke.GetILSLOCMDDMPercent(this._handle, out DDM_Percent);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function enters the polarity for DDM calculation (see DDM Depth).
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS:LOCalizer:DDM:POLarity P90_150 | P150_90
        /// </summary>
        /// <param name="DDM_Polarity">
        /// Enters the polarity for DDM calculation (see DDM Depth).
        /// 
        /// Valid Values:
        /// RSSMA_ILS_DDM_POL_P90_150 (0) - 90 Hz - 150 Hz
        /// RSSMA_ILS_DDM_POL_P150_90 (1) - 150 Hz - 90 Hz
        /// 
        /// Default Value: RSSMA_ILS_DDM_POL_P90_150 (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetILSLOCMDDMPolarity(int DDM_Polarity)
        {
            int pInvokeResult = PInvoke.SetILSLOCMDDMPolarity(this._handle, DDM_Polarity);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the polarity for DDM calculation (see DDM Depth).
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS:LOCalizer:DDM:POLarity?
        /// </summary>
        /// <param name="DDM_Polarity">
        /// Returns the polarity for DDM calculation (see DDM Depth).
        /// 
        /// Valid Values:
        /// RSSMA_ILS_DDM_POL_P90_150 (0) - 90 Hz - 150 Hz
        /// RSSMA_ILS_DDM_POL_P150_90 (1) - 150 Hz - 90 Hz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetILSLOCMDDMPolarity(out int DDM_Polarity)
        {
            int pInvokeResult = PInvoke.GetILSLOCMDDMPolarity(this._handle, out DDM_Polarity);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the simulation mode for the ILS-LOC modulation signal.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS:LOCalizer:DDM:DIRection LEFT | RIGHt
        /// </summary>
        /// <param name="DDM_Direction">
        /// Selects the simulation mode for the ILS-LOC modulation signal.
        /// 
        /// Valid Values:
        /// RSSMA_ILSLOCM_DDM_DIR_LEFT    (0) - Left
        /// RSSMA_ILSLOCM_DDM_DIR_RIGHT   (1) - Right
        /// 
        /// Default Value: RSSMA_ILSLOCM_DDM_DIR_LEFT  (0)
        /// 
        /// Notes:
        /// 
        /// (1) Left:
        /// The 150-Hz modulation signal is predominant, the DDM value is negative (the airplane is too far to the right, it must turn to the left).
        /// 
        /// (2) Right:
        /// The 150-Hz modulation signal is predominant, the DDM value is negative (the airplane is too far to the right, it must turn to the left).
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetILSLOCMFly(int DDM_Direction)
        {
            int pInvokeResult = PInvoke.SetILSLOCMFly(this._handle, DDM_Direction);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the simulation mode for the ILS-LOC modulation signal.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS:LOCalizer:DDM:DIRection?
        /// </summary>
        /// <param name="DDM_Direction">
        /// Returns the simulation mode for the ILS-LOC modulation signal.
        /// 
        /// Valid Values:
        /// RSSMA_ILSLOCM_DDM_DIR_LEFT    (0) - Left
        /// RSSMA_ILSLOCM_DDM_DIR_RIGHT   (1) - Right
        /// 
        /// Notes:
        /// 
        /// (1) Left:
        /// The 150-Hz modulation signal is predominant, the DDM value is negative (the airplane is too far to the right, it must turn to the left).
        /// 
        /// (2) Right:
        /// The 150-Hz modulation signal is predominant, the DDM value is negative (the airplane is too far to the right, it must turn to the left).
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetILSLOCMFly(out int DDM_Direction)
        {
            int pInvokeResult = PInvoke.GetILSLOCMFly(this._handle, out DDM_Direction);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the arithmetic sum of the modulation depths  of the left lobe (90Hz) and right lobe (150Hz) ILS-LOC signal contents. The RMS modulation depth of the sum signal depends on the phase setting of both modulation tones.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS:LOCalizer:SDM 0 to 100 PCT
        /// </summary>
        /// <param name="Sum_Of_Depth">
        /// Sets the arithmetic sum of the modulation depths  of the left lobe (90Hz) and right lobe (150Hz) ILS-LOC signal contents.
        /// 
        /// Valid Range: 
        /// 0 to 100 PCT
        /// 
        /// Default Value: 40 PCT
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetILSLOCMSumOfDepth(double Sum_Of_Depth)
        {
            int pInvokeResult = PInvoke.SetILSLOCMSumOfDepth(this._handle, Sum_Of_Depth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the arithmetic sum of the modulation depths  of the left lobe (90Hz) and right lobe (150Hz) ILS-LOC signal contents. The RMS modulation depth of the sum signal depends on the phase setting of both modulation tones.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS:LOCalizer:SDM?
        /// </summary>
        /// <param name="Sum_Of_Depth">
        /// Gets the arithmetic sum of the modulation depths  of the left lobe (90Hz) and right lobe (150Hz) ILS-LOC signal contents.
        /// 
        /// Valid Range: 
        /// 0 to 100 PCT
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetILSLOCMSumOfDepth(out double Sum_Of_Depth)
        {
            int pInvokeResult = PInvoke.GetILSLOCMSumOfDepth(this._handle, out Sum_Of_Depth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the modulation frequency of the antenna lobe arranged at the left viewed from the air plane.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS:LOCalizer:LLOBe[:FREQuency] 60 Hz to 120 Hz
        /// </summary>
        /// <param name="Left_Frequency">
        /// Sets the modulation frequency of the antenna lobe arranged at the left viewed from the air plane.
        /// 
        /// Valid Range: 
        /// 60 to 120 Hz
        /// 
        /// Default Value: 90 PCT
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetILSLOCMLeftFrequency(double Left_Frequency)
        {
            int pInvokeResult = PInvoke.SetILSLOCMLeftFrequency(this._handle, Left_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the modulation frequency of the antenna lobe arranged at the left viewed from the air plane.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS:LOCalizer:LLOBe[:FREQuency]?
        /// </summary>
        /// <param name="Left_Frequency">
        /// Gets the modulation frequency of the antenna lobe arranged at the left viewed from the air plane.
        /// 
        /// Valid Range: 
        /// 60 to 120 Hz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetILSLOCMLeftFrequency(out double Left_Frequency)
        {
            int pInvokeResult = PInvoke.GetILSLOCMLeftFrequency(this._handle, out Left_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the modulation frequency of the antenna lobe arranged at the right viewed from the air plane.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS:LOCalizer:RLOBe[:FREQuency] 100 to 200 Hz
        /// </summary>
        /// <param name="Right_Frequency">
        /// Sets the modulation frequency of the antenna lobe arranged at the right viewed from the air plane.antenna lobe arranged at the bottom viewed from the air plane.
        /// 
        /// Valid Range: 
        /// 100 to 200 Hz
        /// 
        /// Default Value: 150 PCT
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetILSLOCMRightFrequency(double Right_Frequency)
        {
            int pInvokeResult = PInvoke.SetILSLOCMRightFrequency(this._handle, Right_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the modulation frequency of the antenna lobe arranged at the right viewed from the air plane.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS:LOCalizer:RLOBe[:FREQuency]?
        /// </summary>
        /// <param name="Right_Frequency">
        /// Gets the modulation frequency of the antenna lobe arranged at the right viewed from the air plane.
        /// 
        /// Valid Range: 
        /// 100 to 200 Hz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetILSLOCMRightFrequency(out double Right_Frequency)
        {
            int pInvokeResult = PInvoke.GetILSLOCMRightFrequency(this._handle, out Right_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the phase between the modulation signals of the left and right antenna lobe. The zero crossing of the right lobe (150Hz) signal serves as a reference. The angle refers to the period of the signal of the right antenna lobe.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS:LOCalizer:PHASe 0 to 120 deg
        /// </summary>
        /// <param name="Left_Right_Phase">
        /// Sets the phase between the modulation signals of the left and right antenna lobe.
        /// 
        /// Valid Range: 
        /// 0 to 120 deg
        /// 
        /// Default Value: 0 deg
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetILSLOCMLeftRightPhase(double Left_Right_Phase)
        {
            int pInvokeResult = PInvoke.SetILSLOCMLeftRightPhase(this._handle, Left_Right_Phase);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the phase between the modulation signals of the left and right antenna lobe. The zero crossing of the right lobe (150Hz) signal serves as a reference. The angle refers to the period of the signal of the right antenna lobe.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS:LOCalizer:PHASe?
        /// </summary>
        /// <param name="Left_Right_Phase">
        /// Gets the phase between the modulation signals of the left and right antenna lobe.
        /// 
        /// Valid Range: 
        /// 0 to 120 deg
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetILSLOCMLeftRightPhase(out double Left_Right_Phase)
        {
            int pInvokeResult = PInvoke.GetILSLOCMLeftRightPhase(this._handle, out Left_Right_Phase);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activate the ILS-LOC default setting.
        /// 
        /// Note(s):
        /// 
        /// (1) 
        /// Parameter        Value
        ///  
        /// State            Not affected by Set to default
        /// Mode             Norm
        /// Source           Internal
        /// DDM              0
        /// Fly              Up
        /// Sum of Depth     80 Percent
        /// Left frequency   90 Hz
        /// Right Frequency  150 Hz
        /// Left/Right Phase 0 deg
        /// COM/ID State     Off
        /// COM/ID Frequency 1020 kHz
        /// COM/ID Depth     10 percent
        ///  
        /// 
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS:LOCalizer:PRESet
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetILSLOCMToDefault()
        {
            int pInvokeResult = PInvoke.SetILSLOCMToDefault(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function switches on or off the additional communication/identification signal.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS:LOCalizer:COMid[:STATe] ON | OFF
        /// 
        /// </summary>
        /// <param name="COM_ID_State">
        /// Switches on or off the additional communication/identification signal.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetILSLOCMCOMIDState(bool COM_ID_State)
        {
            int pInvokeResult = PInvoke.SetILSLOCMCOMIDState(this._handle, System.Convert.ToUInt16(COM_ID_State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the state of the additional communication/identification signal.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS:LOCalizer:COMid[:STATe]?
        /// </summary>
        /// <param name="COM_ID_State">
        /// Returns the state of the additional communication/identification signal.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetILSLOCMCOMIDState(out bool COM_ID_State)
        {
            ushort COM_ID_StateAsUShort;
            int pInvokeResult = PInvoke.GetILSLOCMCOMIDState(this._handle, out COM_ID_StateAsUShort);
            COM_ID_State = System.Convert.ToBoolean(COM_ID_StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the coding of the COM/ID signal by the international short name of the airport (e.g. MUC for the Munic airport). (COM/ID signal).
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS:LOCalizer:COMid:CODE 'code'
        /// </summary>
        /// <param name="COM_ID_Code">
        /// Sets the coding of the COM/ID signal by the international short name of the airport
        /// 
        /// Valid Values:
        /// not checked
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetILSLOCMCOMIDCode(string COM_ID_Code)
        {
            int pInvokeResult = PInvoke.SetILSLOCMCOMIDCode(this._handle, COM_ID_Code);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the coding of the COM/ID signal by the international short name of the airport (e.g. MUC for the Munic airport). (COM/ID signal).
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS:LOCalizer:COMid:CODE?
        /// </summary>
        /// <param name="COM_ID_Code">
        /// Gets the coding of the COM/ID signal by the international short name of the airport.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetILSLOCMCOMIDCode(System.Text.StringBuilder COM_ID_Code)
        {
            int pInvokeResult = PInvoke.GetILSLOCMCOMIDCode(this._handle, COM_ID_Code);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the frequency of the communication/identification signal.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS:LOCalizer:COMid:FREQuency 0.1 to 20 000 Hz
        /// </summary>
        /// <param name="COM_ID_Frequency">
        /// Sets the frequency of the communication/identification signal.
        /// 
        /// Valid Range: 
        /// 0.1 to 20 000 Hz
        /// 
        /// Default Value: 1020 Hz
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetILSLOCMCOMIDFrequency(double COM_ID_Frequency)
        {
            int pInvokeResult = PInvoke.SetILSLOCMCOMIDFrequency(this._handle, COM_ID_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the frequency of the communication/identification signal.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS:LOCalizer:COMid:FREQuency?
        /// </summary>
        /// <param name="COM_ID_Frequency">
        /// Gets the frequency of the communication/identification signal.
        /// 
        /// Valid Range: 
        /// 0.1 to 20 000 Hz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetILSLOCMCOMIDFrequency(out double COM_ID_Frequency)
        {
            int pInvokeResult = PInvoke.GetILSLOCMCOMIDFrequency(this._handle, out COM_ID_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the depth of the communication/identification signal.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS:LOCalizer:COMid:DEPTh 0 to 100 PCT
        /// </summary>
        /// <param name="COM_ID_Depth">
        /// Sets the depth of the communication/identification signal.
        /// 
        /// Valid Range: 
        /// 0 to 100 PCT
        /// 
        /// Default Value: 10 PCT
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetILSLOCMCOMIDDepth(double COM_ID_Depth)
        {
            int pInvokeResult = PInvoke.SetILSLOCMCOMIDDepth(this._handle, COM_ID_Depth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the depth of the communication/identification signal.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS:LOCalizer:COMid:DEPTh?
        /// </summary>
        /// <param name="COM_ID_Depth">
        /// Gets the depth of the communication/identification signal.
        /// 
        /// Valid Range: 
        /// 0 to 100 PCT
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetILSLOCMCOMIDDepth(out double COM_ID_Depth)
        {
            int pInvokeResult = PInvoke.GetILSLOCMCOMIDDepth(this._handle, out COM_ID_Depth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects if the set dot length determines the dash length (= three times the dot length) (setting STD) or if all length parameters can be set independently (setting USER. (COM/ID signal).
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS:LOCalizer:COMid:TSCHema STD | USER
        /// </summary>
        /// <param name="COM_ID_Time_Schema">
        /// Selects if the set dot length determines the dash length (= three times the dot length) (setting STD) or if all length parameters can be set independently (setting USER. (COM/ID signal).
        /// 
        /// Valid Range: 
        /// RSSMA_TIME_SCHEMA_STD  (0) - Standard
        /// RSSMA_TIME_SCHEMA_USER (1) - User
        /// 
        /// Default Value: RSSMA_TIME_SCHEMA_STD  (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetILSLOCMCOMIDTimeSchema(int COM_ID_Time_Schema)
        {
            int pInvokeResult = PInvoke.SetILSLOCMCOMIDTimeSchema(this._handle, COM_ID_Time_Schema);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns whether the set dot length is determined by the dash length (= three times the dot length) (setting STD) or all length parameters is set independently (setting USER. (COM/ID signal).
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS:LOCalizer:COMid:TSCHema?
        /// </summary>
        /// <param name="COM_ID_Time_Schema">
        /// Returns whether the set dot length is determined by the dash length (= three times the dot length) (setting STD) or all length parameters is set independently (setting USER. (COM/ID signal).
        /// 
        /// Valid Range: 
        /// RSSMA_TIME_SCHEMA_STD  (0) - Standard
        /// RSSMA_TIME_SCHEMA_USER (1) - User
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetILSLOCMCOMIDTimeSchema(out int COM_ID_Time_Schema)
        {
            int pInvokeResult = PInvoke.GetILSLOCMCOMIDTimeSchema(this._handle, out COM_ID_Time_Schema);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the length of a morse dash by means of seconds. This function is available for user time schema only (rssma_SetILSLOCMCOMIDTimeSchema).
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS:LOCalizer:COMid:DASH
        /// </summary>
        /// <param name="COM_ID_Dash_Length">
        /// Enters the length of a morse dash by means of seconds.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.3 s
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetILSLOCMCOMIDDashLength(double COM_ID_Dash_Length)
        {
            int pInvokeResult = PInvoke.SetILSLOCMCOMIDDashLength(this._handle, COM_ID_Dash_Length);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the length of a morse dash by means of seconds. This function is available for user time schema only (rssma_SetILSLOCMCOMIDTimeSchema).
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS:LOCalizer:COMid:DASH?
        /// </summary>
        /// <param name="COM_ID_Dash_Length">
        /// Returns the length of a morse dash by means of seconds.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetILSLOCMCOMIDDashLength(out double COM_ID_Dash_Length)
        {
            int pInvokeResult = PInvoke.GetILSLOCMCOMIDDashLength(this._handle, out COM_ID_Dash_Length);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the length of a morse dot by means of seconds. The length of the dash (3xdot), symbol space (=dot) and letter space (=3xdot) is also determined by this entry .
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS:LOCalizer:COMid:DOT
        /// </summary>
        /// <param name="COM_ID_Dot_Length">
        /// Enters the length of a morse dot by means of seconds.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.1 s
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetILSLOCMCOMIDDotLength(double COM_ID_Dot_Length)
        {
            int pInvokeResult = PInvoke.SetILSLOCMCOMIDDotLength(this._handle, COM_ID_Dot_Length);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the length of a morse dot by means of seconds.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS:LOCalizer:COMid:DOT?
        /// </summary>
        /// <param name="COM_ID_Dot_Length">
        /// Returns the length of a morse dot by means of seconds.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetILSLOCMCOMIDDotLength(out double COM_ID_Dot_Length)
        {
            int pInvokeResult = PInvoke.GetILSLOCMCOMIDDotLength(this._handle, out COM_ID_Dot_Length);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the length of a letter space by means of seconds. This function is available user time schema only (rssma_SetILSLOCMCOMIDTimeSchema).
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS:LOCalizer:COMid:LETTer
        /// </summary>
        /// <param name="COM_ID_Letter_Space">
        /// Enters the length of a letter space by means of seconds. 
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.3 s
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetILSLOCMCOMIDLetterSpace(double COM_ID_Letter_Space)
        {
            int pInvokeResult = PInvoke.SetILSLOCMCOMIDLetterSpace(this._handle, COM_ID_Letter_Space);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the length of a letter space by means of seconds. This function is available user time schema only (rssma_SetILSLOCMCOMIDTimeSchema).
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS:LOCalizer:COMid:LETTer?
        /// </summary>
        /// <param name="COM_ID_Letter_Space">
        /// Returns the length of a letter space by means of seconds.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetILSLOCMCOMIDLetterSpace(out double COM_ID_Letter_Space)
        {
            int pInvokeResult = PInvoke.GetILSLOCMCOMIDLetterSpace(this._handle, out COM_ID_Letter_Space);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the length of the symbol space by means of seconds. This function is available for user time schema only (rssma_SetILSLOCMCOMIDTimeSchema).
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS:LOCalizer:COMid:SYMBol
        /// </summary>
        /// <param name="COM_ID_Symbol_Space">
        /// Enters the length of the symbol space by means of seconds.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.1 s
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetILSLOCMCOMIDSymbolSpace(double COM_ID_Symbol_Space)
        {
            int pInvokeResult = PInvoke.SetILSLOCMCOMIDSymbolSpace(this._handle, COM_ID_Symbol_Space);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the length of the symbol space by means of seconds. This function is available for user time schema only (rssma_SetILSLOCMCOMIDTimeSchema).
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS:LOCalizer:COMid:SYMBol?
        /// </summary>
        /// <param name="COM_ID_Symbol_Space">
        /// Returns the length of the symbol space by means of seconds.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetILSLOCMCOMIDSymbolSpace(out double COM_ID_Symbol_Space)
        {
            int pInvokeResult = PInvoke.GetILSLOCMCOMIDSymbolSpace(this._handle, out COM_ID_Symbol_Space);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the period of the ID sequence by means of seconds. This function is available for reply mode only.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS:LOCalizer:COMid:PERiod
        /// </summary>
        /// <param name="Id_Period">
        /// Sets the period of the ID sequence by means of seconds.
        /// 
        /// Valid Values:
        /// 0 to 120 s
        /// 
        /// Default Value: 40s
        /// 
        /// Notes:
        /// (1) Resolution 1s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetILSLOCCOMIDPeriod(int Id_Period)
        {
            int pInvokeResult = PInvoke.SetILSLOCCOMIDPeriod(this._handle, Id_Period);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the period of the ID sequence by means of seconds. This function is available for reply mode only.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS:LOCalizer:COMid:PERiod?
        /// </summary>
        /// <param name="Id_Period">
        /// Returns the period of the ID sequence by means of seconds.
        /// 
        /// Valid Values:
        /// 0 to 120 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetILSLOCCOMIDPeriod(out int Id_Period)
        {
            int pInvokeResult = PInvoke.GetILSLOCCOMIDPeriod(this._handle, out Id_Period);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the variation of the carrier frequency.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS:LOCalizer:FREQuency:STEP   DECimal | ICAO
        /// </summary>
        /// <param name="Carrier_Frequency_Step">
        /// Selects the variation of the carrier frequency.
        /// 
        /// Valid Values:
        /// RSSMA_ILSGSM_FREQ_STEP_DEC  (0) - Decimal
        /// RSSMA_ILSGSM_FREQ_STEP_ICAO (1) - ICAO
        /// 
        /// Default Value: RSSMA_ILSGSM_FREQ_STEP_DEC  (0)
        /// 
        /// Notes:
        /// 
        /// (1) Decimal:
        /// Decimal variation according to the current cursor position. 
        /// 
        /// (2) ICAO:
        /// Variation in predefined steps according to the standardized ILS-GS/LOC transmitting frequencies. The start value can be selected with command ILS:GS|LOC:ICAO:CHANnel. The selection of the ICAO channel is effective on both ILS modulations. A  switch between the two modulations causes the RF frequency to be adapted to the associated value.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetILSLOCMCarrierFrequencyStep(int Carrier_Frequency_Step)
        {
            int pInvokeResult = PInvoke.SetILSLOCMCarrierFrequencyStep(this._handle, Carrier_Frequency_Step);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the variation of the carrier frequency.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS:LOCalizer:FREQuency:STEP?
        /// </summary>
        /// <param name="Carrier_Frequency_Step">
        /// Returns the variation of the carrier frequency.
        /// 
        /// Valid Values:
        /// RSSMA_ILSGSM_FREQ_STEP_DEC  (0) - Decimal
        /// RSSMA_ILSGSM_FREQ_STEP_ICAO (1) - ICAO
        /// 
        /// Notes:
        /// 
        /// (1) Decimal:
        /// Decimal variation according to the current cursor position. 
        /// 
        /// (2) ICAO:
        /// Variation in predefined steps according to the standardized ILS-GS/LOC transmitting frequencies. The start value can be selected with command ILS:GS|LOC:ICAO:CHANnel. The selection of the ICAO channel is effective on both ILS modulations. A  switch between the two modulations causes the RF frequency to be adapted to the associated value.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetILSLOCMCarrierFrequencyStep(out int Carrier_Frequency_Step)
        {
            int pInvokeResult = PInvoke.GetILSLOCMCarrierFrequencyStep(this._handle, out Carrier_Frequency_Step);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the ICAO channel  i.e, the ILS transmitting frequency. The RF-frequency is set to the value selected here. A variation of the carrier frequency by the rotary knob is performed in predefined steps  according to the standardized ILS transmitting frequencies. The ICAO channel settings for ILS-GS and ILS-LOC are coupled.
        /// 
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS:LOCalizer:ICAO:CHANnel CH18X | CH18Y | CH20X | CH20Y | CH22X | CH22Y | CH24X | CH24Y | CH26X | CH26Y | CH28X | CH28Y | CH30X | CH30Y | CH32X | CH32Y | CH34X | CH34Y | CH36X | CH36Y | CH38X | CH38Y | CH40X | CH40Y | CH42X | CH42Y | CH44X | CH44Y | CH46X | CH46Y | CH48X | CH48Y | CH50X | CH50Y | CH52X | CH52Y | CH54X | CH54Y | CH56X | CH56Y
        /// </summary>
        /// <param name="ICAO_Channel">
        /// Select the ICAO channel  i.e, the ILS transmitting frequency.
        /// 
        /// Valid Values:
        /// RSSMA_ILSGSM_ICAO_CHAN_18_X (0) - 18X
        /// RSSMA_ILSGSM_ICAO_CHAN_18_Y (1) - 18Y
        /// RSSMA_ILSGSM_ICAO_CHAN_20_X (2) - 20X
        /// RSSMA_ILSGSM_ICAO_CHAN_20_Y (3) - 20Y
        /// RSSMA_ILSGSM_ICAO_CHAN_22_X (4) - 22X
        /// RSSMA_ILSGSM_ICAO_CHAN_22_Y (5) - 22Y
        /// RSSMA_ILSGSM_ICAO_CHAN_24_X (6) - 24X
        /// RSSMA_ILSGSM_ICAO_CHAN_24_Y (7) - 24Y
        /// RSSMA_ILSGSM_ICAO_CHAN_26_X (8) - 26X
        /// RSSMA_ILSGSM_ICAO_CHAN_26_Y (9) - 26Y
        /// RSSMA_ILSGSM_ICAO_CHAN_28_X (10) - 28X
        /// RSSMA_ILSGSM_ICAO_CHAN_28_Y (11) - 28Y
        /// RSSMA_ILSGSM_ICAO_CHAN_30_X (12) - 30X
        /// RSSMA_ILSGSM_ICAO_CHAN_30_Y (13) - 30Y
        /// RSSMA_ILSGSM_ICAO_CHAN_32_X (14) - 32X
        /// RSSMA_ILSGSM_ICAO_CHAN_32_Y (15) - 32Y
        /// RSSMA_ILSGSM_ICAO_CHAN_34_X (16) - 34X
        /// RSSMA_ILSGSM_ICAO_CHAN_34_Y (17) - 34Y
        /// RSSMA_ILSGSM_ICAO_CHAN_36_X (18) - 36X
        /// RSSMA_ILSGSM_ICAO_CHAN_36_Y (19) - 36Y
        /// RSSMA_ILSGSM_ICAO_CHAN_38_X (20) - 38X
        /// RSSMA_ILSGSM_ICAO_CHAN_38_Y (21) - 38Y
        /// RSSMA_ILSGSM_ICAO_CHAN_40_X (22) - 40X
        /// RSSMA_ILSGSM_ICAO_CHAN_40_Y (23) - 40Y
        /// RSSMA_ILSGSM_ICAO_CHAN_42_X (24) - 42X
        /// RSSMA_ILSGSM_ICAO_CHAN_42_Y (25) - 42Y
        /// RSSMA_ILSGSM_ICAO_CHAN_44_X (26) - 44X
        /// RSSMA_ILSGSM_ICAO_CHAN_44_Y (27) - 44Y
        /// RSSMA_ILSGSM_ICAO_CHAN_46_X (28) - 46X
        /// RSSMA_ILSGSM_ICAO_CHAN_46_Y (29) - 46Y
        /// RSSMA_ILSGSM_ICAO_CHAN_48_X (30) - 48X
        /// RSSMA_ILSGSM_ICAO_CHAN_48_Y (31) - 48Y
        /// RSSMA_ILSGSM_ICAO_CHAN_50_X (32) - 50X
        /// RSSMA_ILSGSM_ICAO_CHAN_50_Y (33) - 50Y
        /// RSSMA_ILSGSM_ICAO_CHAN_52_X (34) - 52X
        /// RSSMA_ILSGSM_ICAO_CHAN_52_Y (35) - 52Y
        /// RSSMA_ILSGSM_ICAO_CHAN_54_X (36) - 54X
        /// RSSMA_ILSGSM_ICAO_CHAN_54_Y (37) - 54Y
        /// RSSMA_ILSGSM_ICAO_CHAN_56_X (38) - 56X
        /// RSSMA_ILSGSM_ICAO_CHAN_56_Y (39) - 56Y
        /// 
        /// Default Value: RSSMA_ILSGSM_ICAO_CHAN_18_X  (0)
        /// 
        /// Notes:
        /// 
        /// (1) 
        /// Channel: RF Frequency (ILS-GS) / RF Frequency (ILS-LOC)
        /// units: MHz
        /// 
        /// 18X:     334.7  / 108.1 
        /// 18Y:     108.15 / 334.55
        /// 20X:     108.30 / 334.10
        /// 20Y:     108.35 / 333.95
        /// 22X:     108.50 / 329.90
        /// 22Y:     108.55 / 329.75
        /// 24X:     108.70 / 330.50
        /// 24Y:     108.75 / 330.35
        /// 26X:     108.90 / 329.30
        /// 26Y:     108.95 / 329.15
        /// 28X:     109.10 / 331.40
        /// 28Y:     109.15 / 331.25
        /// 30X:     109.30 / 332.00
        /// 30Y:     109.35 / 331.85
        /// 32X:     109.50 / 332.60
        /// 32Y:     109.55 / 332.45
        /// 34X:     109.70 / 333.20
        /// 34Y:     109.75 / 333.05
        /// 36X:     109.90 / 333.80
        /// 36Y:     109.95 / 333.65
        /// 38X:     110.10 / 334.40
        /// 38Y:     110.15 / 334.25
        /// 40X:     110.30 / 335.00
        /// 40Y:     110.35 / 334.85
        /// 42X:     110.50 / 329.60
        /// 42Y:     110.55 / 329.45
        /// 44X:     110.70 / 330.20
        /// 44Y:     110.75 / 330.05
        /// 46X:     110.90 / 330.80
        /// 46Y:     110.95 / 330.65
        /// 48X:     111.10 / 331.70
        /// 48Y:     111.15 / 331.55
        /// 50X:     111.30 / 332.30
        /// 50Y:     111.35 / 332.15
        /// 52X:     111.50 / 332.90
        /// 52Y:     111.55 / 332.75
        /// 54X:     111.70 / 333.50
        /// 54Y:     111.75 / 333.35
        /// 56X:     111.90 / 331.10
        /// 56Y:     111.95 / 330.95
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetILSLOCMICAOChannel(int ICAO_Channel)
        {
            int pInvokeResult = PInvoke.SetILSLOCMICAOChannel(this._handle, ICAO_Channel);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the ICAO channel  i.e, the ILS transmitting frequency. 
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS:LOCalizer:ICAO:CHANnel?
        /// </summary>
        /// <param name="ICAO_Channel">
        /// Returns the ICAO channel  i.e, the ILS transmitting frequency.
        /// 
        /// Valid Values:
        /// RSSMA_ILSGSM_ICAO_CHAN_18_X (0) - 18X
        /// RSSMA_ILSGSM_ICAO_CHAN_18_Y (1) - 18Y
        /// RSSMA_ILSGSM_ICAO_CHAN_20_X (2) - 20X
        /// RSSMA_ILSGSM_ICAO_CHAN_20_Y (3) - 20Y
        /// RSSMA_ILSGSM_ICAO_CHAN_22_X (4) - 22X
        /// RSSMA_ILSGSM_ICAO_CHAN_22_Y (5) - 22Y
        /// RSSMA_ILSGSM_ICAO_CHAN_24_X (6) - 24X
        /// RSSMA_ILSGSM_ICAO_CHAN_24_Y (7) - 24Y
        /// RSSMA_ILSGSM_ICAO_CHAN_26_X (8) - 26X
        /// RSSMA_ILSGSM_ICAO_CHAN_26_Y (9) - 26Y
        /// RSSMA_ILSGSM_ICAO_CHAN_28_X (10) - 28X
        /// RSSMA_ILSGSM_ICAO_CHAN_28_Y (11) - 28Y
        /// RSSMA_ILSGSM_ICAO_CHAN_30_X (12) - 30X
        /// RSSMA_ILSGSM_ICAO_CHAN_30_Y (13) - 30Y
        /// RSSMA_ILSGSM_ICAO_CHAN_32_X (14) - 32X
        /// RSSMA_ILSGSM_ICAO_CHAN_32_Y (15) - 32Y
        /// RSSMA_ILSGSM_ICAO_CHAN_34_X (16) - 34X
        /// RSSMA_ILSGSM_ICAO_CHAN_34_Y (17) - 34Y
        /// RSSMA_ILSGSM_ICAO_CHAN_36_X (18) - 36X
        /// RSSMA_ILSGSM_ICAO_CHAN_36_Y (19) - 36Y
        /// RSSMA_ILSGSM_ICAO_CHAN_38_X (20) - 38X
        /// RSSMA_ILSGSM_ICAO_CHAN_38_Y (21) - 38Y
        /// RSSMA_ILSGSM_ICAO_CHAN_40_X (22) - 40X
        /// RSSMA_ILSGSM_ICAO_CHAN_40_Y (23) - 40Y
        /// RSSMA_ILSGSM_ICAO_CHAN_42_X (24) - 42X
        /// RSSMA_ILSGSM_ICAO_CHAN_42_Y (25) - 42Y
        /// RSSMA_ILSGSM_ICAO_CHAN_44_X (26) - 44X
        /// RSSMA_ILSGSM_ICAO_CHAN_44_Y (27) - 44Y
        /// RSSMA_ILSGSM_ICAO_CHAN_46_X (28) - 46X
        /// RSSMA_ILSGSM_ICAO_CHAN_46_Y (29) - 46Y
        /// RSSMA_ILSGSM_ICAO_CHAN_48_X (30) - 48X
        /// RSSMA_ILSGSM_ICAO_CHAN_48_Y (31) - 48Y
        /// RSSMA_ILSGSM_ICAO_CHAN_50_X (32) - 50X
        /// RSSMA_ILSGSM_ICAO_CHAN_50_Y (33) - 50Y
        /// RSSMA_ILSGSM_ICAO_CHAN_52_X (34) - 52X
        /// RSSMA_ILSGSM_ICAO_CHAN_52_Y (35) - 52Y
        /// RSSMA_ILSGSM_ICAO_CHAN_54_X (36) - 54X
        /// RSSMA_ILSGSM_ICAO_CHAN_54_Y (37) - 54Y
        /// RSSMA_ILSGSM_ICAO_CHAN_56_X (38) - 56X
        /// RSSMA_ILSGSM_ICAO_CHAN_56_Y (39) - 56Y
        /// 
        /// Notes:
        /// 
        /// (1) 
        /// Channel: RF Frequency (ILS-GS) / RF Frequency (ILS-LOC)
        /// units: MHz
        /// 
        /// 18X:     334.7  / 108.1 
        /// 18Y:     108.15 / 334.55
        /// 20X:     108.30 / 334.10
        /// 20Y:     108.35 / 333.95
        /// 22X:     108.50 / 329.90
        /// 22Y:     108.55 / 329.75
        /// 24X:     108.70 / 330.50
        /// 24Y:     108.75 / 330.35
        /// 26X:     108.90 / 329.30
        /// 26Y:     108.95 / 329.15
        /// 28X:     109.10 / 331.40
        /// 28Y:     109.15 / 331.25
        /// 30X:     109.30 / 332.00
        /// 30Y:     109.35 / 331.85
        /// 32X:     109.50 / 332.60
        /// 32Y:     109.55 / 332.45
        /// 34X:     109.70 / 333.20
        /// 34Y:     109.75 / 333.05
        /// 36X:     109.90 / 333.80
        /// 36Y:     109.95 / 333.65
        /// 38X:     110.10 / 334.40
        /// 38Y:     110.15 / 334.25
        /// 40X:     110.30 / 335.00
        /// 40Y:     110.35 / 334.85
        /// 42X:     110.50 / 329.60
        /// 42Y:     110.55 / 329.45
        /// 44X:     110.70 / 330.20
        /// 44Y:     110.75 / 330.05
        /// 46X:     110.90 / 330.80
        /// 46Y:     110.95 / 330.65
        /// 48X:     111.10 / 331.70
        /// 48Y:     111.15 / 331.55
        /// 50X:     111.30 / 332.30
        /// 50Y:     111.35 / 332.15
        /// 52X:     111.50 / 332.90
        /// 52Y:     111.55 / 332.75
        /// 54X:     111.70 / 333.50
        /// 54Y:     111.75 / 333.35
        /// 56X:     111.90 / 331.10
        /// 56Y:     111.95 / 330.95
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetILSLOCMICAOChannel(out int ICAO_Channel)
        {
            int pInvokeResult = PInvoke.GetILSLOCMICAOChannel(this._handle, out ICAO_Channel);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the modulation source for ILS-LOC modulation. INT is the internal modulation source. The external signal is input at the AM EXT connector. The external signal is added to the internal signal. Switching off the internal source is not possible.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS:LOCalizer:SOURce INT | INT,EXT
        /// </summary>
        /// <param name="EXT_AM">
        /// Selects the modulation source for ILS-LOC modulation.
        /// 
        /// Valid Values:
        /// RSSMA_ILSGSM_SRC_INT   (0) - Off
        /// RSSMA_ILSGSM_SRC_EXT   (1) - EXT (MOD AM)
        /// 
        /// Default Value: RSSMA_ILSGSM_SRC_INT  (0)
        /// 
        /// Notes:
        /// 
        /// (1) Off:
        /// Selects the internal modulation source for ILS-LOC modulation.
        /// 
        /// (2) EXT (MOD AM):
        /// Selects the external source. The external signal is added to the internal signal. Switching off the internal source is not possible. The external signal is input via the AM EXT connector. The sensitivity is 10 mV per percent modulation depth.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetILSLOCMEXTAM(int EXT_AM)
        {
            int pInvokeResult = PInvoke.SetILSLOCMEXTAM(this._handle, EXT_AM);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the modulation source for ILS-LOC modulation.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ILS:LOCalizer:SOURce?
        /// </summary>
        /// <param name="EXT_AM">
        /// Returns the modulation source for ILS-LOC modulation.
        /// 
        /// Valid Values:
        /// RSSMA_ILSGSM_SRC_INT   (0) - Off
        /// RSSMA_ILSGSM_SRC_EXT   (1) - EXT (MOD AM)
        /// 
        /// Notes:
        /// 
        /// (1) Off:
        /// Selects the internal modulation source for ILS-LOC modulation.
        /// 
        /// (2) EXT (MOD AM):
        /// Selects the external source. The external signal is added to the internal signal. Switching off the internal source is not possible. The external signal is input via the AM EXT connector. The sensitivity is 10 mV per percent modulation depth.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetILSLOCMEXTAM(out int EXT_AM)
        {
            int pInvokeResult = PInvoke.GetILSLOCMEXTAM(this._handle, out EXT_AM);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the Marker Beacon modulation.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]MBEacon:STATe ON | OFF
        /// [SOURce:]MBEacon[:MARKer]:FREQuency 400Hz | 1300Hz | 3000Hz
        /// [SOURce:]MBEacon[:MARKer]:DEPTh 0 to 100 PCT
        /// [SOURce:]MBEacon[:MARKer]:PULSe ON | OFF
        /// </summary>
        /// <param name="State">
        /// Activates/deactivates the Marker Beacon modulation.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <param name="Marker_Frequency">
        /// Selects the modulation frequency of the marker signal.
        /// 
        /// Valid Values:
        /// RSSMA_MBM_MARKER_FREQ_400  (0) - 400 Hz
        /// RSSMA_MBM_MARKER_FREQ_1300 (1) - 1300 Hz
        /// RSSMA_MBM_MARKER_FREQ_3000 (2) - 3000 Hz
        /// 
        /// Default Value: RSSMA_MBM_MARKER_FREQ_400  (0)
        /// </param>
        /// <param name="Marker_Depth">
        /// Selects the modulation depth of the marker signal.
        /// 
        /// Valid Values:
        /// 0 to 100 PCT
        /// 
        /// Default Value: 95.0 PCT
        /// </param>
        /// <param name="Pulsed_Marker">
        /// Activates/deactivates the pulsed marker.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// Note(s):
        /// 
        /// (1) On:
        /// The markers are output with the following on/off ratio:
        /// Outer Marker (400 Hz): 375 ms on, 125 ms off, ...
        /// Middle Marker (1300 Hz): 375 ms on, 125 ms off, 83 ms on, 83 ms off, ...
        /// Inner Marker (3000 Hz): 83 ms on, 83 ms off (6dots/sec)
        /// 
        /// (2) Off:
        /// The markers are output uncoded (key down).
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureMBModulation(bool State, int Marker_Frequency, double Marker_Depth, bool Pulsed_Marker)
        {
            int pInvokeResult = PInvoke.ConfigureMBModulation(this._handle, System.Convert.ToUInt16(State), Marker_Frequency, Marker_Depth, System.Convert.ToUInt16(Pulsed_Marker));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the additional communication/identification signal.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]MBEacon:COMid[:STATe] ON | OFF
        /// [SOURce:]MBEacon:COMid:CODE 'code'
        /// [SOURce:]MBEacon:COMid:FREQuency 0.1 to 20 000 Hz
        /// [SOURce:]MBEacon:COMid:DEPTh 0 to 100 PCT
        /// </summary>
        /// <param name="COM_ID_State">
        /// Switches on or off the additional communication/identification signal.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <param name="COM_ID_Code">
        /// Sets the coding of the COM/ID signal by the international short name of the airport
        /// 
        /// Valid Values:
        /// not checked
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <param name="COM_ID_Frequency">
        /// Sets the frequency of the communication/identification signal.
        /// 
        /// Valid Range: 
        /// 0.1 to 20 000 Hz
        /// 
        /// Default Value: 1020 Hz
        /// 
        /// </param>
        /// <param name="COM_ID_Depth">
        /// Sets the depth of the communication/identification signal.
        /// 
        /// Valid Range: 
        /// 0 to 100 PCT
        /// 
        /// Default Value: 10 PCT
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureMBMCOMID(bool COM_ID_State, string COM_ID_Code, double COM_ID_Frequency, double COM_ID_Depth)
        {
            int pInvokeResult = PInvoke.ConfigureMBMCOMID(this._handle, System.Convert.ToUInt16(COM_ID_State), COM_ID_Code, COM_ID_Frequency, COM_ID_Depth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates/deactivates the Marker Beacon modulation. Activation of Marker Beacon modulation deactivates AM, VOR, ILS and ADF modulation.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]MBEacon:STATe ON | OFF
        /// 
        /// </summary>
        /// <param name="State">
        /// Activates/deactivates the Marker Beacon modulation.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetMBMState(bool State)
        {
            int pInvokeResult = PInvoke.SetMBMState(this._handle, System.Convert.ToUInt16(State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the state of the Marker Beacon modulation. 
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]MBEacon:STATe?
        /// 
        /// </summary>
        /// <param name="State">
        /// Returns the state of the Marker Beacon modulation.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetMBMState(out bool State)
        {
            ushort StateAsUShort;
            int pInvokeResult = PInvoke.GetMBMState(this._handle, out StateAsUShort);
            State = System.Convert.ToBoolean(StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the modulation frequency of the marker signal.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]MBEacon[:MARKer]:FREQuency 400Hz | 1300Hz | 3000Hz
        /// </summary>
        /// <param name="Marker_Frequency">
        /// Selects the modulation frequency of the marker signal.
        /// 
        /// Valid Values:
        /// RSSMA_MBM_MARKER_FREQ_400  (0) - 400 Hz
        /// RSSMA_MBM_MARKER_FREQ_1300 (1) - 1300 Hz
        /// RSSMA_MBM_MARKER_FREQ_3000 (2) - 3000 Hz
        /// 
        /// Default Value: RSSMA_MBM_MARKER_FREQ_400  (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetMBMMarkerFrequency(int Marker_Frequency)
        {
            int pInvokeResult = PInvoke.SetMBMMarkerFrequency(this._handle, Marker_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the modulation frequency of the marker signal.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]MBEacon[:MARKer]:FREQuency?
        /// </summary>
        /// <param name="Marker_Frequency">
        /// Returns the modulation frequency of the marker signal.
        /// 
        /// Valid Values:
        /// RSSMA_MBM_MARKER_FREQ_400  (0) - 400 Hz
        /// RSSMA_MBM_MARKER_FREQ_1300 (1) - 1300 Hz
        /// RSSMA_MBM_MARKER_FREQ_3000 (2) - 3000 Hz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetMBMMarkerFrequency(out int Marker_Frequency)
        {
            int pInvokeResult = PInvoke.GetMBMMarkerFrequency(this._handle, out Marker_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the modulation depth of the marker signal.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]MBEacon[:MARKer]:DEPTh 0 to 100 PCT
        /// </summary>
        /// <param name="Marker_Depth">
        /// Selects the modulation depth of the marker signal.
        /// 
        /// Valid Values:
        /// 0 to 100 PCT
        /// 
        /// Default Value: 95.0 PCT
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetMBMMarkerDepth(double Marker_Depth)
        {
            int pInvokeResult = PInvoke.SetMBMMarkerDepth(this._handle, Marker_Depth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the modulation depth of the marker signal.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]MBEacon[:MARKer]:DEPTh?
        /// </summary>
        /// <param name="Marker_Depth">
        /// Returns the modulation depth of the marker signal.
        /// 
        /// Valid Values:
        /// 0 to 100 PCT
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetMBMMarkerDepth(out double Marker_Depth)
        {
            int pInvokeResult = PInvoke.GetMBMMarkerDepth(this._handle, out Marker_Depth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates/deactivates the pulsed marker.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]MBEacon[:MARKer]:PULSe ON | OFF
        /// 
        /// </summary>
        /// <param name="Pulsed_Marker">
        /// Activates/deactivates the pulsed marker.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// Note(s):
        /// 
        /// (1) On:
        /// The markers are output with the following on/off ratio:
        /// Outer Marker (400 Hz): 375 ms on, 125 ms off, ...
        /// Middle Marker (1300 Hz): 375 ms on, 125 ms off, 83 ms on, 83 ms off, ...
        /// Inner Marker (3000 Hz): 83 ms on, 83 ms off (6dots/sec)
        /// 
        /// (2) Off:
        /// The markers are output uncoded (key down).
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetMBMPulsedMarker(bool Pulsed_Marker)
        {
            int pInvokeResult = PInvoke.SetMBMPulsedMarker(this._handle, System.Convert.ToUInt16(Pulsed_Marker));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the state of the pulsed marker.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]MBEacon[:MARKer]:PULSe?
        /// </summary>
        /// <param name="Pulsed_Marker">
        /// Returns the state of the pulsed marker.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Note(s):
        /// 
        /// (1) On:
        /// The markers are output with the following on/off ratio:
        /// Outer Marker (400 Hz): 375 ms on, 125 ms off, ...
        /// Middle Marker (1300 Hz): 375 ms on, 125 ms off, 83 ms on, 83 ms off, ...
        /// Inner Marker (3000 Hz): 83 ms on, 83 ms off (6dots/sec)
        /// 
        /// (2) Off:
        /// The markers are output uncoded (key down).
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetMBMPulsedMarker(out bool Pulsed_Marker)
        {
            ushort Pulsed_MarkerAsUShort;
            int pInvokeResult = PInvoke.GetMBMPulsedMarker(this._handle, out Pulsed_MarkerAsUShort);
            Pulsed_Marker = System.Convert.ToBoolean(Pulsed_MarkerAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function switches on or off the additional communication/identification signal.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]MBEacon:COMid[:STATe] ON | OFF
        /// 
        /// </summary>
        /// <param name="COM_ID_State">
        /// Switches on or off the additional communication/identification signal.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetMBMCOMIDState(bool COM_ID_State)
        {
            int pInvokeResult = PInvoke.SetMBMCOMIDState(this._handle, System.Convert.ToUInt16(COM_ID_State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the state of the additional communication/identification signal.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]MBEacon:COMid[:STATe]?
        /// </summary>
        /// <param name="COM_ID_State">
        /// Returns the state of the additional communication/identification signal.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetMBMCOMIDState(out bool COM_ID_State)
        {
            ushort COM_ID_StateAsUShort;
            int pInvokeResult = PInvoke.GetMBMCOMIDState(this._handle, out COM_ID_StateAsUShort);
            COM_ID_State = System.Convert.ToBoolean(COM_ID_StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the coding of the COM/ID signal by the international short name of the airport (e.g. MUC for the Munic airport). (COM/ID signal).
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]MBEacon:COMid:CODE 'code'
        /// </summary>
        /// <param name="COM_ID_Code">
        /// Sets the coding of the COM/ID signal by the international short name of the airport
        /// 
        /// Valid Values:
        /// not checked
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetMBMCOMIDCode(string COM_ID_Code)
        {
            int pInvokeResult = PInvoke.SetMBMCOMIDCode(this._handle, COM_ID_Code);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the coding of the COM/ID signal by the international short name of the airport (e.g. MUC for the Munic airport). (COM/ID signal).
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]MBEacon:COMid:CODE?
        /// </summary>
        /// <param name="COM_ID_Code">
        /// Gets the coding of the COM/ID signal by the international short name of the airport.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetMBMCOMIDCode(System.Text.StringBuilder COM_ID_Code)
        {
            int pInvokeResult = PInvoke.GetMBMCOMIDCode(this._handle, COM_ID_Code);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the frequency of the communication/identification signal.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]MBEacon:COMid:FREQuency 0.1 to 20 000 Hz
        /// </summary>
        /// <param name="COM_ID_Frequency">
        /// Sets the frequency of the communication/identification signal.
        /// 
        /// Valid Range: 
        /// 0.1 to 20 000 Hz
        /// 
        /// Default Value: 1020 Hz
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetMBMCOMIDFrequency(double COM_ID_Frequency)
        {
            int pInvokeResult = PInvoke.SetMBMCOMIDFrequency(this._handle, COM_ID_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the frequency of the communication/identification signal.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]MBEacon:COMid:FREQuency?
        /// </summary>
        /// <param name="COM_ID_Frequency">
        /// Gets the frequency of the communication/identification signal.
        /// 
        /// Valid Range: 
        /// 0.1 to 20 000 Hz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetMBMCOMIDFrequency(out double COM_ID_Frequency)
        {
            int pInvokeResult = PInvoke.GetMBMCOMIDFrequency(this._handle, out COM_ID_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the depth of the communication/identification signal.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]MBEacon:COMid:DEPTh 0 to 100 PCT
        /// </summary>
        /// <param name="COM_ID_Depth">
        /// Sets the depth of the communication/identification signal.
        /// 
        /// Valid Range: 
        /// 0 to 100 PCT
        /// 
        /// Default Value: 10 PCT
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetMBMCOMIDDepth(double COM_ID_Depth)
        {
            int pInvokeResult = PInvoke.SetMBMCOMIDDepth(this._handle, COM_ID_Depth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the depth of the communication/identification signal.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]MBEacon:COMid:DEPTh?
        /// </summary>
        /// <param name="COM_ID_Depth">
        /// Gets the depth of the communication/identification signal.
        /// 
        /// Valid Range: 
        /// 0 to 100 PCT
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetMBMCOMIDDepth(out double COM_ID_Depth)
        {
            int pInvokeResult = PInvoke.GetMBMCOMIDDepth(this._handle, out COM_ID_Depth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects if the set dot length determines the dash length (= three times the dot length) (setting STD) or if all length parameters can be set independently (setting USER. (COM/ID signal).
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]MBEacon:COMid:TSCHema STD | USER
        /// </summary>
        /// <param name="COM_ID_Time_Schema">
        /// Selects if the set dot length determines the dash length (= three times the dot length) (setting STD) or if all length parameters can be set independently (setting USER. (COM/ID signal).
        /// 
        /// Valid Range: 
        /// RSSMA_TIME_SCHEMA_STD  (0) - Standard
        /// RSSMA_TIME_SCHEMA_USER (1) - User
        /// 
        /// Default Value: RSSMA_TIME_SCHEMA_STD  (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetMBMCOMIDTimeSchema(int COM_ID_Time_Schema)
        {
            int pInvokeResult = PInvoke.SetMBMCOMIDTimeSchema(this._handle, COM_ID_Time_Schema);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns whether the set dot length is determined by the dash length (= three times the dot length) (setting STD) or all length parameters is set independently (setting USER. (COM/ID signal).
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]MBEacon:COMid:TSCHema?
        /// </summary>
        /// <param name="COM_ID_Time_Schema">
        /// Returns whether the set dot length is determined by the dash length (= three times the dot length) (setting STD) or all length parameters is set independently (setting USER. (COM/ID signal).
        /// 
        /// Valid Range: 
        /// RSSMA_TIME_SCHEMA_STD  (0) - Standard
        /// RSSMA_TIME_SCHEMA_USER (1) - User
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetMBMCOMIDTimeSchema(out int COM_ID_Time_Schema)
        {
            int pInvokeResult = PInvoke.GetMBMCOMIDTimeSchema(this._handle, out COM_ID_Time_Schema);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the length of a morse dash by means of seconds. This function is available for user time schema only (rssma_SetMBMCOMIDTimeSchema).
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]MBEacon:COMid:DASH
        /// </summary>
        /// <param name="COM_ID_Dash_Length">
        /// Enters the length of a morse dash by means of seconds.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.3 s
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetMBMCOMIDDashLength(double COM_ID_Dash_Length)
        {
            int pInvokeResult = PInvoke.SetMBMCOMIDDashLength(this._handle, COM_ID_Dash_Length);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the length of a morse dash by means of seconds. This function is available for user time schema only (rssma_SetMBMCOMIDTimeSchema).
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]MBEacon:COMid:DASH?
        /// </summary>
        /// <param name="COM_ID_Dash_Length">
        /// Returns the length of a morse dash by means of seconds.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetMBMCOMIDDashLength(out double COM_ID_Dash_Length)
        {
            int pInvokeResult = PInvoke.GetMBMCOMIDDashLength(this._handle, out COM_ID_Dash_Length);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the length of a morse dot by means of seconds. The length of the dash (3xdot), symbol space (=dot) and letter space (=3xdot) is also determined by this entry .
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]MBEacon:COMid:DOT
        /// </summary>
        /// <param name="COM_ID_Dot_Length">
        /// Enters the length of a morse dot by means of seconds.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.1 s
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetMBMCOMIDDotLength(double COM_ID_Dot_Length)
        {
            int pInvokeResult = PInvoke.SetMBMCOMIDDotLength(this._handle, COM_ID_Dot_Length);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the length of a morse dot by means of seconds.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]MBEacon:COMid:DOT?
        /// </summary>
        /// <param name="COM_ID_Dot_Length">
        /// Returns the length of a morse dot by means of seconds.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetMBMCOMIDDotLength(out double COM_ID_Dot_Length)
        {
            int pInvokeResult = PInvoke.GetMBMCOMIDDotLength(this._handle, out COM_ID_Dot_Length);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the length of a letter space by means of seconds. This function is available user time schema only (rssma_SetMBMCOMIDTimeSchema).
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]MBEacon:COMid:LETTer
        /// </summary>
        /// <param name="COM_ID_Letter_Space">
        /// Enters the length of a letter space by means of seconds. 
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.3 s
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetMBMCOMIDLetterSpace(double COM_ID_Letter_Space)
        {
            int pInvokeResult = PInvoke.SetMBMCOMIDLetterSpace(this._handle, COM_ID_Letter_Space);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the length of a letter space by means of seconds. This function is available user time schema only (rssma_SetMBMCOMIDTimeSchema).
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]MBEacon:COMid:LETTer?
        /// </summary>
        /// <param name="COM_ID_Letter_Space">
        /// Returns the length of a letter space by means of seconds.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetMBMCOMIDLetterSpace(out double COM_ID_Letter_Space)
        {
            int pInvokeResult = PInvoke.GetMBMCOMIDLetterSpace(this._handle, out COM_ID_Letter_Space);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the length of the symbol space by means of seconds. This function is available for user time schema only (rssma_SetMBMCOMIDTimeSchema).
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]MBEacon:COMid:SYMBol
        /// </summary>
        /// <param name="COM_ID_Symbol_Space">
        /// Enters the length of the symbol space by means of seconds.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.1 s
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetMBMCOMIDSymbolSpace(double COM_ID_Symbol_Space)
        {
            int pInvokeResult = PInvoke.SetMBMCOMIDSymbolSpace(this._handle, COM_ID_Symbol_Space);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the length of the symbol space by means of seconds. This function is available for user time schema only (rssma_SetMBMCOMIDTimeSchema).
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]MBEacon:COMid:SYMBol?
        /// </summary>
        /// <param name="COM_ID_Symbol_Space">
        /// Returns the length of the symbol space by means of seconds.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetMBMCOMIDSymbolSpace(out double COM_ID_Symbol_Space)
        {
            int pInvokeResult = PInvoke.GetMBMCOMIDSymbolSpace(this._handle, out COM_ID_Symbol_Space);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the period of the COM/ID signal in seconds.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [:SOURce]:MBEacon:COMid:PERiod
        /// </summary>
        /// <param name="Id_Period">
        /// Sets the period of the ID sequence by means of seconds.
        /// 
        /// Valid Values:
        /// 0 to 120 s
        /// 
        /// Default Value: 9s
        /// 
        /// Notes:
        /// (1) Resolution 1ms
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetMBMCOMIDPeriod(double Id_Period)
        {
            int pInvokeResult = PInvoke.SetMBMCOMIDPeriod(this._handle, Id_Period);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the period of the COM/ID signal in seconds.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [:SOURce]:MBEacon:COMid:PERiod?
        /// </summary>
        /// <param name="Id_Period">
        /// Returns the period of the ID sequence by means of seconds.
        /// 
        /// Valid Values:
        /// 0 to 120 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetMBMCOMIDPeriod(out double Id_Period)
        {
            int pInvokeResult = PInvoke.GetMBMCOMIDPeriod(this._handle, out Id_Period);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activate the Marker Beacon default setting.
        /// 
        /// Note(s):
        /// 
        /// (1) 
        /// Parameter        Value
        /// State            Off
        /// Source           Internal
        /// Marker frequency 400 Hz
        /// Marker Depth     95 %
        /// COM/ID State     Off
        /// COM/ID Frequency 1020 kHz
        /// COM/ID Depth     10 percent
        /// Rf frequency     75 MHz
        ///  
        /// 
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]MBEacon:PRESet
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetMBMToDefault()
        {
            int pInvokeResult = PInvoke.SetMBMToDefault(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the additional communication/identification signal.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ADF:COMid[:STATe] ON | OFF
        /// [SOURce:]ADF:COMid:CODE 'code'
        /// [SOURce:]ADF:COMid:FREQuency 0.1 to 20 000 Hz
        /// [SOURce:]ADF:COMid:DEPTh 0 to 100 PCT
        /// </summary>
        /// <param name="COM_ID_State">
        /// Switches on or off the additional communication/identification signal.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <param name="COM_ID_Code">
        /// Sets the coding of the COM/ID signal by the international short name of the airport
        /// 
        /// Valid Values:
        /// not checked
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <param name="COM_ID_Frequency">
        /// Sets the frequency of the communication/identification signal.
        /// 
        /// Valid Range: 
        /// 0.1 to 20 000 Hz
        /// 
        /// Default Value: 1020 Hz
        /// 
        /// </param>
        /// <param name="COM_ID_Depth">
        /// Sets the depth of the communication/identification signal.
        /// 
        /// Valid Range: 
        /// 0 to 100 PCT
        /// 
        /// Default Value: 10 PCT
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureADFMCOMID(bool COM_ID_State, string COM_ID_Code, double COM_ID_Frequency, double COM_ID_Depth)
        {
            int pInvokeResult = PInvoke.ConfigureADFMCOMID(this._handle, System.Convert.ToUInt16(COM_ID_State), COM_ID_Code, COM_ID_Frequency, COM_ID_Depth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates/deactivates the ADF modulation. A unmodulated carrier with a frequency of 190 kHz (default) is generated. After switching on the COM/ID tone the carrier is modulated with 95 percent AM depth at a 1,02 kHz modulation rate. Activation of ADF modulation deactivates AM, VOR, ILS and Marker Beacon modulation.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ADF:[:STATe] ON | OFF
        /// 
        /// </summary>
        /// <param name="State">
        /// Activates/deactivates the ADF modulation.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetADFMState(bool State)
        {
            int pInvokeResult = PInvoke.SetADFMState(this._handle, System.Convert.ToUInt16(State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the state of the ADF modulation.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ADF:[:STATe]?
        /// </summary>
        /// <param name="State">
        /// Returns the state of the ADF modulation.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetADFMState(out bool State)
        {
            ushort StateAsUShort;
            int pInvokeResult = PInvoke.GetADFMState(this._handle, out StateAsUShort);
            State = System.Convert.ToBoolean(StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function switches on or off the additional communication/identification signal.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ADF:COMid[:STATe] ON | OFF
        /// 
        /// </summary>
        /// <param name="COM_ID_State">
        /// Switches on or off the additional communication/identification signal.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetADFMCOMIDState(bool COM_ID_State)
        {
            int pInvokeResult = PInvoke.SetADFMCOMIDState(this._handle, System.Convert.ToUInt16(COM_ID_State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the state of the additional communication/identification signal.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ADF:COMid[:STATe]?
        /// </summary>
        /// <param name="COM_ID_State">
        /// Returns the state of the additional communication/identification signal.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetADFMCOMIDState(out bool COM_ID_State)
        {
            ushort COM_ID_StateAsUShort;
            int pInvokeResult = PInvoke.GetADFMCOMIDState(this._handle, out COM_ID_StateAsUShort);
            COM_ID_State = System.Convert.ToBoolean(COM_ID_StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the coding of the COM/ID signal by the international short name of the airport (e.g. MUC for the Munic airport). (COM/ID signal).
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ADF:COMid:CODE 'code'
        /// </summary>
        /// <param name="COM_ID_Code">
        /// Sets the coding of the COM/ID signal by the international short name of the airport
        /// 
        /// Valid Values:
        /// not checked
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetADFMCOMIDCode(string COM_ID_Code)
        {
            int pInvokeResult = PInvoke.SetADFMCOMIDCode(this._handle, COM_ID_Code);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the coding of the COM/ID signal by the international short name of the airport (e.g. MUC for the Munic airport). (COM/ID signal).
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ADF:COMid:CODE?
        /// </summary>
        /// <param name="COM_ID_Code">
        /// Gets the coding of the COM/ID signal by the international short name of the airport.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetADFMCOMIDCode(System.Text.StringBuilder COM_ID_Code)
        {
            int pInvokeResult = PInvoke.GetADFMCOMIDCode(this._handle, COM_ID_Code);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the frequency of the communication/identification signal.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ADF:COMid:FREQuency 0.1 to 20 000 Hz
        /// </summary>
        /// <param name="COM_ID_Frequency">
        /// Sets the frequency of the communication/identification signal.
        /// 
        /// Valid Range: 
        /// 0.1 to 20 000 Hz
        /// 
        /// Default Value: 1020 Hz
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetADFMCOMIDFrequency(double COM_ID_Frequency)
        {
            int pInvokeResult = PInvoke.SetADFMCOMIDFrequency(this._handle, COM_ID_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the frequency of the communication/identification signal.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ADF:COMid:FREQuency?
        /// </summary>
        /// <param name="COM_ID_Frequency">
        /// Gets the frequency of the communication/identification signal.
        /// 
        /// Valid Range: 
        /// 0.1 to 20 000 Hz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetADFMCOMIDFrequency(out double COM_ID_Frequency)
        {
            int pInvokeResult = PInvoke.GetADFMCOMIDFrequency(this._handle, out COM_ID_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the depth of the communication/identification signal.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ADF:COMid:DEPTh 0 to 100 PCT
        /// </summary>
        /// <param name="COM_ID_Depth">
        /// Sets the depth of the communication/identification signal.
        /// 
        /// Valid Range: 
        /// 0 to 100 PCT
        /// 
        /// Default Value: 10 PCT
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetADFMCOMIDDepth(double COM_ID_Depth)
        {
            int pInvokeResult = PInvoke.SetADFMCOMIDDepth(this._handle, COM_ID_Depth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the depth of the communication/identification signal.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ADF:COMid:DEPTh?
        /// </summary>
        /// <param name="COM_ID_Depth">
        /// Gets the depth of the communication/identification signal.
        /// 
        /// Valid Range: 
        /// 0 to 100 PCT
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetADFMCOMIDDepth(out double COM_ID_Depth)
        {
            int pInvokeResult = PInvoke.GetADFMCOMIDDepth(this._handle, out COM_ID_Depth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects if the set dot length determines the dash length (= three times the dot length) (setting STD) or if all length parameters can be set independently (setting USER. (COM/ID signal).
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ADF:COMid:TSCHema STD | USER
        /// </summary>
        /// <param name="COM_ID_Time_Schema">
        /// Selects if the set dot length determines the dash length (= three times the dot length) (setting STD) or if all length parameters can be set independently (setting USER. (COM/ID signal).
        /// 
        /// Valid Range: 
        /// RSSMA_TIME_SCHEMA_STD  (0) - Standard
        /// RSSMA_TIME_SCHEMA_USER (1) - User
        /// 
        /// Default Value: RSSMA_TIME_SCHEMA_STD  (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetADFMCOMIDTimeSchema(int COM_ID_Time_Schema)
        {
            int pInvokeResult = PInvoke.SetADFMCOMIDTimeSchema(this._handle, COM_ID_Time_Schema);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns whether the set dot length is determined by the dash length (= three times the dot length) (setting STD) or all length parameters is set independently (setting USER. (COM/ID signal).
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ADF:COMid:TSCHema?
        /// </summary>
        /// <param name="COM_ID_Time_Schema">
        /// Returns whether the set dot length is determined by the dash length (= three times the dot length) (setting STD) or all length parameters is set independently (setting USER. (COM/ID signal).
        /// 
        /// Valid Range: 
        /// RSSMA_TIME_SCHEMA_STD  (0) - Standard
        /// RSSMA_TIME_SCHEMA_USER (1) - User
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetADFMCOMIDTimeSchema(out int COM_ID_Time_Schema)
        {
            int pInvokeResult = PInvoke.GetADFMCOMIDTimeSchema(this._handle, out COM_ID_Time_Schema);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the length of a morse dash by means of seconds. This function is available for user time schema only (rssma_SetADFMCOMIDTimeSchema).
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ADF:COMid:DASH
        /// </summary>
        /// <param name="COM_ID_Dash_Length">
        /// Enters the length of a morse dash by means of seconds.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.3 s
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetADFMCOMIDDashLength(double COM_ID_Dash_Length)
        {
            int pInvokeResult = PInvoke.SetADFMCOMIDDashLength(this._handle, COM_ID_Dash_Length);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the length of a morse dash by means of seconds. This function is available for user time schema only (rssma_SetADFMCOMIDTimeSchema).
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ADF:COMid:DASH?
        /// </summary>
        /// <param name="COM_ID_Dash_Length">
        /// Returns the length of a morse dash by means of seconds.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetADFMCOMIDDashLength(out double COM_ID_Dash_Length)
        {
            int pInvokeResult = PInvoke.GetADFMCOMIDDashLength(this._handle, out COM_ID_Dash_Length);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the length of a morse dot by means of seconds. The length of the dash (3xdot), symbol space (=dot) and letter space (=3xdot) is also determined by this entry .
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ADF:COMid:DOT
        /// </summary>
        /// <param name="COM_ID_Dot_Length">
        /// Enters the length of a morse dot by means of seconds.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.1 s
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetADFMCOMIDDotLength(double COM_ID_Dot_Length)
        {
            int pInvokeResult = PInvoke.SetADFMCOMIDDotLength(this._handle, COM_ID_Dot_Length);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the length of a morse dot by means of seconds.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ADF:COMid:DOT?
        /// </summary>
        /// <param name="COM_ID_Dot_Length">
        /// Returns the length of a morse dot by means of seconds.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetADFMCOMIDDotLength(out double COM_ID_Dot_Length)
        {
            int pInvokeResult = PInvoke.GetADFMCOMIDDotLength(this._handle, out COM_ID_Dot_Length);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the length of a letter space by means of seconds. This function is available user time schema only (rssma_SetADFMCOMIDTimeSchema).
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ADF:COMid:LETTer
        /// </summary>
        /// <param name="COM_ID_Letter_Space">
        /// Enters the length of a letter space by means of seconds. 
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.3 s
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetADFMCOMIDLetterSpace(double COM_ID_Letter_Space)
        {
            int pInvokeResult = PInvoke.SetADFMCOMIDLetterSpace(this._handle, COM_ID_Letter_Space);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the length of a letter space by means of seconds. This function is available user time schema only (rssma_SetADFMCOMIDTimeSchema).
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ADF:COMid:LETTer?
        /// </summary>
        /// <param name="COM_ID_Letter_Space">
        /// Returns the length of a letter space by means of seconds.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetADFMCOMIDLetterSpace(out double COM_ID_Letter_Space)
        {
            int pInvokeResult = PInvoke.GetADFMCOMIDLetterSpace(this._handle, out COM_ID_Letter_Space);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the length of the symbol space by means of seconds. This function is available for user time schema only (rssma_SetADFMCOMIDTimeSchema).
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ADF:COMid:SYMBol
        /// </summary>
        /// <param name="COM_ID_Symbol_Space">
        /// Enters the length of the symbol space by means of seconds.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.1 s
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetADFMCOMIDSymbolSpace(double COM_ID_Symbol_Space)
        {
            int pInvokeResult = PInvoke.SetADFMCOMIDSymbolSpace(this._handle, COM_ID_Symbol_Space);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the length of the symbol space by means of seconds. This function is available for user time schema only (rssma_SetADFMCOMIDTimeSchema).
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ADF:COMid:SYMBol?
        /// </summary>
        /// <param name="COM_ID_Symbol_Space">
        /// Returns the length of the symbol space by means of seconds.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetADFMCOMIDSymbolSpace(out double COM_ID_Symbol_Space)
        {
            int pInvokeResult = PInvoke.GetADFMCOMIDSymbolSpace(this._handle, out COM_ID_Symbol_Space);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the period of the ID sequence by means of seconds. This function is available for reply mode only.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ADF:COM:PERiod
        /// </summary>
        /// <param name="Id_Period">
        /// Sets the period of the ID sequence by means of seconds.
        /// 
        /// Valid Values:
        /// 0 to 120 s
        /// 
        /// Default Value: 9s
        /// 
        /// Notes:
        /// (1) Resolution 1s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetADFMCOMIDPeriod(int Id_Period)
        {
            int pInvokeResult = PInvoke.SetADFMCOMIDPeriod(this._handle, Id_Period);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the period of the ID sequence by means of seconds. This function is available for reply mode only.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K25
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ADF:COM:PERiod?
        /// </summary>
        /// <param name="Id_Period">
        /// Returns the period of the ID sequence by means of seconds.
        /// 
        /// Valid Values:
        /// 0 to 120 s
        /// 
        /// Default Value: 40s
        /// 
        /// Notes:
        /// (1) Resolution 1s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetADFMCOMIDPeriod(out int Id_Period)
        {
            int pInvokeResult = PInvoke.GetADFMCOMIDPeriod(this._handle, out Id_Period);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the generation of modulation chirps.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is only available with option R&amp;S SMA-K20/23, K20/22 and interface board 1400.0530.02 or 1400.0552.02
        /// 
        /// Remote-control command(s):
        /// [SOURce:]CHIRp:STATe 
        /// [SOURce:]CHIRp:BANDwidth
        /// [SOURce:]CHIRp:PULSe:PERiod
        /// [SOURce:]CHIRp:PULSe:WIDTh
        /// [SOURce:]CHIRp:TRIGger:EXTernal:MODE
        /// [SOURce:]CHIRp:TRIGger:EXTernal:SLOPe
        /// [SOURce:]CHIRp:TRIGger:EXTernal:IMPedance
        /// </summary>
        /// <param name="CHRIP_State">
        /// Activates/deactivates the generation of modulation chirps.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <param name="Direction">
        /// This control selects the direction of the chirp modulation.
        /// 
        /// Valid Values:
        /// RSSMA_CHIRP_DIRECTION_UP   (0) - Up
        /// RSSMA_CHIRP_DIRECTION_DOWN (1) - Down
        /// 
        /// Default Value: RSSMA_CHIRP_DIRECTION_UP   (0)
        /// 
        /// </param>
        /// <param name="Bandwidth">
        /// This control sets the modulation bandwidth of the modulation chirp in Hz. The maximal  bandwidth depends on the RF frequency set and the selected modulation mode (see data sheet).
        /// 
        /// Valid Values:
        /// 0 Hz to 80 MHz
        /// 
        /// Default Value: 1E3 Hz
        /// 
        /// </param>
        /// <param name="Pulse_Period">
        /// This control sets the period of the generated modulation chirp. The period determines the repetition frequency of the internal signal. 
        /// 
        /// 
        /// Valid Values:
        /// 200 ns to 100 s
        /// 
        /// Default Value: 1.0e-3 s
        /// 
        /// </param>
        /// <param name="Pulse_Width">
        /// This control sets the width of the generated pulse. The pulse width must be at least 1us less than the set pulse period.
        /// 
        /// Valid Values:
        /// 100 ns to 100 s
        /// 
        /// Default Value: 0.5e-3 s
        /// 
        /// </param>
        /// <param name="Trigger_Mode">
        /// This control selects the trigger mode for modulation chirp. 
        /// 
        /// 
        /// Valid Values:
        /// RSSMA_CHIRP_TRIGGER_MODE_AUTO  (0) - Auto
        /// RSSMA_CHIRP_TRIGGER_MODE_EXT   (1) - External
        /// RSSMA_CHIRP_TRIGGER_MODE_EGAT  (2) - Egate
        /// 
        /// Default Value: RSSMA_CHIRP_TRIGGER_MODE_AUTO (0)
        /// 
        /// </param>
        /// <param name="Trigger_Slope">
        /// Selects between positive and negative slope.
        /// 
        /// Valid Values:
        /// RSSMA_CHIRP_TRIGGER_SLOPE_POS (0) - Positive
        /// RSSMA_CHIRP_TRIGGER_SLOPE_NEG (1) - Negative
        /// 
        /// Default Value: RSSMA_CHIRP_TRIGGER_SLOPE_POS (0)
        /// 
        /// </param>
        /// <param name="Impedance">
        /// This control set the impedance for external feed via the PULSE EXT input 
        /// 
        /// 
        /// Valid Values:
        /// RSSMA_CHIRP_IMPEDANCE_G10K (0) - G10k
        /// RSSMA_CHIRP_IMPEDANCE_G50  (1) - G50
        /// 
        /// Default Value: RSSMA_CHIRP_IMPEDANCE_G50 (1)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int confCHIRP(bool CHRIP_State, int Direction, double Bandwidth, double Pulse_Period, double Pulse_Width, int Trigger_Mode, int Trigger_Slope, int Impedance)
        {
            int pInvokeResult = PInvoke.confCHIRP(this._handle, System.Convert.ToUInt16(CHRIP_State), Direction, Bandwidth, Pulse_Period, Pulse_Width, Trigger_Mode, Trigger_Slope, Impedance);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the trigger for modulation chirp. 
        /// 
        /// Note(s):
        /// 
        /// (1) This function is only available with option R&amp;S SMA-K20/22, R&amp;S SMA-K20/23 and interface board 1400.0530.02 or 1400.0552.02
        /// 
        /// Remote-control command(s):
        /// [SOURce:]CHIRp:TRIGger:EXTernal:SLOPe
        /// [SOURce:]CHIRp:TRIGger:EXTernal:GATE:POLarity
        /// [SOURce:]CHIRp:TRIGger:EXTernal:IMPedance
        /// [SOURce:]CHIRp:TRIGger:EXTernal:MODE
        /// </summary>
        /// <param name="Trigger_Slope">
        /// Selects between positive and negative slope.
        /// 
        /// Valid Values:
        /// RSSMA_CHIRP_TRIGGER_SLOPE_POS (0) - Positive
        /// RSSMA_CHIRP_TRIGGER_SLOPE_NEG (1) - Negative
        /// 
        /// Default Value: RSSMA_CHIRP_TRIGGER_SLOPE_POS (0)
        /// 
        /// </param>
        /// <param name="Gate_Polarity">
        /// This control selects the active level of the gate signal.
        /// 
        /// Valid Values:
        /// RSSMA_CHIRP_GATE_POLARITY_INV  (0) - Inverted
        /// RSSMA_CHIRP_GATE_POLARITY_NORM (1) - Normal
        /// 
        /// Default Value: RSSMA_CHIRP_GATE_POLARITY_NORM (1)
        /// 
        /// </param>
        /// <param name="Impedance">
        /// This control set the impedance for external feed via the PULSE EXT input 
        /// 
        /// 
        /// Valid Values:
        /// RSSMA_CHIRP_IMPEDANCE_G10K (0) - G10k
        /// RSSMA_CHIRP_IMPEDANCE_G50  (1) - G50
        /// 
        /// Default Value: RSSMA_CHIRP_IMPEDANCE_G50 (1)
        /// 
        /// </param>
        /// <param name="Trigger_Mode">
        /// This control selects the trigger mode for modulation chirp. 
        /// 
        /// 
        /// Valid Values:
        /// RSSMA_CHIRP_TRIGGER_MODE_AUTO  (0) - Auto
        /// RSSMA_CHIRP_TRIGGER_MODE_EXT   (1) - External
        /// RSSMA_CHIRP_TRIGGER_MODE_EGAT  (2) - Egate
        /// 
        /// Default Value: RSSMA_CHIRP_TRIGGER_MODE_AUTO (0)
        /// 
        /// </param>
        /// <param name="Trigger_Level">
        /// This control is reserved for future use.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int confCHIRPTrigger(int Trigger_Slope, int Gate_Polarity, int Impedance, int Trigger_Mode, int Trigger_Level)
        {
            int pInvokeResult = PInvoke.confCHIRPTrigger(this._handle, Trigger_Slope, Gate_Polarity, Impedance, Trigger_Mode, Trigger_Level);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the trigger mode for modulation chirp. 
        /// 
        /// Note(s):
        /// 
        /// (1) This function is only available with option R&amp;S SMA-K20/22 and interface board 1400.0530.02 or 1400.0552.02
        /// 
        /// Remote-control command(s):
        /// [SOURce:]CHIRp:TRIGger:EXTernal:MODE
        /// </summary>
        /// <param name="Trigger_Mode">
        /// This control selects the trigger mode for modulation chirp. 
        /// 
        /// 
        /// Valid Values:
        /// RSSMA_CHIRP_TRIGGER_MODE_AUTO  (0) - Auto
        /// RSSMA_CHIRP_TRIGGER_MODE_EXT   (1) - External
        /// RSSMA_CHIRP_TRIGGER_MODE_EGAT  (2) - Egate
        /// 
        /// Default Value: RSSMA_CHIRP_TRIGGER_MODE_AUTO (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetCHIRPTriggerMode(int Trigger_Mode)
        {
            int pInvokeResult = PInvoke.SetCHIRPTriggerMode(this._handle, Trigger_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the trigger mode for modulation chirp. 
        /// 
        /// Note(s):
        /// 
        /// (1) This function is only available with option R&amp;S SMA-K20/22 and interface board 1400.0530.02 or 1400.0552.02
        /// 
        /// Remote-control command(s):
        /// [SOURce:]CHIRp:TRIGger:EXTernal:MODE?
        /// </summary>
        /// <param name="Trigger_Mode">
        /// This control displays the trigger mode for modulation chirp. 
        /// 
        /// 
        /// Valid Values:
        /// RSSMA_CHIRP_TRIGGER_MODE_AUTO  (0) - Auto
        /// RSSMA_CHIRP_TRIGGER_MODE_EXT   (1) - External
        /// RSSMA_CHIRP_TRIGGER_MODE_EGAT  (2) - Egate
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetCHIRPTriggerMode(out int Trigger_Mode)
        {
            int pInvokeResult = PInvoke.GetCHIRPTriggerMode(this._handle, out Trigger_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the active slope of an externally applied trigger signal at the PULSE EXT input (BNC connector at the rear of the instrument).
        /// 
        /// Note(s):
        /// 
        /// (1) This function is only available with option R&amp;S SMA-K20/22 and interface board 1400.0530.02 or 1400.0552.02
        /// 
        /// Remote-control command(s):
        /// [SOURce:]CHIRp:TRIGger:EXTernal:SLOPe
        /// </summary>
        /// <param name="Trigger_Slope">
        /// Selects between positive and negative slope.
        /// 
        /// Valid Values:
        /// RSSMA_CHIRP_TRIGGER_SLOPE_POS (0) - Positive
        /// RSSMA_CHIRP_TRIGGER_SLOPE_NEG (1) - Negative
        /// 
        /// Default Value: RSSMA_CHIRP_TRIGGER_SLOPE_POS (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetCHIRPTriggerSlope(int Trigger_Slope)
        {
            int pInvokeResult = PInvoke.SetCHIRPTriggerSlope(this._handle, Trigger_Slope);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function return the active slope of an externally applied trigger signal at the PULSE EXT input (BNC connector at the rear of the instrument).
        /// 
        /// Note(s):
        /// 
        /// (1) This function is only available with option R&amp;S SMA-K20/22 and interface board 1400.0530.02 or 1400.0552.02
        /// 
        /// Remote-control command(s):
        /// [SOURce:]CHIRp:TRIGger:EXTernal:SLOPe?
        /// </summary>
        /// <param name="Trigger_Slope">
        /// Displays positive or negative slope.
        /// 
        /// Valid Values:
        /// RSSMA_CHIRP_TRIGGER_SLOPE_POS (0) - Positive
        /// RSSMA_CHIRP_TRIGGER_SLOPE_NEG (1) - Negative
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetCHIRPTriggerSlope(out int Trigger_Slope)
        {
            int pInvokeResult = PInvoke.GetCHIRPTriggerSlope(this._handle, out Trigger_Slope);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the active level of the gate signal.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is only available with option R&amp;S SMA-K20/23 and interface board 1400.0530.02 or 1400.0552.02
        /// 
        /// Remote-control command(s):
        /// [SOURce:]CHIRp:TRIGger:EXTernal:GATE:POLarity
        /// </summary>
        /// <param name="Gate_Polarity">
        /// This control selects the active level of the gate signal.
        /// 
        /// Valid Values:
        /// RSSMA_CHIRP_GATE_POLARITY_INV  (0) - Inverted
        /// RSSMA_CHIRP_GATE_POLARITY_NORM (1) - Normal
        /// 
        /// Default Value: RSSMA_CHIRP_GATE_POLARITY_NORM (1)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetCHIRPGatePolarity(int Gate_Polarity)
        {
            int pInvokeResult = PInvoke.SetCHIRPGatePolarity(this._handle, Gate_Polarity);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the active level of the gate signal.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is only available with option R&amp;S SMA-K20/23 and interface board 1400.0530.02 or 1400.0552.02
        /// 
        /// Remote-control command(s):
        /// [SOURce:]CHIRp:TRIGger:EXTernal:GATE:POLarity?
        /// </summary>
        /// <param name="Gate_Polarity">
        /// This control displays the active level of the gate signal.
        /// 
        /// Valid Values:
        /// RSSMA_CHIRP_GATE_POLARITY_INV  (0) - Inverted
        /// RSSMA_CHIRP_GATE_POLARITY_NORM (1) - Normal
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetCHIRPGatePolarity(out int Gate_Polarity)
        {
            int pInvokeResult = PInvoke.GetCHIRPGatePolarity(this._handle, out Gate_Polarity);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function set the impedance for external feed via the PULSE EXT input 
        /// 
        /// Note(s):
        /// 
        /// (1) This function is only available with option R&amp;S SMA-K20/22 and interface board 1400.0530.02 or 1400.0552.02
        /// 
        /// Remote-control command(s):
        /// [SOURce:]CHIRp:TRIGger:EXTernal:IMPedance
        /// </summary>
        /// <param name="Impedance">
        /// This control set the impedance for external feed via the PULSE EXT input 
        /// 
        /// 
        /// Valid Values:
        /// RSSMA_CHIRP_IMPEDANCE_G10K (0) - G10k
        /// RSSMA_CHIRP_IMPEDANCE_G50  (1) - G50
        /// 
        /// Default Value: RSSMA_CHIRP_IMPEDANCE_G50 (1)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetCHIRPExternalImpedance(int Impedance)
        {
            int pInvokeResult = PInvoke.SetCHIRPExternalImpedance(this._handle, Impedance);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the impedance for external feed via the PULSE EXT input 
        /// 
        /// Note(s):
        /// 
        /// (1) This function is only available with option R&amp;S SMA-K20/22 and interface board 1400.0530.02 or 1400.0552.02
        /// 
        /// Remote-control command(s):
        /// [SOURce:]CHIRp:TRIGger:EXTernal:IMPedance?
        /// </summary>
        /// <param name="Impedance">
        /// This control displays the impedance for external feed via the PULSE EXT input 
        /// 
        /// Valid Values:
        /// RSSMA_CHIRP_IMPEDANCE_G10K (0) - G10k
        /// RSSMA_CHIRP_IMPEDANCE_G50  (1) - G50
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetCHIRPExternalImpedance(out int Impedance)
        {
            int pInvokeResult = PInvoke.GetCHIRPExternalImpedance(this._handle, out Impedance);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the direction of the chirp modulation. 
        /// 
        /// Note(s):
        /// 
        /// (1) This function is only available with option R&amp;S SMA-K20/22 and interface board 1400.0530.02 or 1400.0552.02
        /// 
        /// Remote-control command(s):
        /// [SOURce:]CHIRp:DIRection
        /// </summary>
        /// <param name="Direction">
        /// This control selects the direction of the chirp modulation.
        /// 
        /// Valid Values:
        /// RSSMA_CHIRP_DIRECTION_UP   (0) - Up
        /// RSSMA_CHIRP_DIRECTION_DOWN (1) - Down
        /// 
        /// Default Value: RSSMA_CHIRP_DIRECTION_UP   (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetCHIRPDirection(int Direction)
        {
            int pInvokeResult = PInvoke.SetCHIRPDirection(this._handle, Direction);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the direction of the chirp modulation. 
        /// 
        /// Note(s):
        /// 
        /// (1) This function is only available with option R&amp;S SMA-K20/22 and interface board 1400.0530.02 or 1400.0552.02
        /// 
        /// Remote-control command(s):
        /// [SOURce:]CHIRp:DIRection?
        /// </summary>
        /// <param name="Direction">
        /// This control displays the direction of the chirp modulation.
        /// 
        /// Valid Values:
        /// RSSMA_CHIRP_DIRECTION_UP   (0) - Up
        /// RSSMA_CHIRP_DIRECTION_DOWN (1) - Down
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetCHIRPDirection(out int Direction)
        {
            int pInvokeResult = PInvoke.GetCHIRPDirection(this._handle, out Direction);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates/deactivates the generation of modulation chirps.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is only available with option R&amp;S SMA-K20/23 and interface board 1400.0530.02 or 1400.0552.02
        /// 
        /// Remote-control command(s):
        /// [SOURce:]CHIRp:STATe
        /// </summary>
        /// <param name="CHRIP_State">
        /// Activates/deactivates the generation of modulation chirps.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetCHIRPState(bool CHRIP_State)
        {
            int pInvokeResult = PInvoke.SetCHIRPState(this._handle, System.Convert.ToUInt16(CHRIP_State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the generation of modulation chirps state.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is only available with option R&amp;S SMA-K20/23 and interface board 1400.0530.02 or 1400.0552.02
        /// 
        /// Remote-control command(s):
        /// [SOURce:]CHIRp:STATe?
        /// </summary>
        /// <param name="CHRIP_State">
        /// Displays the state of generation of modulation chirps.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetCHIRPState(out bool CHRIP_State)
        {
            ushort CHRIP_StateAsUShort;
            int pInvokeResult = PInvoke.GetCHIRPState(this._handle, out CHRIP_StateAsUShort);
            CHRIP_State = System.Convert.ToBoolean(CHRIP_StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the modulation bandwidth of the modulation chirp in Hz. The maximal  bandwidth depends on the RF frequency set and the selected modulation mode (see data sheet).
        /// 
        /// Note(s):
        /// 
        /// (1) This function is only available with option R&amp;S SMA-K20/23 and interface board 1400.0530.02 or 1400.0552.02
        ///  
        /// Remote-control command(s):
        /// [SOURce:]CHIRp:BANDwidth
        /// </summary>
        /// <param name="Bandwidth">
        /// This control sets the modulation bandwidth of the modulation chirp in Hz. The maximal  bandwidth depends on the RF frequency set and the selected modulation mode (see data sheet).
        /// 
        /// Valid Values:
        /// 0 Hz to 80 MHz
        /// 
        /// Default Value: 1E3 Hz
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetCHIRPBandwidth(double Bandwidth)
        {
            int pInvokeResult = PInvoke.SetCHIRPBandwidth(this._handle, Bandwidth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the modulation bandwidth of the modulation chirp in Hz. The maximal  bandwidth depends on the RF frequency set and the selected modulation mode (see data sheet).
        ///  
        /// Note(s):
        /// 
        /// (1) This function is only available with option R&amp;S SMA-K20/23 and interface board 1400.0530.02 or 1400.0552.02
        /// 
        /// Remote-control command(s):
        /// [SOURce:]CHIRp:BANDwidth?
        /// </summary>
        /// <param name="Bandwidth">
        /// This control displays the modulation bandwidth of the modulation chirp in Hz. The maximal  bandwidth depends on the RF frequency set and the selected modulation mode (see data sheet).
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetCHIRPBandwidth(out double Bandwidth)
        {
            int pInvokeResult = PInvoke.GetCHIRPBandwidth(this._handle, out Bandwidth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the period of the generated modulation chirp. The period determines the repetition frequency of the internal signal. 
        /// 
        /// Note(s):
        /// 
        /// (1) This function is only available with option R&amp;S SMA-K20/23 and interface board 1400.0530.02 or 1400.0552.02
        ///  
        /// Remote-control command(s):
        /// [SOURce:]CHIRp:PULSe:PERiod
        /// </summary>
        /// <param name="Pulse_Period">
        /// This control sets the period of the generated modulation chirp. The period determines the repetition frequency of the internal signal. 
        /// 
        /// 
        /// Valid Values:
        /// 200 ns to 100 s
        /// 
        /// Default Value: 1.0e-3 s
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetCHIRPPulsePeriod(double Pulse_Period)
        {
            int pInvokeResult = PInvoke.SetCHIRPPulsePeriod(this._handle, Pulse_Period);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the period of the generated modulation chirp. The period determines the repetition frequency of the internal signal. 
        ///  
        /// Note(s):
        /// 
        /// (1) This function is only available with option R&amp;S SMA-K20/23 and interface board 1400.0530.02 or 1400.0552.02
        /// 
        /// Remote-control command(s):
        /// [SOURce:]CHIRp:PULSe:PERiod
        /// </summary>
        /// <param name="Pulse_Period">
        /// This control sets the period of the generated modulation chirp. The period determines the repetition frequency of the internal signal. 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetCHIRPPulsePeriod(out double Pulse_Period)
        {
            int pInvokeResult = PInvoke.GetCHIRPPulsePeriod(this._handle, out Pulse_Period);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the width of the generated pulse. The pulse width must be at least 1us less than the set pulse period. 
        /// 
        /// Note(s):
        /// 
        /// (1) This function is only available with option R&amp;S SMA-K20/23 and interface board 1400.0530.02 or 1400.0552.02
        /// 
        /// Remote-control command(s):
        /// [SOURce:]CHIRp:PULSe:WIDTh
        /// </summary>
        /// <param name="Pulse_Width">
        /// This control sets the width of the generated pulse. The pulse width must be at least 1us less than the set pulse period.
        /// 
        /// Valid Values:
        /// 100 ns to 100 s
        /// 
        /// Default Value: 0.5e-3 s
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetCHIRPPulseWidth(double Pulse_Width)
        {
            int pInvokeResult = PInvoke.SetCHIRPPulseWidth(this._handle, Pulse_Width);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the width of the generated pulse. The pulse width must be at least 1us less than the set pulse period. 
        /// 
        /// Note(s):
        /// 
        /// (1) This function is only available with option R&amp;S SMA-K20/23 and interface board 1400.0530.02 or 1400.0552.02
        /// 
        /// Remote-control command(s):
        /// [SOURce:]CHIRp:PULSe:WIDTh?
        /// </summary>
        /// <param name="Pulse_Width">
        /// This control displays the width of the generated pulse. The pulse width must be at least 1us less than the set pulse period.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetCHIRPPulseWidth(out double Pulse_Width)
        {
            int pInvokeResult = PInvoke.GetCHIRPPulseWidth(this._handle, out Pulse_Width);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the pulse compression ratio, i.e. the product of pulse width (s) and bandwidth (Hz). Pulse compression increases the range resolution as well as the signal to noise ratio of pulsed signals.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is only available with option R&amp;S SMA-K20/23 and interface board 1400.0530.02 or 1400.0552.02
        /// 
        /// Remote-control command(s):
        /// [SOURce:]CHIRp:COMPression:RATio?
        /// </summary>
        /// <param name="Compression_Ratio">
        /// This control displays the pulse compression ratio.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetCHIRPCompressionRatio(out double Compression_Ratio)
        {
            int pInvokeResult = PInvoke.GetCHIRPCompressionRatio(this._handle, out Compression_Ratio);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function switches on or off all RF output signals of the instrument.
        /// 
        /// Remote-control command(s):
        /// OUTPut:ALL[:STATe] ON | OFF
        /// 
        /// </summary>
        /// <param name="RF_Output_States">
        /// Switches on or off all RF output signals of the instrument.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAllRFOutputsState(bool RF_Output_States)
        {
            int pInvokeResult = PInvoke.SetAllRFOutputsState(this._handle, System.Convert.ToUInt16(RF_Output_States));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates and deactivates the RF output.
        /// 
        /// Remote-control command(s):
        /// OUTPut[:STATe] ON | OFF
        /// 
        /// </summary>
        /// <param name="RF_Output_State">
        /// Activates and deactivates the RF output.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetOutputState(bool RF_Output_State)
        {
            int pInvokeResult = PInvoke.SetOutputState(this._handle, System.Convert.ToUInt16(RF_Output_State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns state of the RF output.
        /// 
        /// Remote-control command(s):
        /// OUTPut[:STATe]?
        /// 
        /// </summary>
        /// <param name="RF_Output_State">
        /// Returns state of the RF output.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetOutputState(out bool RF_Output_State)
        {
            ushort RF_Output_StateAsUShort;
            int pInvokeResult = PInvoke.GetOutputState(this._handle, out RF_Output_StateAsUShort);
            RF_Output_State = System.Convert.ToBoolean(RF_Output_StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the impedance of the RF output. This permits converting the output level between units V and W. The impedances cannot be changed. 
        /// 
        /// Remote-control command(s):
        /// OUTPut:IMPedance?
        /// 
        /// </summary>
        /// <param name="Impedance">
        /// Returns the frequency of the RF output signal.
        /// 
        /// Valid Values:
        /// RSSMA_EXT_INPUT_IMPEDANCE_G50 (0) - 50 Ohm
        /// RSSMA_EXT_INPUT_IMPEDANCE_G1K (1) - 10 kOhm
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetOutputImpedance(out int Impedance)
        {
            int pInvokeResult = PInvoke.GetOutputImpedance(this._handle, out Impedance);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects Fixed frequency mode and sets the frequency and frequency offset of the RF output signal for CW mode (:SOURce:FREQuency:MODE CW). 
        /// 
        /// As with the FREQ value entered in the display, the OFFSet value is also taken into consideration with this function. The specified value range is therefore only effective if OFFSet is set to 0. The value range for other OFFset values can be calculated using the following formula:
        /// 
        /// 300 kHz + OFFSet ... RFmax + OFFSet
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]FREQuency[:CW|:FIXed]
        /// [SOURce:]FREQuency:OFFSet
        /// [SOURce:]FREQuency:MODE FIXed
        /// [SOURce:]FREQuency:STEP:MODE USER | DECimal
        /// [SOURce:]FREQuency:STEP[:INCRement]
        /// </summary>
        /// <param name="Frequency">
        /// Sets the frequency of the RF output signal.
        /// 
        /// Valid Range (offset = 0): 300 kHz to RFmax
        /// 
        /// Default Value: 1.0e9 Hz
        /// 
        /// </param>
        /// <param name="Offset">
        /// Sets the frequency offset of a downstream instrument.
        /// 
        /// Valid Range: -50.0e9 Hz to 50.0e9 Hz
        /// 
        /// Default Value: 0.0 Hz
        /// 
        /// </param>
        /// <param name="Variation_Active">
        /// Activates (USER) or deactivates (DECimal) the user-defined step width.
        /// 
        /// Valid Values:
        /// VI_TRUE (1) - On
        /// VI_FALSE (0) - Off
        /// 
        /// Default Value: VI_TRUE (1)
        /// 
        /// </param>
        /// <param name="Variation_Step">
        /// Sets the step width for the frequency setting.
        /// 
        /// Valid Range: 0.0 Hz to RFmax - 300 kHz
        /// 
        /// Default Value: 1.0e6 Hz
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int confRFFreq(double Frequency, double Offset, bool Variation_Active, double Variation_Step)
        {
            int pInvokeResult = PInvoke.confRFFreq(this._handle, Frequency, Offset, System.Convert.ToUInt16(Variation_Active), Variation_Step);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the RF phase continuous frequency settings.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is only available with option R&amp;S SMA-B22.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]FREQuency:PHASe:CONTinuous:STATe ON | OFF
        /// [SOURce:]FREQuency:PHASe:CONTinuous:MODE NARRow | WIDE
        /// </summary>
        /// <param name="State">
        /// Activates/deactivates phase continuous frequency settings.
        /// 
        /// Valid Range:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <param name="Frequency_Range">
        /// Selects the mode for determining the frequency range for the phase continuous signal.
        /// 
        /// Valid Values:
        /// RSSMA_PHASE_CONT_FREQ_RANGE_NARR (0) - Narrow
        /// RSSMA_PHASE_CONT_FREQ_RANGE_WIDE (1) - Wide
        /// 
        /// Default Value: RSSMA_PHASE_CONT_FREQ_RANGE_NARR (0)
        /// 
        /// Note(s):
        /// 
        /// (1) Narrow: The available frequency range is smaller than with setting wide. It is asymmetrical around the RF frequency set at the point of activating the phase continuous settings.
        /// 
        /// (2) Wide: The wide mode provides a larger frequency range. The frequency range is symmetrical around the RF frequency set at the point of activating the phase continuous settings.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureRFPhaseContinuousFrequencySettings(bool State, int Frequency_Range)
        {
            int pInvokeResult = PInvoke.ConfigureRFPhaseContinuousFrequencySettings(this._handle, System.Convert.ToUInt16(State), Frequency_Range);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the frequency of the RF output signal for CW mode (:SOURce:FREQuency:MODE CW). In Sweep mode (:SOURce:FREQuency:MODE SWEep), this value is linked to the current sweep frequency. 
        /// 
        /// In addition to a numerical value, it is also possible to specify UP and DOWN. The frequency is then increased or decreased by the value which is set under [SOURce:]FREQuency:STEP. 
        /// 
        /// As with the FREQ value entered in the display, the OFFSet value is also taken into consideration with this function. The specified value range is therefore only effective if OFFSet is set to 0. The value range for other OFFset values can be calculated using the following formula:
        /// 
        /// 300 kHz + OFFSet ... RFmax + OFFSet
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]FREQuency[:CW|:FIXed]
        /// 
        /// </summary>
        /// <param name="Frequency">
        /// Sets the frequency of the RF output signal.
        /// 
        /// Valid Range (offset = 0): 300 kHz to RFmax
        /// 
        /// Default Value: 1.0e9 Hz
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetRFFrequency(double Frequency)
        {
            int pInvokeResult = PInvoke.SetRFFrequency(this._handle, Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the frequency of the RF output signal for CW mode (:SOURce:FREQuency:MODE CW). In Sweep mode (:SOURce:FREQuency:MODE SWEep), this value is linked to the current sweep frequency. 
        /// 
        /// In addition to a numerical value, it is also possible to specify UP and DOWN. The frequency is then increased or decreased by the value which is set under [SOURce:]FREQuency:STEP. 
        /// 
        /// As with the FREQ value entered in the display, the OFFSet value is also taken into consideration with this function. The specified value range is therefore only effective if OFFSet is set to 0. The value range for other OFFset values can be calculated using the following formula:
        /// 
        /// 300 kHz + OFFSet ... RFmax + OFFSet
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]FREQuency[:CW|:FIXed]?
        /// 
        /// </summary>
        /// <param name="Frequency">
        /// Returns the frequency of the RF output signal.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetRFFrequency(out double Frequency)
        {
            int pInvokeResult = PInvoke.GetRFFrequency(this._handle, out Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the frequency offset of a downstream instrument, e.g. a mixer (see section RF Frequency and Phase - Frequency - Phase). If a frequency offset is entered, the frequency entered with SOURce:FREQuency:... no longer corresponds to the RF output frequency. The following correlation applies:
        /// 
        /// SOURce:FREQuency:... = RF output frequency  + SOURce:FREQuency:OFFSet.
        /// 
        /// Entering an offset does not change the RF output frequency, but rather the query value of SOURce:FREQuency:...
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]FREQuency:OFFSet
        /// 
        /// </summary>
        /// <param name="Frequency_Offset">
        /// Sets the frequency offset of a downstream instrument.
        /// 
        /// Valid Range: -67.0e9 Hz to 67.0e9 Hz
        /// 
        /// Default Value: 0.0 Hz
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetRFFrequencyOffset(double Frequency_Offset)
        {
            int pInvokeResult = PInvoke.SetRFFrequencyOffset(this._handle, Frequency_Offset);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the frequency offset of a downstream instrument, e.g. a mixer (see section RF Frequency and Phase - Frequency - Phase). If a frequency offset is entered, the frequency entered with SOURce:FREQuency:... no longer corresponds to the RF output frequency. The following correlation applies:
        /// 
        /// SOURce:FREQuency:... = RF output frequency  + SOURce:FREQuency:OFFSet.
        /// 
        /// Entering an offset does not change the RF output frequency, but rather the query value of SOURce:FREQuency:...
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]FREQuency:OFFSet?
        /// 
        /// </summary>
        /// <param name="Frequency_Offset">
        /// Returns the frequency offset of a downstream instrument.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetRFFrequencyOffset(out double Frequency_Offset)
        {
            int pInvokeResult = PInvoke.GetRFFrequencyOffset(this._handle, out Frequency_Offset);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the multiplication factor for the RF frequency. The entry does not change the RF frequency at the RF output of the R&amp;S SMA.
        /// 
        /// Remote-control command(s):
        /// [:SOURce&lt;hw&gt;]:FREQuency:MULTiplier 
        /// 
        /// </summary>
        /// <param name="Multiplier">
        /// Sets the value for the multiplication factor of a subsequent downstream instrument.
        /// 
        /// Valid Range: 0.001 to (100 GHz / current RF frequency)
        /// no range checking
        /// 
        /// Default Value: 1.000 Hz
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetRFMultiplier(double Multiplier)
        {
            int pInvokeResult = PInvoke.SetRFMultiplier(this._handle, Multiplier);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the multiplication factor for the RF frequency. 
        /// 
        /// Remote-control command(s):
        /// [:SOURce&lt;hw&gt;]:FREQuency:MULTiplier? 
        /// </summary>
        /// <param name="Multiplier">
        /// Returns the value for the multiplication factor of a subsequent downstream instrument.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetRFMultiplier(out double Multiplier)
        {
            int pInvokeResult = PInvoke.GetRFMultiplier(this._handle, out Multiplier);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates/deactivates phase continuous frequency settings. For a given RF frequency setting, phase continuous frequency changes are possible in a limited frequency range. The output sinewave is phase continuous, i.e there will be no phase discontinuity or glitch when changing the frequency.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]FREQuency:PHASe:CONTinuous:STATe ON | OFF
        /// 
        /// </summary>
        /// <param name="State">
        /// Activates/deactivates phase continuous frequency settings.
        /// 
        /// Valid Range:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetRFPhaseContinuousActive(bool State)
        {
            int pInvokeResult = PInvoke.SetRFPhaseContinuousActive(this._handle, System.Convert.ToUInt16(State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the state of the phase continuous frequency settings. 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]FREQuency:PHASe:CONTinuous:STATe?
        /// 
        /// </summary>
        /// <param name="State">
        /// Returns the state of the phase continuous frequency settings.
        /// 
        /// Valid Range:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetRFPhaseContinuousActive(out bool State)
        {
            ushort StateAsUShort;
            int pInvokeResult = PInvoke.GetRFPhaseContinuousActive(this._handle, out StateAsUShort);
            State = System.Convert.ToBoolean(StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the mode for determining the frequency range for the phase continuous signal.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is only available with option R&amp;S SMA-B22.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]FREQuency:PHASe:CONTinuous:MODE NARRow | WIDE
        /// 
        /// </summary>
        /// <param name="Frequency_Range">
        /// Selects the mode for determining the frequency range for the phase continuous signal.
        /// 
        /// Valid Values:
        /// RSSMA_PHASE_CONT_FREQ_RANGE_NARR (0) - Narrow
        /// RSSMA_PHASE_CONT_FREQ_RANGE_WIDE (1) - Wide
        /// 
        /// Default Value: RSSMA_PHASE_CONT_FREQ_RANGE_NARR (0)
        /// 
        /// Note(s):
        /// 
        /// (1) Narrow: The available frequency range is smaller than with setting wide. It is asymmetrical around the RF frequency set at the point of activating the phase continuous settings.
        /// 
        /// (2) Wide: The wide mode provides a larger frequency range. The frequency range is symmetrical around the RF frequency set at the point of activating the phase continuous settings.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetRFPhaseContinuousFrequencyRange(int Frequency_Range)
        {
            int pInvokeResult = PInvoke.SetRFPhaseContinuousFrequencyRange(this._handle, Frequency_Range);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the mode for determining the frequency range for the phase continuous signal.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is only available with option R&amp;S SMA-B22.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]FREQuency:PHASe:CONTinuous:MODE?
        /// 
        /// </summary>
        /// <param name="Frequency_Range">
        /// Returns the mode for determining the frequency range for the phase continuous signal.
        /// 
        /// Valid Range:
        /// RSSMA_PHASE_CONT_FREQ_RANGE_NARR (0) - Narrow
        /// RSSMA_PHASE_CONT_FREQ_RANGE_WIDE (1) - Wide
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetRFPhaseContinuousFrequencyRange(out int Frequency_Range)
        {
            int pInvokeResult = PInvoke.GetRFPhaseContinuousFrequencyRange(this._handle, out Frequency_Range);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the minimum frequency of the frequency range for for phase continuous settings. The minimum frequency of the frequency range depends on the mode selected with the command SOURce:FREQuency:PHASe:CONTinuous:MODE.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is only available with option R&amp;S SMA-B22.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]FREQuency:PHASe:CONTinuous:LOW?
        /// 
        /// </summary>
        /// <param name="Minimum_Frequency">
        /// Queries the minimum frequency of the frequency range for for phase continuous settings. The minimum frequency of the frequency range depends on the mode selected with the command SOURce:FREQuency:PHASe:CONTinuous:MODE.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetRFPhaseContinuousMinimumFrequency(out double Minimum_Frequency)
        {
            int pInvokeResult = PInvoke.GetRFPhaseContinuousMinimumFrequency(this._handle, out Minimum_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the maximum frequency of the frequency range for for phase continuous settings. The maximum frequency of the frequency range depends on the mode selected with the command SOURce:FREQuency:PHASe:CONTinuous:MODE.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is only available with option R&amp;S SMA-B22.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]FREQuency:PHASe:CONTinuous:HIGH?
        /// 
        /// </summary>
        /// <param name="Maximum_Frequency">
        /// Queries the maximum frequency of the frequency range for for phase continuous settings. The maximum frequency of the frequency range depends on the mode selected with the command SOURce:FREQuency:PHASe:CONTinuous:MODE.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetRFPhaseContinuousMaximumFrequency(out double Maximum_Frequency)
        {
            int pInvokeResult = PInvoke.GetRFPhaseContinuousMaximumFrequency(this._handle, out Maximum_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates (USER) or deactivates (DECimal) the user-defined step width used when varying the frequency value with the frequency values UP/DOWN. This function is linked to the function Variation Active for manual control, i.e. the function also activates/deactives the user-defined step width used when varying the frequency value with the rotary knob.
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]FREQuency:STEP:MODE USER | DECimal
        /// 
        /// </summary>
        /// <param name="Variation_Active">
        /// Activates (USER) or deactivates (DECimal) the user-defined step width.
        /// 
        /// Valid Values:
        /// VI_TRUE (1) - On
        /// VI_FALSE (0) - Off
        /// 
        /// Default Value: VI_TRUE (1)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetRFVariationActive(bool Variation_Active)
        {
            int pInvokeResult = PInvoke.SetRFVariationActive(this._handle, System.Convert.ToUInt16(Variation_Active));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the frequency step mode. This function is linked to the function Variation Active for manual control, i.e. the function also activates/deactives the user-defined step width used when varying the frequency value with the rotary knob.
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]FREQuency:STEP:MODE?
        /// 
        /// </summary>
        /// <param name="Variation_Active">
        /// Returns the status of activation of the user-defined step width.
        /// 
        /// Valid Values:
        /// VI_TRUE (1) - On
        /// VI_FALSE (0) - Off
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetRFVariationActive(out bool Variation_Active)
        {
            ushort Variation_ActiveAsUShort;
            int pInvokeResult = PInvoke.GetRFVariationActive(this._handle, out Variation_ActiveAsUShort);
            Variation_Active = System.Convert.ToBoolean(Variation_ActiveAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the step width for the frequency setting if the frequency values UP/DOWN are used and variation mode :SOUR:FREQ:STEP:MODE USER is selected. This function is linked to  Variation Step for manual control, i.e. the command also sets the step width of the rotary knob for Variation Active on.
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]FREQuency:STEP[:INCRement]
        /// 
        /// </summary>
        /// <param name="Variation_Step">
        /// Sets the step width for the frequency setting.
        /// 
        /// Valid Range: 0.0 Hz to RFmax - 300 kHz
        /// 
        /// Default Value: 1.0e6 Hz
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetRFVariationStep(double Variation_Step)
        {
            int pInvokeResult = PInvoke.SetRFVariationStep(this._handle, Variation_Step);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the step width of the frequency setting if the frequency values UP/DOWN are used and variation mode :SOUR:FREQ:STEP:MODE USER is selected. This function is linked to  Variation Step for manual control, i.e. the command also sets the step width of the rotary knob for Variation Active on.
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]FREQuency:STEP[:INCRement]?
        /// 
        /// </summary>
        /// <param name="Variation_Step">
        /// Returns the step width of the frequency setting.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetRFVariationStep(out double Variation_Step)
        {
            int pInvokeResult = PInvoke.GetRFVariationStep(this._handle, out Variation_Step);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function determines whether the current frequency setting is retained or whether the stored frequency setting is adopted when an instrument configuration is loaded.
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]FREQuency[:CW|:FIXed]:RCL INCLude | EXCLude
        /// 
        /// </summary>
        /// <param name="RF_Frequency_on_Recall">
        /// Determines whether the current frequency setting is retained or whether the stored frequency setting is adopted when an instrument configuration is loaded.
        /// 
        /// Valid Values:
        /// RSSMA_FREQUENCY_RCL_INCLUDE (0) - Include
        /// RSSMA_FREQUENCY_RCL_EXCLUDE (1) - Exclude
        /// 
        /// Default Value: RSSMA_FREQUENCY_RCL_EXCLUDE (1)
        /// 
        /// Notes:
        /// 
        /// (1) Include:
        /// The stored frequency is also loaded when a stored instrument configuration is loaded. 
        /// 
        /// (2) Exclude:
        /// The RF frequency is not loaded when a stored instrument configuration is loaded. The current frequency is retained.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetRFFrequencyonRecall(int RF_Frequency_on_Recall)
        {
            int pInvokeResult = PInvoke.SetRFFrequencyonRecall(this._handle, RF_Frequency_on_Recall);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns whether the current frequency setting is retained or whether the stored frequency setting is adopted when an instrument configuration is loaded.
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]FREQuency[:CW|:FIXed]:RCL?
        /// 
        /// </summary>
        /// <param name="RF_Frequency_on_Recall">
        /// Returns whether the current frequency setting is retained or whether the stored frequency setting is adopted when an instrument configuration is loaded.
        /// 
        /// Valid Values:
        /// RSSMA_FREQUENCY_RCL_INCLUDE (0) - Include
        /// RSSMA_FREQUENCY_RCL_EXCLUDE (1) - Exclude
        /// 
        /// Notes:
        /// 
        /// (1) Include:
        /// The stored frequency is also loaded when a stored instrument configuration is loaded. 
        /// 
        /// (2) Exclude:
        /// The RF frequency is not loaded when a stored instrument configuration is loaded. The current frequency is retained.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetRFFrequencyonRecall(out int RF_Frequency_on_Recall)
        {
            int pInvokeResult = PInvoke.GetRFFrequencyonRecall(this._handle, out RF_Frequency_on_Recall);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures reference oscillator for external or internal reference.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ROSCillator:SOURce INTernal | EXTernal
        /// [SOURce:]ROSCillator:EXTernal:FREQuency 5 MHz | 10 MHz | 13 MHz
        /// [SOURce:]ROSCillator:EXTernal:SBANdwidth NARRow | WIDe
        /// [SOURce:]ROSCillator[:INTernal]:ADJust[:STATe] ON | OFF
        /// [SOURce:]ROSCillator[:INTernal]:ADJust:VALue
        /// </summary>
        /// <param name="ROSC_Source">
        /// Selects between internal and external reference frequency.
        /// 
        /// Valid Values:
        /// RSSMA_ROSC_SOURCE_INTERNAL    (0) - Internal
        /// RSSMA_ROSC_SOURCE_EXTERNAL    (1) - External
        /// 
        /// Default Value: RSSMA_ROSC_SOURCE_INTERNAL (0)
        /// 
        /// Notes:
        /// 
        /// (1) Internal:
        /// The internal reference oscillator is used. 
        /// 
        /// (2) External:
        /// An external reference signal is used. It must be input at the REF IN connector at the rear of the instrument. The instrument is informed of the frequency of the external reference signal by means of the command SOURce:ROSCillator:EXTernal:FREQuency.
        /// 
        /// </param>
        /// <param name="External_Reference_Frequency">
        /// Sets the frequency of the external reference.
        /// 
        /// Valid Values:
        /// RSSMA_EXTERN_REF_FREQ_5MHZ     (0) - 5 MHz
        /// RSSMA_EXTERN_REF_FREQ_10MHZ    (1) - 10 MHz
        /// RSSMA_EXTERN_REF_FREQ_13MHZ    (2) - 13 MHz
        /// 
        /// Default Value: RSSMA_EXTERN_REF_FREQ_10MHZ (1)
        /// 
        /// </param>
        /// <param name="ROSC_Synchronization_Bandwidth">
        /// Selects the synchronization bandwidth for an external reference signal.
        /// 
        /// Valid Values:
        /// RSSMA_ROSC_SBAN_STANDARD    (0) - Standard
        /// RSSMA_ROSC_SBAN_NARROW      (1) - Narrow
        /// 
        /// Default Value: RSSMA_ROSC_SBAN_STANDARD (0)
        /// 
        /// Notes:
        /// 
        /// (1) Standard:
        /// Synchronization bandwidth is approx. 750 Hz. 
        /// 
        /// (2) Narrow:
        /// Synchronization bandwidth is approx. 1 Hz.
        /// 
        /// </param>
        /// <param name="Adjustment_Active">
        /// Activates/deactivates the pulse modulation.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <param name="Adjustment_Frequency">
        /// Specifies the frequency correction value (adjustment value).
        /// 
        /// Valid Range: 0 to 4095
        /// 
        /// Default Value: 1400
        /// 
        /// Note(s):
        /// (1) This parameter is set only if Adjustment Active is set to On.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int confRosc(int ROSC_Source, int External_Reference_Frequency, int ROSC_Synchronization_Bandwidth, bool Adjustment_Active, int Adjustment_Frequency)
        {
            int pInvokeResult = PInvoke.confRosc(this._handle, ROSC_Source, External_Reference_Frequency, ROSC_Synchronization_Bandwidth, System.Convert.ToUInt16(Adjustment_Active), Adjustment_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects between internal and external reference frequency.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ROSCillator:SOURce INTernal | EXTernal
        /// 
        /// </summary>
        /// <param name="ROSC_Source">
        /// Selects between internal and external reference frequency.
        /// 
        /// Valid Values:
        /// RSSMA_ROSC_SOURCE_INTERNAL    (0) - Internal
        /// RSSMA_ROSC_SOURCE_EXTERNAL    (1) - External
        /// 
        /// Default Value: RSSMA_ROSC_SOURCE_INTERNAL (0)
        /// 
        /// Notes:
        /// 
        /// (1) Internal:
        /// The internal reference oscillator is used. 
        /// 
        /// (2) External:
        /// An external reference signal is used. It must be input at the REF IN connector at the rear of the instrument. The instrument is informed of the frequency of the external reference signal by means of the command SOURce:ROSCillator:EXTernal:FREQuency.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetROSCSource(int ROSC_Source)
        {
            int pInvokeResult = PInvoke.SetROSCSource(this._handle, ROSC_Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns reference frequency source.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ROSCillator:SOURce?
        /// 
        /// </summary>
        /// <param name="ROSC_Source">
        /// Returns reference frequency source.
        /// 
        /// Valid Values:
        /// RSSMA_ROSC_SOURCE_INTERNAL    (0) - Internal
        /// RSSMA_ROSC_SOURCE_EXTERNAL    (1) - External
        /// 
        /// Notes:
        /// 
        /// (1) Internal:
        /// The internal reference oscillator is used. 
        /// 
        /// (2) External:
        /// An external reference signal is used. It must be input at the REF IN connector at the rear of the instrument. The instrument is informed of the frequency of the external reference signal by means of the command SOURce:ROSCillator:EXTernal:FREQuency.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetROSCSource(out int ROSC_Source)
        {
            int pInvokeResult = PInvoke.GetROSCSource(this._handle, out ROSC_Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function determines if the RF output is switched off in case of a missing external reference signal for selection external source. If enabled, this setting ensures that no improper RF signal due to the missing external reference signal is output and used for measurements. In addition to the error message "Ext Ref missing", message "RF output deactivated' is generated
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ROSCillator:EXTernal:RFOFf:STATe ON | OFF
        /// 
        /// </summary>
        /// <param name="RF_Output">
        /// Determines if the RF output is switched off in case of a missing external reference signal for selection external source.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetROSCRFOutput(bool RF_Output)
        {
            int pInvokeResult = PInvoke.SetROSCRFOutput(this._handle, System.Convert.ToUInt16(RF_Output));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns whether the RF output is switched off in case of a missing external reference signal for selection external source.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ROSCillator:EXTernal:RFOFf:STATe?
        /// </summary>
        /// <param name="RF_Output">
        /// Returns if the RF output is switched off in case of a missing external reference signal for selection external source.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetROSCRFOutput(out bool RF_Output)
        {
            ushort RF_OutputAsUShort;
            int pInvokeResult = PInvoke.GetROSCRFOutput(this._handle, out RF_OutputAsUShort);
            RF_Output = System.Convert.ToBoolean(RF_OutputAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function informs the instrument of the frequency of the external reference.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ROSCillator:EXTernal:FREQuency 5 MHz | 10 MHz | 13 MHz
        /// 
        /// </summary>
        /// <param name="External_Reference_Frequency">
        /// Sets the frequency of the external reference.
        /// 
        /// Valid Values:
        /// RSSMA_EXTERN_REF_FREQ_5MHZ     (0) - 5 MHz
        /// RSSMA_EXTERN_REF_FREQ_10MHZ    (1) - 10 MHz
        /// RSSMA_EXTERN_REF_FREQ_13MHZ    (2) - 13 MHz
        /// 
        /// Default Value: RSSMA_EXTERN_REF_FREQ_10MHZ (1)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetROSCExternalReferenceFrequency(int External_Reference_Frequency)
        {
            int pInvokeResult = PInvoke.SetROSCExternalReferenceFrequency(this._handle, External_Reference_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns frequency of the external reference.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ROSCillator:EXTernal:FREQuency?
        /// </summary>
        /// <param name="External_Reference_Frequency">
        /// Returns frequency of the external reference.
        /// 
        /// Valid Values:
        /// RSSMA_EXTERN_REF_FREQ_5MHZ     (0) - 5 MHz
        /// RSSMA_EXTERN_REF_FREQ_10MHZ    (1) - 10 MHz
        /// RSSMA_EXTERN_REF_FREQ_13MHZ    (2) - 13 MHz
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetROSCExternalReferenceFrequency(out int External_Reference_Frequency)
        {
            int pInvokeResult = PInvoke.GetROSCExternalReferenceFrequency(this._handle, out External_Reference_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the synchronization bandwidth for an external reference signal.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ROSCillator:EXTernal:SBANdwidth NARRow | WIDe
        /// 
        /// </summary>
        /// <param name="ROSC_Synchronization_Bandwidth">
        /// Selects the synchronization bandwidth for an external reference signal.
        /// 
        /// Valid Values:
        /// RSSMA_ROSC_SBAN_STANDARD    (0) - Standard
        /// RSSMA_ROSC_SBAN_NARROW      (1) - Narrow
        /// 
        /// Default Value: RSSMA_ROSC_SBAN_STANDARD (0)
        /// 
        /// Notes:
        /// 
        /// (1) Standard:
        /// Synchronization bandwidth is approx. 750 Hz. 
        /// 
        /// (2) Narrow:
        /// Synchronization bandwidth is approx. 1 Hz.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetROSCSynchronizationBandwidth(int ROSC_Synchronization_Bandwidth)
        {
            int pInvokeResult = PInvoke.SetROSCSynchronizationBandwidth(this._handle, ROSC_Synchronization_Bandwidth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the synchronization bandwidth for an external reference signal.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ROSCillator:EXTernal:SBANdwidth?
        /// 
        /// </summary>
        /// <param name="ROSC_Synchronization_Bandwidth">
        /// Returns the synchronization bandwidth for an external reference signal.
        /// 
        /// Valid Values:
        /// RSSMA_ROSC_SBAN_STANDARD    (0) - Standard
        /// RSSMA_ROSC_SBAN_NARROW      (1) - Narrow
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetROSCSynchronizationBandwidth(out int ROSC_Synchronization_Bandwidth)
        {
            int pInvokeResult = PInvoke.GetROSCSynchronizationBandwidth(this._handle, out ROSC_Synchronization_Bandwidth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function informs the instrument of the frequency of the external reference.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ROSCillator:EXTernal:FREQuency 5MHz | 10MHz
        /// </summary>
        /// <param name="External_Frequency">
        /// Informs the instrument of the frequency of the external reference.
        /// 
        /// Valid Values:
        /// RSSMA_ROSC_EXTERNAL_FREQ_5MHZ  (0) - 5 MHz
        /// RSSMA_ROSC_EXTERNAL_FREQ_10MHZ (1) - 10 MHz
        /// 
        /// Default Value:
        /// RSSMA_ROSC_EXTERNAL_FREQ_5MHZ  (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssmb_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetROSCExternalFrequency(int External_Frequency)
        {
            int pInvokeResult = PInvoke.SetROSCExternalFrequency(this._handle, External_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the instrument's frequency of the external reference.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ROSCillator:EXTernal:FREQuency?
        /// </summary>
        /// <param name="External_Frequency">
        /// Returns the instrument of the frequency of the external reference.
        /// 
        /// Valid Values:
        /// RSSMA_ROSC_EXTERNAL_FREQ_5MHZ  (0) - 5 MHz
        /// RSSMA_ROSC_EXTERNAL_FREQ_10MHZ (1) - 10 MHz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssmb_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetROSCExternalFrequency(out int External_Frequency)
        {
            int pInvokeResult = PInvoke.GetROSCExternalFrequency(this._handle, out External_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function determines whether the calibrated (OFF) or a user-defined (ON) adjustment value is used for fine adjustment of the frequency. With STATe ON, the instrument is no longer in the calibrated state.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ROSCillator[:INTernal]:ADJust[:STATe] ON | OFF
        /// </summary>
        /// <param name="Adjustment_Active">
        /// Activates/deactivates the pulse modulation.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetROSCAdjustmentActive(bool Adjustment_Active)
        {
            int pInvokeResult = PInvoke.SetROSCAdjustmentActive(this._handle, System.Convert.ToUInt16(Adjustment_Active));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function determines whether the calibrated (OFF) or a user-defined (ON) adjustment value is used for fine adjustment of the frequency. With STATe ON, the instrument is no longer in the calibrated state.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ROSCillator[:INTernal]:ADJust[:STATe]?
        /// </summary>
        /// <param name="Adjustment_Active">
        /// Determines whether the calibrated (OFF) or a user-defined (ON) adjustment value is used for fine adjustment of the frequency.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetROSCAdjustmentActive(out bool Adjustment_Active)
        {
            ushort Adjustment_ActiveAsUShort;
            int pInvokeResult = PInvoke.GetROSCAdjustmentActive(this._handle, out Adjustment_ActiveAsUShort);
            Adjustment_Active = System.Convert.ToBoolean(Adjustment_ActiveAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function specifies the frequency correction value (adjustment value). A detailed definition is given in  section  RF Reference Frequency - Reference Oscillator.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ROSCillator[:INTernal]:ADJust:VALue
        /// 
        /// </summary>
        /// <param name="Adjustment_Frequency">
        /// Specifies the frequency correction value (adjustment value).
        /// 
        /// Valid Range: 0 to 4095
        /// 
        /// Default Value: 1400
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetROSCAdjustmentFrequency(int Adjustment_Frequency)
        {
            int pInvokeResult = PInvoke.SetROSCAdjustmentFrequency(this._handle, Adjustment_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the frequency correction value (adjustment value). A detailed definition is given in  section  RF Reference Frequency - Reference Oscillator.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]ROSCillator[:INTernal]:ADJust:VALue?
        /// 
        /// </summary>
        /// <param name="Adjustment_Frequency">
        /// Returns the frequency correction value (adjustment value).
        /// 
        /// Valid Range: 0 to 4095
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetROSCAdjustmentFrequency(out int Adjustment_Frequency)
        {
            int pInvokeResult = PInvoke.GetROSCAdjustmentFrequency(this._handle, out Adjustment_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function specifies the phase variation relative to the current phase. The variation can be specified in RADians.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PHASe
        /// 
        /// </summary>
        /// <param name="Delta_Phase">
        /// Specifies the phase variation relative to the current phase.
        /// 
        /// Valid Range: -359.9 deg to 359.9 deg
        /// 
        /// Default Value: 0.0
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetRFDeltaPhase(double Delta_Phase)
        {
            int pInvokeResult = PInvoke.SetRFDeltaPhase(this._handle, Delta_Phase);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the phase variation relative to the current phase. The variation can be specified in RADians.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PHASe?
        /// 
        /// </summary>
        /// <param name="Delta_Phase">
        /// Returns the phase variation relative to the current phase.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetRFDeltaPhase(out double Delta_Phase)
        {
            int pInvokeResult = PInvoke.GetRFDeltaPhase(this._handle, out Delta_Phase);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function adopts the phase set with SOURce:PHASe:ADJust as the current phase. 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]PHASe:REFerence
        /// 
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ResetRFDeltaPhaseDisplay()
        {
            int pInvokeResult = PInvoke.ResetRFDeltaPhaseDisplay(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets all parameters of fixed RF level and changes the mode to fixed RF level.
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]POWer:MODE FIXed
        /// [SOURce:]POWer[:LEVel][:IMMediate][:AMPLitude]
        /// [SOURce:]POWer[:LEVel][:IMMediate]:OFFSet
        /// [SOURce:]POWer:LIMit[:AMPLitude]
        /// OUTPut:AMODe AUTO | FIXed | NORMal | HPOWer
        /// [SOURce:]POWer:STEP:MODE USER | DECimal
        /// [SOURce:]POWer[:LEVel][:IMMediate]:RCL INCLude | EXCLude
        /// </summary>
        /// <param name="Amplitude">
        /// Sets the RF output level.
        /// 
        /// Valid Range: Minimum level + OFFSet to Maximum level + OFFSet
        /// 
        /// Default Value: -30.0 dBm
        /// 
        /// </param>
        /// <param name="Offset">
        /// Specifies the constant level offset of a downstream attenuator/amplifier.
        /// 
        /// Valid Range: -100.0 dB to 100.0 dB
        /// 
        /// Default Value: 0.0 dB
        /// 
        /// </param>
        /// <param name="Limit">
        /// Limits the maximum RF output level.
        /// 
        /// Valid Range: Minimum level to Maximum level
        /// 
        /// Default Value: 30.0 dBm
        /// 
        /// Note:
        /// 
        /// The value range for the level setting varies according to the instrument model. The values are given in the data sheet.
        /// 
        /// </param>
        /// <param name="Variation_Active">
        /// Activates or deactivates the user-defined step width.
        /// 
        /// Valid Values:
        /// VI_TRUE (1) - On
        /// VI_FALSE (0) - Off
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <param name="Variation_Step">
        /// Sets the step width for the level setting if UP and DOWN are used as the level values and variation mode is selected.
        /// 
        /// Valid Range: 0.0 dB to 100.0 dB
        /// 
        /// Default Value: 1.0 dB
        /// 
        /// Note(s):
        /// 
        /// (1) This control is valid only if Variation Active is set to On.
        /// </param>
        /// <param name="Attenuator_Mode">
        /// Switches the mode of the attenuator at the RF output (Attenuator Mode).
        /// 
        /// Valid Values:
        /// RSSMA_OUTPUT_AMODE_AUTO  (0) - Auto
        /// RSSMA_OUTPUT_AMODE_FIXED (1) - Fixed
        /// RSSMA_OUTPUT_AMODE_NORM  (2) - Normal
        /// RSSMA_OUTPUT_AMODE_HPOW  (3) - High Power
        /// 
        /// Default Value: RSSMA_OUTPUT_AMODE_AUTO (0)
        /// 
        /// Notes:
        /// 
        /// (1) Auto:
        /// The attenuator is switched whenever this is possible. 
        /// 
        /// (2) Fixed:
        /// The attenuator is switched when fixed levels are underranged/overranged.
        /// 
        /// (3) NORMal:    
        /// The level settings are made only in the area of the electronically switching attenuator. The high level ranges are not available. 
        /// 
        /// (4) HPOWer:         
        /// The level settings are made only in the area of the high level ranges. Only the high level range is available. The relays are not switched.
        /// </param>
        /// <param name="RF_Level_on_Recall">
        /// Determines whether the current level is retained or whether the stored level setting is adopted when an instrument configuration is loaded.
        /// 
        /// Valid Values:
        /// RSSMA_POWER_LEVEL_RCL_INCLUDE (0) - Include
        /// RSSMA_POWER_LEVEL_RCL_EXCLUDE (1) - Exclude
        /// 
        /// Default Value: RSSMA_POWER_LEVEL_RCL_EXCLUDE (1)
        /// 
        /// Notes:
        /// 
        /// (1) Include:
        /// The stored level is also loaded when a stored instrument configuration is loaded. 
        /// 
        /// (2) Exclude:
        /// The RF level is not loaded when a stored instrument configuration is loaded. The current level is retained.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int confRFLevel(double Amplitude, double Offset, double Limit, bool Variation_Active, double Variation_Step, int Attenuator_Mode, int RF_Level_on_Recall)
        {
            int pInvokeResult = PInvoke.confRFLevel(this._handle, Amplitude, Offset, Limit, System.Convert.ToUInt16(Variation_Active), Variation_Step, Attenuator_Mode, RF_Level_on_Recall);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the RF output level in CW mode.
        /// 
        /// As with the Level value entered in the header, the OFFSet value is also taken into consideration with this command.
        /// 
        /// The specified value range is therefore only effective if :SOURce:POWer:OFFSet is set to 0. The value range for other OFFSet values can be calculated using the following formula:
        /// 
        /// Minimum level + OFFSet ... Maximum level + OFFSet
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]POWer[:LEVel][:IMMediate][:AMPLitude]
        /// 
        /// </summary>
        /// <param name="Amplitude">
        /// Sets the RF output level.
        /// 
        /// Valid Range: Minimum level + OFFSet to Maximum level + OFFSet
        /// 
        /// Default Value: -30.0 dBm
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetRFAmplitude(double Amplitude)
        {
            int pInvokeResult = PInvoke.SetRFAmplitude(this._handle, Amplitude);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the RF output level in CW mode.
        /// 
        /// As with the Level value entered in the header, the OFFSet value is also taken into consideration with this function.
        /// 
        /// The specified value range is therefore only effective if :SOURce:POWer:OFFSet is set to 0. The value range for other OFFSet values can be calculated using the following formula:
        /// 
        /// Minimum level + OFFSet ... Maximum level + OFFSet
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]POWer[:LEVel][:IMMediate][:AMPLitude]?
        /// 
        /// </summary>
        /// <param name="Amplitude">
        /// Returns the RF output level.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetRFAmplitude(out double Amplitude)
        {
            int pInvokeResult = PInvoke.GetRFAmplitude(this._handle, out Amplitude);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the RF level of the RF output connector.
        /// 
        /// The level entered with this command corresponds to the level at the RF output, i.e. any offset entry is not taken into consideration.
        /// 
        /// Remote-control command(s):
        /// [:SOURce&lt;hw&gt;]:POWer:POWer
        /// 
        /// </summary>
        /// <param name="RF_Output_Level">
        /// Sets the RF output level.
        /// 
        /// Valid Range: Minimum level to Maximum level depending the instrument - no range checking
        /// 
        /// Default Value: -30.0 dBm
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetRFOutputLevel(double RF_Output_Level)
        {
            int pInvokeResult = PInvoke.SetRFOutputLevel(this._handle, RF_Output_Level);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the RF level of the RF output connector.
        /// 
        /// Remote-control command(s):
        /// [:SOURce&lt;hw&gt;]:POWer:POWer?
        /// 
        /// </summary>
        /// <param name="RF_Output_Level">
        /// Returns the RF output level.
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetRFOutputLevel(out double RF_Output_Level)
        {
            int pInvokeResult = PInvoke.GetRFOutputLevel(this._handle, out RF_Output_Level);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function limits the maximum RF output level in CW and SWEEP mode. It does not influence the LEVEL display or the response to the POW? query command.
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]POWer:LIMit[:AMPLitude]
        /// 
        /// </summary>
        /// <param name="Limit">
        /// Limits the maximum RF output level.
        /// 
        /// Valid Range: Minimum level to Maximum level
        /// 
        /// Default Value: 30.0 dBm
        /// 
        /// Note:
        /// 
        /// The value range for the level setting varies according to the instrument model. The values are given in the data sheet.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetRFLevelLimit(double Limit)
        {
            int pInvokeResult = PInvoke.SetRFLevelLimit(this._handle, Limit);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the RF output level limits in CW and SWEEP mode.
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]POWer:LIMit[:AMPLitude]?
        /// 
        /// </summary>
        /// <param name="Limit">
        /// Returns the RF output level limit.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetRFLevelLimit(out double Limit)
        {
            int pInvokeResult = PInvoke.GetRFLevelLimit(this._handle, out Limit);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function specifies the constant level offset of a downstream attenuator/amplifier. If a level offset is entered, the level entered with :POWer no longer corresponds to the RF output level. The following correlation applies:
        /// 
        /// POWer = RF output level + POWer:OFFSet.
        /// 
        /// Entering a level offset does not change the RF output level, but rather the query value of :POWer.
        /// 
        /// Only dB is permitted as the unit here. The linear units (V, W, etc.) are not permitted. 
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]POWer[:LEVel][:IMMediate]:OFFSet
        /// 
        /// </summary>
        /// <param name="Offset">
        /// Specifies the constant level offset of a downstream attenuator/amplifier.
        /// 
        /// Valid Range: -100.0 dB to 100.0 dB
        /// 
        /// Default Value: 0.0 dB
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetRFLevelOffset(double Offset)
        {
            int pInvokeResult = PInvoke.SetRFLevelOffset(this._handle, Offset);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the constant level offset of a downstream attenuator/amplifier. If a level offset is entered, the level entered with :POWer no longer corresponds to the RF output level. The following correlation applies:
        /// 
        /// POWer = RF output level + POWer:OFFSet.
        /// 
        /// Entering a level offset does not change the RF output level, but rather the query value of :POWer.
        /// 
        /// Only dB is permitted as the unit here. The linear units (V, W, etc.) are not permitted. 
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]POWer[:LEVel][:IMMediate]:OFFSet?
        /// 
        /// </summary>
        /// <param name="Offset">
        /// Returns the constant level offset of a downstream attenuator/amplifier.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetRFLevelOffset(out double Offset)
        {
            int pInvokeResult = PInvoke.GetRFLevelOffset(this._handle, out Offset);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function determines whether the current level is retained or whether the stored level setting is adopted when an instrument configuration is loaded.
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]POWer[:LEVel][:IMMediate]:RCL INCLude | EXCLude
        /// 
        /// </summary>
        /// <param name="RF_Level_on_Recall">
        /// Determines whether the current level is retained or whether the stored level setting is adopted when an instrument configuration is loaded.
        /// 
        /// Valid Values:
        /// RSSMA_POWER_LEVEL_RCL_INCLUDE (0) - Include
        /// RSSMA_POWER_LEVEL_RCL_EXCLUDE (1) - Exclude
        /// 
        /// Default Value: RSSMA_POWER_LEVEL_RCL_EXCLUDE (1)
        /// 
        /// Notes:
        /// 
        /// (1) Include:
        /// The stored level is also loaded when a stored instrument configuration is loaded. 
        /// 
        /// (2) Exclude:
        /// The RF level is not loaded when a stored instrument configuration is loaded. The current level is retained.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetRFLevelonRecall(int RF_Level_on_Recall)
        {
            int pInvokeResult = PInvoke.SetRFLevelonRecall(this._handle, RF_Level_on_Recall);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns whether the current level is retained or whether the stored level setting is adopted when an instrument configuration is loaded.
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]POWer[:LEVel][:IMMediate]:RCL?
        /// 
        /// </summary>
        /// <param name="RF_Level_on_Recall">
        /// Returns whether the current level is retained or whether the stored level setting is adopted when an instrument configuration is loaded.
        /// 
        /// Valid Values:
        /// RSSMA_POWER_LEVEL_RCL_INCLUDE (0) - Include
        /// RSSMA_POWER_LEVEL_RCL_EXCLUDE (1) - Exclude
        /// 
        /// Notes:
        /// 
        /// (1) Include:
        /// The stored level is also loaded when a stored instrument configuration is loaded. 
        /// 
        /// (2) Exclude:
        /// The RF level is not loaded when a stored instrument configuration is loaded. The current level is retained.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetRFLevelonRecall(out int RF_Level_on_Recall)
        {
            int pInvokeResult = PInvoke.GetRFLevelonRecall(this._handle, out RF_Level_on_Recall);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function switches the mode of the attenuator at the RF output (Attenuator MODe).
        /// 
        /// Remote-control command(s):
        /// OUTPut:AMODe AUTO | FIXed | NORMal | HPOWer
        /// 
        /// </summary>
        /// <param name="Attenuator_Mode">
        /// Switches the mode of the attenuator at the RF output (Attenuator Mode).
        /// 
        /// Valid Values:
        /// RSSMA_OUTPUT_AMODE_AUTO  (0) - Auto
        /// RSSMA_OUTPUT_AMODE_FIXED (1) - Fixed
        /// RSSMA_OUTPUT_AMODE_NORM  (2) - Normal
        /// RSSMA_OUTPUT_AMODE_HPOW  (3) - High Power
        /// 
        /// Default Value: RSSMA_OUTPUT_AMODE_AUTO (0)
        /// 
        /// Notes:
        /// 
        /// (1) Auto:
        /// The attenuator is switched whenever this is possible. 
        /// 
        /// (2) Fixed:
        /// The attenuator is switched when fixed levels are underranged/overranged.
        /// 
        /// (3) NORMal:    
        /// The level settings are made only in the area of the electronically switching attenuator. The high level ranges are not available. 
        /// 
        /// (4) HPOWer:         
        /// The level settings are made only in the area of the high level ranges. Only the high level range is available. The relays are not switched.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetRFAttenuatorMode(int Attenuator_Mode)
        {
            int pInvokeResult = PInvoke.SetRFAttenuatorMode(this._handle, Attenuator_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the mode of the attenuator at the RF output (Attenuator MODe).
        /// 
        /// Remote-control command(s):
        /// OUTPut:AMODe?
        /// 
        /// </summary>
        /// <param name="Attenuator_Mode">
        /// Returns the mode of the attenuator at the RF output (Attenuator MODe).
        /// 
        /// Valid Values:
        /// RSSMA_OUTPUT_AMODE_AUTO  (0) - Auto
        /// RSSMA_OUTPUT_AMODE_FIXED (1) - Fixed
        /// RSSMA_OUTPUT_AMODE_NORM  (2) - Normal
        /// RSSMA_OUTPUT_AMODE_HPOW  (3) - High Power
        /// 
        /// Notes:
        /// 
        /// (1) Auto:
        /// The attenuator is switched whenever this is possible. 
        /// 
        /// (2) Fixed:
        /// The attenuator is switched when fixed levels are underranged/overranged.
        /// 
        /// (3) NORMal:    
        /// The level settings are made only in the area of the electronically switching attenuator. The high level ranges are not available. 
        /// 
        /// (4) HPOWer:         
        /// The level settings are made only in the area of the high level ranges. Only the high level range is available. The relays are not switched.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetRFAttenuatorMode(out int Attenuator_Mode)
        {
            int pInvokeResult = PInvoke.GetRFAttenuatorMode(this._handle, out Attenuator_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the minimum level which can be set without the attenuator being adjusted (Attenuator FIXed).
        /// 
        /// Remote-control command(s):
        /// OUTPut:AFIXed:RANGe:LOWer?
        /// 
        /// </summary>
        /// <param name="Attenuator_Lower_Range">
        /// Returns the minimum level which can be set without the attenuator being adjusted (Attenuator FIXed).
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetRFAttenuatorLowerRange(out double Attenuator_Lower_Range)
        {
            int pInvokeResult = PInvoke.GetRFAttenuatorLowerRange(this._handle, out Attenuator_Lower_Range);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the maximum level which can be set without the attenuator being adjusted (Attenuator FIXed).
        /// 
        /// Remote-control command(s):
        /// OUTPut:AFIXed:RANGe:UPPer?
        /// 
        /// </summary>
        /// <param name="Attenuator_Upper_Range">
        /// Returns the maximum level which can be set without the attenuator being adjusted (Attenuator FIXed).
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetRFAttenuatorUpperRange(out double Attenuator_Upper_Range)
        {
            int pInvokeResult = PInvoke.GetRFAttenuatorUpperRange(this._handle, out Attenuator_Upper_Range);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the attenuator mode, when the RF signal is switched off.
        /// 
        /// Remote-control command(s):
        /// [:SOURce&lt;hw&gt;]:POWer:ATTenuation:RFOFf:MODE UNCHanged | FATTenuation
        /// 
        /// </summary>
        /// <param name="RF_OFF_Mode">
        /// Sets the attenuator mode, when the RF signal is switched off.
        /// 
        /// Valid Values:
        /// RSSMA_OUTPUT_RFOFF_UNCH  (0) - Unchanged
        /// RSSMA_OUTPUT_RFOFF_FATT  (1) - Full Attenuation
        /// 
        /// Default Value: RSSMA_OUTPUT_RFOFF_FATT (1)
        /// 
        /// Notes:
        /// 
        /// (1) Unchanged:
        /// Freezes the setting of the attenuator when RF is switched off. The attenuator is only activated when RF is switched on.
        /// 
        /// (2) Full Attenuation:
        /// Sets attenuation to maximum when the RF signal is switched off. 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetRFAttenuatorRFOffMode(int RF_OFF_Mode)
        {
            int pInvokeResult = PInvoke.SetRFAttenuatorRFOffMode(this._handle, RF_OFF_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the RF off attenuator mode.
        /// 
        /// 
        /// Remote-control command(s):
        /// [:SOURce&lt;hw&gt;]:POWer:ATTenuation:RFOFf:MODE?
        /// 
        /// </summary>
        /// <param name="RF_OFF_Mode">
        /// Returns the RF off attenuator mode.
        /// 
        /// Returned Values:
        /// RSSMA_OUTPUT_RFOFF_UNCH  (0) - Unchanged
        /// RSSMA_OUTPUT_RFOFF_FATT  (1) - Full Attenuation
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetRFAttenuatorRFOffMode(out int RF_OFF_Mode)
        {
            int pInvokeResult = PInvoke.GetRFAttenuatorRFOffMode(this._handle, out RF_OFF_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates (USER) or deactivates (DECimal) the user-defined step width used when varying the level value with the level values UP/DOWN. This function is linked to setting Variation Active for manual control, i.e. the command also activates/deactives the user-defined step width used when varying the level value with the rotary knob.
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]POWer:STEP:MODE USER | DECimal
        /// 
        /// </summary>
        /// <param name="Variation_Active">
        /// Activates or deactivates the user-defined step width.
        /// 
        /// Valid Values:
        /// VI_TRUE (1) - On
        /// VI_FALSE (0) - Off
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetRFLevelVariationActive(bool Variation_Active)
        {
            int pInvokeResult = PInvoke.SetRFLevelVariationActive(this._handle, System.Convert.ToUInt16(Variation_Active));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns level step mode. This function is linked to setting Variation Active for manual control, i.e. the function also activates/deactives the user-defined step width used when varying the level value with the rotary knob.
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]POWer:STEP:MODE?
        /// 
        /// </summary>
        /// <param name="Variation_Active">
        /// Returns level step mode.
        /// 
        /// Valid Values:
        /// VI_TRUE (1) - On
        /// VI_FALSE (0) - Off
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetRFLevelVariationActive(out bool Variation_Active)
        {
            ushort Variation_ActiveAsUShort;
            int pInvokeResult = PInvoke.GetRFLevelVariationActive(this._handle, out Variation_ActiveAsUShort);
            Variation_Active = System.Convert.ToBoolean(Variation_ActiveAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the step width for the level setting if UP and DOWN are used as the level values and variation mode :SOUR:POW:STEP:MODE USER is selected. This function is linked to setting Variation Step for manual control, i.e. the function also sets the step width of the rotary knob for Variation Active on.
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]POWer:STEP[:INCRement]
        /// 
        /// </summary>
        /// <param name="Variation_Step">
        /// Sets the step width for the level setting if UP and DOWN are used as the level values and variation mode is selected.
        /// 
        /// Valid Range: 0.0 dB to 100.0 dB
        /// 
        /// Default Value: 1.0 dB
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetRFLevelVariationStep(double Variation_Step)
        {
            int pInvokeResult = PInvoke.SetRFLevelVariationStep(this._handle, Variation_Step);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the step width for the level setting if UP and DOWN are used as the level values and variation mode :SOUR:POW:STEP:MODE USER is selected. This function is linked to setting Variation Step for manual control, i.e. the function also sets the step width of the rotary knob for Variation Active on.
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]POWer:STEP[:INCRement]?
        /// 
        /// </summary>
        /// <param name="Variation_Step">
        /// Returns the step width for the level setting if UP and DOWN are used as the level values and variation mode is selected.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetRFLevelVariationStep(out double Variation_Step)
        {
            int pInvokeResult = PInvoke.GetRFLevelVariationStep(this._handle, out Variation_Step);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the parameters of Power Control using NRP-Z sensor. With this function you can achieve a very stable and accurate RF power supplied to your DUT. 
        /// 
        /// Remote-control command(s):
        /// [:SOURce&lt;hw&gt;]:POWer:SPC:SELect
        /// [:SOURce&lt;hw&gt;]:POWer:SPC:STATe
        /// [:SOURce&lt;hw&gt;]:POWer:SPC:TARGet
        /// [SOURce:]POWer:LIMit[:AMPLitude]
        /// [:SOURce&lt;hw&gt;]:POWer:SPC:CRANge 
        /// [:SOURce&lt;hw&gt;]:POWer:SPC:DELay 
        /// [:SOURce&lt;hw&gt;]:POWer:SPC:PEAK 
        /// 
        /// 
        /// </summary>
        /// <param name="Sensor">
        /// This control sets  currently selected sensor to be used for power control.
        /// 
        /// Valid Values:
        /// RSSMA_NRPZ_POWER_CONTROL_SENSOR1  (0) - Sensor 1
        /// RSSMA_NRPZ_POWER_CONTROL_SENSOR2  (1) - Sensor 2
        /// RSSMA_NRPZ_POWER_CONTROL_SENSOR3  (2) - Sensor 3
        /// RSSMA_NRPZ_POWER_CONTROL_SENSOR4  (3) - Sensor 4
        /// 
        /// Default Value:
        /// RSSMA_NRPZ_POWER_CONTROL_SENSOR1  (0) - Sensor 1
        /// </param>
        /// <param name="State">
        /// Activates/deactivates control using the selected sensor. The control loop periodically adjusts the generator output. After switching off, the running loop is completed.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <param name="Target_Level">
        /// This control sets the nominal level expected at the input of the sensor.
        /// 
        /// Valid Values:
        /// -50.0 to 30.0 dBm
        /// 
        /// Default Value: -10.0 dBm
        /// </param>
        /// <param name="RF_Level_Limit">
        /// Limits the maximum RF output level.
        /// 
        /// Valid Range: Minimum level to Maximum level
        /// 
        /// Default Value: 30.0 dBm
        /// 
        /// Note:
        /// 
        /// The value range for the level setting varies according to the instrument model. The values are given in the data sheet.
        /// 
        /// </param>
        /// <param name="Catch_Range">
        /// This control sets the capture range of the power control system.
        /// Within the range Target Level +/- Catch Range
        /// the power control locks and tries to achieve the target level. Readings outside the range are not considered
        /// 
        /// Valid Values:
        /// 0.0 to 50.0 dB
        /// 
        /// Default Value: 30.0 dB
        /// </param>
        /// <param name="Delay_Time">
        /// This control sets a waiting period between the level adjustment of the generator and the next measurement of the power sensor.
        /// 
        /// Valid Values:
        /// 0 to 1000
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Use_Peak_Power">
        /// Activates/deactivates power control by means of the peak power values
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int confNRPZPowerControl(int Sensor, bool State, double Target_Level, double RF_Level_Limit, double Catch_Range, int Delay_Time, bool Use_Peak_Power)
        {
            int pInvokeResult = PInvoke.confNRPZPowerControl(this._handle, Sensor, System.Convert.ToUInt16(State), Target_Level, RF_Level_Limit, Catch_Range, Delay_Time, System.Convert.ToUInt16(Use_Peak_Power));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the sensor to be used for power control.
        /// 
        /// Remote-control command(s):
        /// [:SOURce&lt;hw&gt;]:POWer:SPC:SELect SENS1 | SENS2 | SENS3 | SENS4
        /// </summary>
        /// <param name="Sensor">
        /// This control sets  currently selected sensor to be used for power control.
        /// 
        /// Valid Values:
        /// RSSMA_NRPZ_POWER_CONTROL_SENSOR1  (0) - Sensor 1
        /// RSSMA_NRPZ_POWER_CONTROL_SENSOR2  (1) - Sensor 2
        /// RSSMA_NRPZ_POWER_CONTROL_SENSOR3  (2) - Sensor 3
        /// RSSMA_NRPZ_POWER_CONTROL_SENSOR4  (3) - Sensor 4
        /// 
        /// Default Value:
        /// RSSMA_NRPZ_POWER_CONTROL_SENSOR1  (0) - Sensor 1
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerControlSensor(int Sensor)
        {
            int pInvokeResult = PInvoke.SetPowerControlSensor(this._handle, Sensor);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the currently selected sensor to be used for power control.
        /// 
        /// Remote-control command(s):
        /// [:SOURce&lt;hw&gt;]:POWer:SPC:SELect?
        /// </summary>
        /// <param name="Sensor">
        /// This control returns the currently selected sensor to be used for power control.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerControlSensor(out int Sensor)
        {
            int pInvokeResult = PInvoke.GetPowerControlSensor(this._handle, out Sensor);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates/deactivates power control using the selected sensor
        /// 
        /// Remote-control command(s):
        /// [:SOURce&lt;hw&gt;]:POWer:SPC:STATe  On | OFF
        /// </summary>
        /// <param name="State">
        /// Activates/deactivates control using the selected sensor. The control loop periodically adjusts the generator output. After switching off, the running loop is completed.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerControlSensorState(bool State)
        {
            int pInvokeResult = PInvoke.SetPowerControlSensorState(this._handle, System.Convert.ToUInt16(State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the power control state of selected sensor
        /// 
        /// Remote-control command(s):
        /// [:SOURce&lt;hw&gt;]:POWer:SPC:STATe?
        /// </summary>
        /// <param name="State">
        /// Returns the power control state of selected sensor.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerControlSensorState(out bool State)
        {
            ushort StateAsUShort;
            int pInvokeResult = PInvoke.GetPowerControlSensorState(this._handle, out StateAsUShort);
            State = System.Convert.ToBoolean(StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets nominal level expected at the input of the sensor. 
        /// 
        /// Remote-control command(s):
        /// [:SOURce&lt;hw&gt;]:POWer:SPC:TARGet 
        /// </summary>
        /// <param name="Level">
        /// This control sets the nominal level expected at the input of the sensor.
        /// 
        /// Valid Values:
        /// -50.0 to 30.0 dBm
        /// 
        /// Default Value: -10.0 dBm
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerControlSensorTargetLevel(double Level)
        {
            int pInvokeResult = PInvoke.SetPowerControlSensorTargetLevel(this._handle, Level);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the nominal level expected at the input of the sensor. 
        /// 
        /// Remote-control command(s):
        /// [:SOURce&lt;hw&gt;]:POWer:SPC:TARGet?
        /// </summary>
        /// <param name="Level">
        /// This control returns the nominal level expected at the input of the sensor.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerControlSensorTargetLevel(out double Level)
        {
            int pInvokeResult = PInvoke.GetPowerControlSensorTargetLevel(this._handle, out Level);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the capture range of the power control system.
        /// 
        /// Within the range:
        /// Target Level +/- Catch Range
        /// the power control locks and tries to achieve the target level. Readings outside the range are not considered.
        /// 
        /// Remote-control command(s):
        /// [:SOURce&lt;hw&gt;]:POWer:SPC:CRANge 
        /// </summary>
        /// <param name="Catch_Range">
        /// This control sets the capture range of the power control system.
        /// Within the range Target Level +/- Catch Range
        /// the power control locks and tries to achieve the target level. Readings outside the range are not considered
        /// 
        /// Valid Values:
        /// 0.0 to 50.0 dB
        /// 
        /// Default Value: 30.0 dB
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerControlSensorCatchRange(double Catch_Range)
        {
            int pInvokeResult = PInvoke.SetPowerControlSensorCatchRange(this._handle, Catch_Range);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the capture range of the power control system.
        /// 
        /// Remote-control command(s):
        /// [:SOURce&lt;hw&gt;]:POWer:SPC:CRANge? 
        /// </summary>
        /// <param name="Catch_Range">
        /// Returns the capture range of the power control system.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerControlSensorCatchRange(out double Catch_Range)
        {
            int pInvokeResult = PInvoke.GetPowerControlSensorCatchRange(this._handle, out Catch_Range);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets  a waiting period between the level adjustment of the generator and the next measurement of the power sensor.
        /// 
        /// Remote-control command(s):
        /// [:SOURce&lt;hw&gt;]:POWer:SPC:DELay 
        /// </summary>
        /// <param name="Delay_Time">
        /// This control sets a waiting period between the level adjustment of the generator and the next measurement of the power sensor.
        /// 
        /// Valid Values:
        /// 0 to 1000
        /// 
        /// Default Value: 1
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerControlSensorDelayTime(int Delay_Time)
        {
            int pInvokeResult = PInvoke.SetPowerControlSensorDelayTime(this._handle, Delay_Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns  a waiting period between the level adjustment of the generator and the next measurement of the power sensor.
        /// 
        /// Remote-control command(s):
        /// [:SOURce&lt;hw&gt;]:POWer:SPC:DELay?
        /// </summary>
        /// <param name="Delay_Time">
        /// Returns a waiting period between the level adjustment of the generator and the next measurement of the power sensor.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerControlSensorDelayTime(out int Delay_Time)
        {
            int pInvokeResult = PInvoke.GetPowerControlSensorDelayTime(this._handle, out Delay_Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates/deactivates control by means of the peak power values, provided the power sensor supports this function.
        /// 
        /// Remote-control command(s):
        /// [:SOURce&lt;hw&gt;]:POWer:SPC:PEAK  ON | OFF
        /// </summary>
        /// <param name="State">
        /// Activates/deactivates power control by means of the peak power values
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerControlSensorPeakPowerState(bool State)
        {
            int pInvokeResult = PInvoke.SetPowerControlSensorPeakPowerState(this._handle, System.Convert.ToUInt16(State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the state of peak power values control.
        /// 
        /// 
        /// </summary>
        /// <param name="State">
        /// Returns the state of power peak power values control.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerControlSensorPeakPowerState(out bool State)
        {
            ushort StateAsUShort;
            int pInvokeResult = PInvoke.GetPowerControlSensorPeakPowerState(this._handle, out StateAsUShort);
            State = System.Convert.ToBoolean(StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the state which the RF output assumes when the instrument is switched on.
        /// 
        /// Remote-control command(s):
        /// OUTPut[:STATe]:PON OFF | UNCHanged
        /// 
        /// </summary>
        /// <param name="Power_On_State">
        /// Selects the state which the RF output assumes when the instrument is switched on.
        /// 
        /// Valid Values:
        /// RSSMA_OUTPUT_STATE_PON_OFF       (0) - RF Off
        /// RSSMA_OUTPUT_STATE_PON_UNCHANGED (1) - Previous Setting
        /// 
        /// Default Value: RSSMA_OUTPUT_STATE_PON_OFF (0)
        /// 
        /// Notes:
        /// 
        /// (1) RF Off:
        /// The output is deactivated when the instrument is switched on. 
        /// 
        /// (2) Previous Setting:
        /// When the instrument is switched on, the output remains in the same state as it was when the instrument was switched off.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetRFPowerOnState(int Power_On_State)
        {
            int pInvokeResult = PInvoke.SetRFPowerOnState(this._handle, Power_On_State);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the state which the RF output assumes when the instrument is switched on.
        /// 
        /// Remote-control command(s):
        /// OUTPut[:STATe]:PON?
        /// 
        /// </summary>
        /// <param name="Power_On_State">
        /// Returns the state which the RF output assumes when the instrument is switched on.
        /// 
        /// Valid Values:
        /// RSSMA_OUTPUT_STATE_PON_OFF       (0) - OFF
        /// RSSMA_OUTPUT_STATE_PON_UNCHANGED (1) - UNCHanged
        /// 
        /// Notes:
        /// 
        /// (1) OFF:
        /// The output is deactivated when the instrument is switched on. 
        /// 
        /// (2) UNCHanged:
        /// When the instrument is switched on, the output remains in the same state as it was when the instrument was switched off.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetRFPowerOnState(out int Power_On_State)
        {
            int pInvokeResult = PInvoke.GetRFPowerOnState(this._handle, out Power_On_State);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates/deactivates automatic level control. 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]POWer:ALC[:STATe] ON | OFF | AUTO
        /// 
        /// </summary>
        /// <param name="ALC_State">
        /// Activates/deactivates automatic level control.
        /// 
        /// Valid Values:
        /// RSSMA_POWER_ALC_STATE_OFF  (0) - Off (Sample &amp; Hold)
        /// RSSMA_POWER_ALC_STATE_ON   (1) - On
        /// RSSMA_POWER_ALC_STATE_AUTO (2) - Auto
        /// 
        /// Default Value: RSSMA_POWER_ALC_STATE_AUTO (2)
        /// 
        /// Notes:
        /// 
        /// (1) On:
        /// Level control is permanently activated.
        /// 
        /// (2) Off:
        /// Level control is operated according to the settings under :SOUR:POW:ALC:OMODe.
        /// 
        /// (3) Auto:
        /// Level control is activated/deactivated automatically depending on the operating state.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetALCState(int ALC_State)
        {
            int pInvokeResult = PInvoke.SetALCState(this._handle, ALC_State);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function state of the automatic level control. 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]POWer:ALC[:STATe]?
        /// 
        /// </summary>
        /// <param name="ALC_State">
        /// Returns state of the automatic level control.
        /// 
        /// Valid Values:
        /// RSSMA_POWER_ALC_STATE_OFF  (0) - Off (Sample &amp; Hold)
        /// RSSMA_POWER_ALC_STATE_ON   (1) - On
        /// RSSMA_POWER_ALC_STATE_AUTO (2) - Auto
        /// 
        /// Notes:
        /// 
        /// (1) On:
        /// Level control is permanently activated.
        /// 
        /// (2) Off:
        /// Level control is operated according to the settings under :SOUR:POW:ALC:OMODe.
        /// 
        /// (3) Auto:
        /// Level control is activated/deactivated automatically depending on the operating state.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetALCState(out int ALC_State)
        {
            int pInvokeResult = PInvoke.GetALCState(this._handle, out ALC_State);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function briefly activates level control for correction purposes. 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]POWer:ALC:SONCe
        /// 
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ALCSearchOnce()
        {
            int pInvokeResult = PInvoke.ALCSearchOnce(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates/deactivates level correction. Level correction is performed using the table which has been selected with the command CORRection:CSET:SELect.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]CORRection[:STATe] ON | OFF
        /// 
        /// </summary>
        /// <param name="Correction_State">
        /// Activates/deactivates level correction.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetUserCorrectionDataState(bool Correction_State)
        {
            int pInvokeResult = PInvoke.SetUserCorrectionDataState(this._handle, System.Convert.ToUInt16(Correction_State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries state of the level correction. Level correction is performed using the table which has been selected with the command CORRection:CSET:SELect.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]CORRection[:STATe]?
        /// 
        /// </summary>
        /// <param name="Correction_State">
        /// Returns state of the level correction.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUserCorrectionDataState(out bool Correction_State)
        {
            ushort Correction_StateAsUShort;
            int pInvokeResult = PInvoke.GetUserCorrectionDataState(this._handle, out Correction_StateAsUShort);
            Correction_State = System.Convert.ToBoolean(Correction_StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function requests a list of user correction tables. The individual lists are separated by commas. 
        /// 
        /// The lists are stored with the fixed file extensions *.uco in a directory of the user's choice. The directory applicable to the commands is defined with the command MMEMory:CDIR. A path can also be specified in command :SOUR:CORR:CSET:CAT?, in which case the files in the specified folder are read.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]CORRection:CSET:CATalog?
        /// 
        /// </summary>
        /// <param name="Directory_Path">
        /// Directory path parameter.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: VI_NULL
        /// 
        /// Note:
        /// 
        /// If no directory is specified (VI_NULL), the default directory is used.
        /// 
        /// </param>
        /// <param name="Array_Size">
        /// Array size of the parameter labeled 'Catalog List'.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 256
        /// 
        /// </param>
        /// <param name="Catalog_List">
        /// Reads back catalog list. Size of the list is limited by the 'Array Size' parameter.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUserCorrectionDataCatalog(string Directory_Path, int Array_Size, System.Text.StringBuilder Catalog_List)
        {
            int pInvokeResult = PInvoke.GetUserCorrectionDataCatalog(this._handle, Directory_Path, Array_Size, Catalog_List);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the table for user correction. Level correction must also be activated with the command [OURce:CORRection:CSET:STATe ON.
        /// 
        /// The lists are stored with the fixed file extensions *.uco in a directory of the user's choice. The directory applicable to the commands is defined with the command MMEMory:CDIR. A path can also be specified in command :SOUR:CORR:CSET:SEL, in which case the files in the specified folder are selected.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]CORRection:CSET[:SELect] &lt;table name&gt;
        /// 
        /// </summary>
        /// <param name="Correction_Table">
        /// Selects the table name for user correction.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetUserCorrectionDataTable(string Correction_Table)
        {
            int pInvokeResult = PInvoke.SetUserCorrectionDataTable(this._handle, Correction_Table);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the table name for user correction. Level correction must also be activated with the command SOURce:CORRection:CSET:STATe ON.
        /// 
        /// The lists are stored with the fixed file extensions *.uco in a directory of the user's choice. The directory applicable to the commands is defined with the command MMEMory:CDIR. A path can also be specified in command :SOUR:CORR:CSET:SEL, in which case the files in the specified folder are selected.
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]CORRection:CSET[:SELect]?
        /// 
        /// </summary>
        /// <param name="Correction_Table">
        /// Returns the table name for user correction.
        /// 
        /// Notes:
        /// 
        /// (1) The array must contain at least 128 elements ViChar[128].
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUserCorrectionDataTable(System.Text.StringBuilder Correction_Table)
        {
            int pInvokeResult = PInvoke.GetUserCorrectionDataTable(this._handle, Correction_Table);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function requests the current value for user correction.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]CORRection:VALue?
        /// 
        /// </summary>
        /// <param name="User_Correction_Value">
        /// Requests the current value for user correction.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUserCorrectionValue(out double User_Correction_Value)
        {
            int pInvokeResult = PInvoke.GetUserCorrectionValue(this._handle, out User_Correction_Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function transfers the frequency data to the table selected with :CORRection:CSET:SELect. 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]CORRection:CSET:DATA:FREQuency
        /// 
        /// </summary>
        /// <param name="Array_Size">
        /// Defines the number of elements in the 'Frequency Values' array.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: none
        /// 
        /// </param>
        /// <param name="Frequency_Values">
        /// Frequency correction values. Number of values is defined by 'Array Size' parameter.
        /// 
        /// Valid Values:
        /// 300 kHz...RFmax {,300 kHz...RFmax}, ..., (RFmax depending on model)
        /// 
        /// Default Value: none
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetUserCorrectionDataFrequencyValues(int Array_Size, double[] Frequency_Values)
        {
            int pInvokeResult = PInvoke.SetUserCorrectionDataFrequencyValues(this._handle, Array_Size, Frequency_Values);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the frequency data from the table selected with :CORRection:CSET:SELect.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]CORRection:CSET:DATA:FREQuency?
        /// 
        /// </summary>
        /// <param name="Array_Size">
        /// Defines the number of elements in the 'Frequency Values' array.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: none
        /// 
        /// </param>
        /// <param name="Frequency_Values">
        /// Returns frequency correction values. Number of values is limited by 'Array Size' parameter.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUserCorrectionDataFrequencyValues(int Array_Size, double[] Frequency_Values)
        {
            int pInvokeResult = PInvoke.GetUserCorrectionDataFrequencyValues(this._handle, Array_Size, Frequency_Values);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the number of frequency values in the table selected with :CORRection:CSET:SELect.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]CORRection:CSET:DATA:FREQuency:POINts?
        /// 
        /// </summary>
        /// <param name="Number_of_Frequency_Values">
        /// Returns the number of frequency values in the selected table.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUserCorrectionDataNumberofFrequencyValues(out int Number_of_Frequency_Values)
        {
            int pInvokeResult = PInvoke.GetUserCorrectionDataNumberofFrequencyValues(this._handle, out Number_of_Frequency_Values);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function transfers the level correction data to the table selected with :CORRection:CSET:SELect.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]CORRection:CSET:DATA:POWer
        /// 
        /// </summary>
        /// <param name="Array_Size">
        /// Defines the number of elements in the 'Frequency Values' array.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: none
        /// 
        /// </param>
        /// <param name="Level_Values">
        /// Level correction values. Number of values is defined by 'Array Size' parameter.
        /// 
        /// Valid Values:
        /// -40dB...6dB {, -40dB...6dB}, ...
        /// 
        /// Default Value: none
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetUserCorrectionDataLevelValues(int Array_Size, double[] Level_Values)
        {
            int pInvokeResult = PInvoke.SetUserCorrectionDataLevelValues(this._handle, Array_Size, Level_Values);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the level correction data of the table selected with :CORRection:CSET:SELect.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]CORRection:CSET:DATA:POWer?
        /// 
        /// </summary>
        /// <param name="Array_Size">
        /// Defines the number of elements in the 'Level Values' array.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: none
        /// 
        /// </param>
        /// <param name="Level_Values">
        /// Returns level correction values. Number of values is defined by 'Array Size' parameter.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUserCorrectionDataLevelValues(int Array_Size, double[] Level_Values)
        {
            int pInvokeResult = PInvoke.GetUserCorrectionDataLevelValues(this._handle, Array_Size, Level_Values);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the number of level values in the selected table. 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]CORRection:CSET:DATA:POWer:POINts?
        /// 
        /// </summary>
        /// <param name="Number_of_Level_Values">
        /// Returns the number of level values in the selected table.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUserCorrectionDataNumberofLevelValues(out int Number_of_Level_Values)
        {
            int pInvokeResult = PInvoke.GetUserCorrectionDataNumberofLevelValues(this._handle, out Number_of_Level_Values);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function fills the selected user correction list with the level values measured by the power sensor for the given frequencies 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]CORRection:CSET:DATA[:SENSor&lt;1...3&gt;][:POWer]:SONCe
        /// *OPC?
        /// </summary>
        /// <param name="Sensor">
        /// Selects the sensor.
        /// 
        /// Valid Values: 
        /// 1 to 3
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Timeout">
        /// Sets the timeout for the calibration routine to be finished and have obtained calibration result. If the length of time required for calibration exceeds the timeout value, then the function will return with a timeout error and the instrument will continue with calibration.
        /// 
        /// Valid Range: 0 ms to 600000 ms
        /// 
        /// Default Value: 180000 ms
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int UserCorrectionFillListWithSensor(int Sensor, int Timeout)
        {
            int pInvokeResult = PInvoke.UserCorrectionFillListWithSensor(this._handle, Sensor, Timeout);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function deletes the specified table.
        /// 
        /// The lists are stored with the fixed file extensions *.uco in a directory of the user's choice. The directory applicable to the commands is defined with the command MMEMory:CDIR. A path can also be specified in command :SOUR:CORR:CSET:CAT?, in which case the file in the specified folder is deleted.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]CORRection:CSET:DELete &lt;table name&gt;
        /// 
        /// </summary>
        /// <param name="Table_Name">
        /// Specified table name to be deleted.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int UserCorrectionDataDeleteTable(string Table_Name)
        {
            int pInvokeResult = PInvoke.UserCorrectionDataDeleteTable(this._handle, Table_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the level control mode which becomes active when automatic level control is deactivated (ALC Off). 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]POWer:ALC:OMODe SHOLd
        /// </summary>
        /// <param name="List_Mode">
        /// This control sets the level control mode which becomes active when automatic level control is deactivated (ALC Off). 
        /// 
        /// Valid Values:
        /// RSSMA_ALC_OFF_MODE_SHOLD (0) - Shold
        /// 
        /// Default Value: RSSMA_ALC_OFF_MODE_SHOLD (0)
        /// 
        /// Note(s):
        /// (1) SHOLd - Level control is activated briefly if the level or frequency changes (ALC Off Sample &amp; Hold).
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetALCOffMode(int List_Mode)
        {
            int pInvokeResult = PInvoke.SetALCOffMode(this._handle, List_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the level control mode which becomes active when automatic level control is deactivated (ALC Off). 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]POWer:ALC:OMODe?
        /// </summary>
        /// <param name="List_Mode">
        /// This control displays the level control mode which becomes active when automatic level control is deactivated (ALC Off). 
        /// 
        /// Valid Values:
        /// RSSMA_ALC_OFF_MODE_SHOLD (0) - Shold
        /// 
        /// Note(s):
        /// (1) SHOLd - Level control is activated briefly if the level or frequency changes (ALC Off Sample &amp; Hold).
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetALCOffMode(out int List_Mode)
        {
            int pInvokeResult = PInvoke.GetALCOffMode(this._handle, out List_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects if user correction lists should be imported or exported.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]CORRection:DEXChange:MODE IMPort | EXPort
        /// </summary>
        /// <param name="List_Mode">
        /// This control selects if list mode lists should be imported or exported. The settings offered below depend on the selected mode.
        /// 
        /// Valid Values:
        /// RSSMA_DEXC_MODE_IMPORT (0) - Import
        /// RSSMA_DEXC_MODE_EXPORT (1) - Export
        /// 
        /// Default Value: RSSMA_DEXC_MODE_IMPORT (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetUserCorrectionImportExportListMode(int List_Mode)
        {
            int pInvokeResult = PInvoke.SetUserCorrectionImportExportListMode(this._handle, List_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns whether user correction lists is imported or exported.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]CORRection:DEXChange:MODE?
        /// </summary>
        /// <param name="List_Mode">
        /// This control returns whether user correction lists is imported or exported.
        /// 
        /// Valid Values:
        /// RSSMA_DEXC_MODE_IMPORT (0) - Import
        /// RSSMA_DEXC_MODE_EXPORT (1) - Export
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUserCorrectionImportExportListMode(out int List_Mode)
        {
            int pInvokeResult = PInvoke.GetUserCorrectionImportExportListMode(this._handle, out List_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function calls the File Manager for selecting the user correction list to be exported (source) into an ASCII file or the destination for the ASCII file to be imported (destination) in. 
        /// 
        /// The user correction files are stored with the fixed file extensions *.lsw in a directory of the user's choice. The directory applicable to the commands is defined with the command MMEMory:CDIR. A path can also be specified in command SOUR:LIST:DEXC:SEL, in which case the files are stored or loaded in the specified directory.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]CORRection:DEXChange:SELect
        /// </summary>
        /// <param name="Source_File">
        /// This control sets the source file.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetUserCorrectionImportExportListFile(string Source_File)
        {
            int pInvokeResult = PInvoke.SetUserCorrectionImportExportListFile(this._handle, Source_File);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function calls the File Manager for querying the user correction list to be exported (source) into an ASCII file or the destination for the ASCII file to be imported (destination) in.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]CORRection:DEXChange:SELect?
        /// </summary>
        /// <param name="Source_File">
        /// This control queries the source file.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUserCorrectionImportExportListFile(System.Text.StringBuilder Source_File)
        {
            int pInvokeResult = PInvoke.GetUserCorrectionImportExportListFile(this._handle, Source_File);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function starts the export or import of the selected file. 
        /// When import is selected, the ASCII file is imported as user correction list.
        /// 
        /// When export is selected, the user correction list is exported into the selected ASCII file.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]CORRection:DEXChange:EXECute
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int UserCorrectionImportExportExecute()
        {
            int pInvokeResult = PInvoke.UserCorrectionImportExportExecute(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function calls the File Manager for selecting the ASCII file to be imported into a user correction list (source) or the ASCII file the user correction list is exported (destination) in.
        /// 
        /// The ASCII files are stored with the fixed file extensions *.txt or *.csv in a directory of the user's choice. The directory applicable to the commands is defined with the command MMEMory:CDIR.  A path can also be specified in command SOUR:LIST:DEXC:AFIL:SEL, in which case the files are stored or loaded in the specified directory.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]CORRection:DEXChange:AFILe:SELect
        /// </summary>
        /// <param name="ASCII_Source_File">
        /// This control sets the ASCII source file.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetUserCorrectionImportExportASCIIFile(string ASCII_Source_File)
        {
            int pInvokeResult = PInvoke.SetUserCorrectionImportExportASCIIFile(this._handle, ASCII_Source_File);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function calls the File Manager for querying the ASCII file to be imported into a user correction list (source) or the ASCII file the user correction list is exported (destination) in.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]CORRection:DEXChange:AFILe:SELect?
        /// </summary>
        /// <param name="ASCII_Source_File">
        /// This control queries the ASCII source file.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUserCorrectionImportExportASCIIFile(System.Text.StringBuilder ASCII_Source_File)
        {
            int pInvokeResult = PInvoke.GetUserCorrectionImportExportASCIIFile(this._handle, ASCII_Source_File);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the file extension of the ASCII file to be imported or exported. Selection TXT (text file) or CSV (Excel file) is available. 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]CORRection:DEXChange:AFILe:EXTension TXT | CSV
        /// </summary>
        /// <param name="Extension">
        /// This control selects the file extension of the ASCII file to be imported or exported. Selection TXT (text file) or CSV (Excel file) is available.
        /// 
        /// Valid Values:
        /// RSSMA_DEXC_ASCII_SOURCE_FILE_EXT_TXT (0) - txt
        /// RSSMA_DEXC_ASCII_SOURCE_FILE_EXT_CSV (1) - csv
        /// 
        /// Default Value:
        /// RSSMA_DEXC_ASCII_SOURCE_FILE_EXT_TXT (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetUserCorrectionImportExportASCIIExtension(int Extension)
        {
            int pInvokeResult = PInvoke.SetUserCorrectionImportExportASCIIExtension(this._handle, Extension);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the selected file extension of the ASCII file to be imported or exported. Selection TXT (text file) or CSV (Excel file) is available. 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]CORRection:DEXChange:AFILe:EXTension?
        /// </summary>
        /// <param name="Extension">
        /// This control displays the file extension of the ASCII file to be imported or exported. Selection TXT (text file) or CSV (Excel file) is available.
        /// 
        /// Valid Values:
        /// RSSMA_DEXC_ASCII_SOURCE_FILE_EXT_TXT (0) - txt
        /// RSSMA_DEXC_ASCII_SOURCE_FILE_EXT_CSV (1) - csv
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUserCorrectionImportExportASCIIExtension(out int Extension)
        {
            int pInvokeResult = PInvoke.GetUserCorrectionImportExportASCIIExtension(this._handle, out Extension);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the separator between the frequency and level column of the ASCII table. 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]CORRection:DEXChange:AFILe:SEParator:COLumn TABulator | SEMicolon | COMMa | SPACe
        /// </summary>
        /// <param name="Separator">
        /// This control selects the separator between the frequency and level column of the ASCII table. 
        /// 
        /// Valid Values:
        /// RSSMA_DEXC_ASCII_SOURCE_FILE_COLUMN_SEP_TAB   (0) - Tabulator
        /// RSSMA_DEXC_ASCII_SOURCE_FILE_COLUMN_SEP_SEM   (1) - Semicolon
        /// RSSMA_DEXC_ASCII_SOURCE_FILE_COLUMN_SEP_COMMA (2) - Comma
        /// RSSMA_DEXC_ASCII_SOURCE_FILE_COLUMN_SEP_SPACE (3) - Space
        /// 
        /// Default Value:
        /// RSSMA_DEXC_ASCII_SOURCE_FILE_COLUMN_SEP_TAB (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetUserCorrectionImportExportASCIIColumnSeparator(int Separator)
        {
            int pInvokeResult = PInvoke.SetUserCorrectionImportExportASCIIColumnSeparator(this._handle, Separator);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the selected separator between the frequency and level column of the ASCII table. 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]CORRection:DEXChange:AFILe:SEParator:COLumn?
        /// </summary>
        /// <param name="Separator">
        /// This control displays the separator between the frequency and level column of the ASCII table. 
        /// 
        /// Valid Values:
        /// RSSMA_DEXC_ASCII_SOURCE_FILE_COLUMN_SEP_TAB   (0) - Tabulator
        /// RSSMA_DEXC_ASCII_SOURCE_FILE_COLUMN_SEP_SEM   (1) - Semicolon
        /// RSSMA_DEXC_ASCII_SOURCE_FILE_COLUMN_SEP_COMMA (2) - Comma
        /// RSSMA_DEXC_ASCII_SOURCE_FILE_COLUMN_SEP_SPACE (3) - Space
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUserCorrectionImportExportASCIIColumnSeparator(out int Separator)
        {
            int pInvokeResult = PInvoke.GetUserCorrectionImportExportASCIIColumnSeparator(this._handle, out Separator);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the decimal separator used in the ASCII data between '.' (decimal point) and ',' (comma) with floating-point numerals.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]CORRection:DEXChange:AFILe:SEParator:DECimal DOT | COMMa
        /// </summary>
        /// <param name="Decimal_Separator">
        /// This control selects the decimal separator used in the ASCII data between '.' (decimal point) and ',' (comma) with floating-point numerals.  
        /// 
        /// Valid Values:
        /// RSSMA_DEXC_ASCII_SOURCE_FILE_COLUMN_DEC_SEP_DOT   (0) - Dot
        /// RSSMA_DEXC_ASCII_SOURCE_FILE_COLUMN_DEC_SEP_COMMA (1) - Comma
        /// 
        /// Default Value:
        /// RSSMA_DEXC_ASCII_SOURCE_FILE_COLUMN_DEC_SEP_DOT (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetUserCorrectionImportExportASCIIDecimalSeparator(int Decimal_Separator)
        {
            int pInvokeResult = PInvoke.SetUserCorrectionImportExportASCIIDecimalSeparator(this._handle, Decimal_Separator);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function displays the selected decimal separator used in the ASCII data - '.' (decimal point) and ',' (comma) with floating-point numerals.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]CORRection:DEXChange:AFILe:SEParator:DECimal?
        /// </summary>
        /// <param name="Decimal_Separator">
        /// This control displays the decimal separator used in the ASCII data between '.' (decimal point) and ',' (comma) with floating-point numerals.  
        /// 
        /// Valid Values:
        /// RSSMA_DEXC_ASCII_SOURCE_FILE_COLUMN_DEC_SEP_DOT   (0) - Dot
        /// RSSMA_DEXC_ASCII_SOURCE_FILE_COLUMN_DEC_SEP_COMMA (1) - Comma
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUserCorrectionImportExportASCIIDecimalSeparator(out int Decimal_Separator)
        {
            int pInvokeResult = PInvoke.GetUserCorrectionImportExportASCIIDecimalSeparator(this._handle, out Decimal_Separator);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function requests a list of available ASCII files for export/import of user correction data. The individual files are separated by commas.
        ///  
        /// The ASCII files are stored with the fixed file extensions *.txt or *.csv in a directory of the user's choice. The directory applicable to the commands is defined with the command MMEMory:CDIR.  A path can also be specified in command SOUR:LIST:DEXC:AFIL:CAT?, in which case the files in the specified directory are read.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]CORRection:DEXChange:AFILe:CATalog?
        /// 
        /// </summary>
        /// <param name="Array_Size">
        /// Array size of the parameter labeled 'Catalog List'.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 256
        /// 
        /// </param>
        /// <param name="Catalog_List">
        /// Reads back catalog list. Size of the list is limited by the 'Array Size' parameter.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int UserCorrectionImportExportCatalog(int Array_Size, System.Text.StringBuilder Catalog_List)
        {
            int pInvokeResult = PInvoke.UserCorrectionImportExportCatalog(this._handle, Array_Size, Catalog_List);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configure the power sense (NRP-Z Power View)
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:ZERO
        /// INITiate&lt;[1]...3&gt;[POWer]:CONTinuous
        /// SENSe&lt;[1]...3&gt;:UNIT[:POWer]
        /// SENSe&lt;[1]...3&gt;[:POWer]:DISPlay:PERManent:STATe
        /// SENSe&lt;[1]...3&gt;[:POWer]:SOURce
        /// SENSe[:POWer]:FREQuency
        /// SENSe&lt;[1]...3&gt;[:POWer]:FILTer:TYPE
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Init_Power_Meas">
        /// Activates/deactivates the continuous power measurement by the R&amp;S NRP-Z power sensors. 
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <param name="Unit">
        /// This control sets the unit used for result query with command READ.
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_UNIT_DBM  (0) - dBm
        /// RSSMA_SENSE_POWER_UNIT_DBUV (1) - dBuV
        /// RSSMA_SENSE_POWER_UNIT_WATT (2) - Watt
        /// 
        /// Default Value:
        /// RSSMA_SENSE_POWER_UNIT_DBM  (0) - dBm
        /// </param>
        /// <param name="Permanent_Display">
        /// Switches on and off  the permanent indication of the power measurement result in the upper right corner of the block diagram. 
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <param name="Source">
        /// This control selects the signal source for the measurement.
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_SOURCE_A    (0) - A
        /// RSSMA_SENSE_POWER_SOURCE_USER (1) - User
        /// RSSMA_SENSE_POWER_SOURCE_B    (2) - B
        /// 
        /// Default Value:
        /// RSSMA_SENSE_POWER_SOURCE_A (0)
        /// </param>
        /// <param name="Frequency">
        /// This control sets the RF frequency of the source if the user source is selected (SENSe[:POWer]:SOURce USER.)
        /// 
        /// Valid Values:
        /// depends on used sensor
        /// 
        /// Default Value: 1.0e9 Hz
        /// </param>
        /// <param name="Filter_Mode">
        /// This control sets the filter mode. 
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_FILTER_TYPE_AUTO (0) - Auto
        /// RSSMA_SENSE_POWER_FILTER_TYPE_USER (1) - User
        /// RSSMA_SENSE_POWER_FILTER_TYPE_NSR  (2) - Fixed Noise
        /// 
        /// Default Value:
        /// RSSMA_SENSE_POWER_FILTER_TYPE_AUTO (0) - Auto
        /// 
        /// Note(s):
        /// 
        /// (1) AUTO:
        /// The filter length is automatically selected depending on the measured value. For high values, a short filter length is selected and for low values a long filter length is selected.
        /// 
        /// (2) USER:
        /// The filter length is set manually. As the filter length works as a multiplier for the measurement time, this results in a constant measurement time.
        /// 
        /// (3) Fixed Noise: The filter lenghth (averaging factor) is selected so that the sensor's intrinsic noise (2 standard deviations) does not exceed the specified noise content. The desired noise content is entered with command SENSe:FILTer:NSRatio. To avoid very long settling times when the power is low, the averaging factor can be limited with the Timeout parameter (command SENSe:FILTer:NSRatio:MTIMe).
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int confPowerSense(int Sense, bool Init_Power_Meas, int Unit, bool Permanent_Display, int Source, double Frequency, int Filter_Mode)
        {
            int pInvokeResult = PInvoke.confPowerSense(this._handle, Sense, System.Convert.ToUInt16(Init_Power_Meas), Unit, System.Convert.ToUInt16(Permanent_Display), Source, Frequency, Filter_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configure the power sense response measurement.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:MODE 
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:FREQuency:STARt   &lt;frequency&gt;
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:FREQuency:STOP   &lt;frequency&gt;
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:FREQuency:STEPs
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:FREQuency:TIMing[:MODE]
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:FREQuency:SPACing[:MODE] 
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:POWer:STARt   &lt;power&gt;
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:POWer:STOP   &lt;power&gt;
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:POWer:STEPs 
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:POWer:TIMing[:MODE]
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:POWer:SPACing[:MODE]
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:TIME:STARt
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:TIME:STOP
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:TIME:STEPs
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Sweep_Mode">
        /// This control selects power versus frequency measurement (frequency response) or power vs power measurment (power sweep, AM/AM) 
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_SWEEP_MODE_FREQ (0) - Frequency
        /// RSSMA_SENSE_POWER_SWEEP_MODE_POW  (1) - Power
        /// RSSMA_SENSE_POWER_SWEEP_MODE_TIME (2) - Time
        /// 
        /// Default Value:
        /// RSSMA_SENSE_POWER_SWEEP_MODE_FREQ (0) - Frequency
        /// 
        /// </param>
        /// <param name="Start">
        /// This control sets the start frequency/power/time for the frequency/power/time response measurement.
        /// 
        /// Valid Values:
        /// 1.0e9 to 22.0e9 Hz for Frequency Sweep Mode
        /// -140.0 to 30 dBm for Power Sweep Mode
        /// -1.0 to 1.0 s for Time Sweep Mode
        /// 
        /// Default Value: 0.0
        /// </param>
        /// <param name="Stop">
        /// This control sets the stop frequency/power for the frequency/power response measurement.
        /// 
        /// Valid Values:
        /// 1.0e9 to 22.0e9 Hz for Frequency Sweep Mode
        /// -140.0 to 30 dBm for Power Sweep Mode
        /// 0.0 to 2.0 s for Time Sweep Mode
        /// 
        /// Default Value: 0.0
        /// </param>
        /// <param name="Timing">
        /// This control sets the frequency/power timing. 
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_SWEEP_TIMING_NORM (0) - Normal
        /// RSSMA_SENSE_POWER_SWEEP_TIMING_FAST (1) - Fast
        /// 
        /// Default Value:
        /// RSSMA_SENSE_POWER_SWEEP_TIMING_NORM (0) - Normal
        /// 
        /// Note(s):
        /// 
        /// (1) - Selection FAST leads to a fast measurement with a short integration times for each measurement step, NORMal leads to a longer but more precise measurement due to a higher integration time for each step.
        /// 
        /// (2) This control is ignored for Time Sweep Mode.
        /// </param>
        /// <param name="Steps">
        /// This control sets the number of measurement steps.
        /// 
        /// Valid Values:
        /// 10 steps to 1000 steps
        /// 
        /// Default Value: 500 steps
        /// </param>
        /// <param name="Spacing">
        /// This control selects the spacing for the frequency response measurement. 
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_SWEEP_SPACING_LIN (0) - Linear
        /// RSSMA_SENSE_POWER_SWEEP_SPACING_LOG (1) - Logaritmic
        /// 
        /// Default Value:
        /// RSSMA_SENSE_POWER_SWEEP_SPACING_LIN (0) - Linear
        /// 
        /// Note(s):
        /// 
        /// (1) Logarithmic: This value is not available when Sweep Mode is set to Power.
        /// 
        /// (2) This control is ignored for Time Sweep Mode.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int confPowerResponseMeasurement(int Sense, int Sweep_Mode, double Start, double Stop, int Timing, int Steps, int Spacing)
        {
            int pInvokeResult = PInvoke.confPowerResponseMeasurement(this._handle, Sense, Sweep_Mode, Start, Stop, Timing, Steps, Spacing);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the power sense level offset.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K28
        /// 
        /// Remote-control command(s):
        /// :SENSe&lt;ch&gt;[:POWer]:SWEep:FREQuency[:SENSor]:OFFSet:STATe
        /// :SENSe&lt;ch&gt;[:POWer]:SWEep:POWer[:SENSor]:OFFSet:STATe
        /// :SENSe&lt;ch&gt;[:POWer]:SWEep:TIME[:SENSor]:OFFSet:STATe
        /// :SENSe&lt;ch&gt;[:POWer]:SWEep:FREQuency[:SENSor]:OFFSet
        /// :SENSe&lt;ch&gt;[:POWer]:SWEep:POWer[:SENSor]:OFFSet
        /// :SENSe&lt;ch&gt;[:POWer]:SWEep:TIME[:SENSor]:OFFSet
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 4 - Third Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Sweep_Mode">
        /// This control selects power versus frequency measurement (frequency response) or power vs power measurment (power sweep, AM/AM) 
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_SWEEP_MODE_FREQ (0) - Frequency
        /// RSSMA_SENSE_POWER_SWEEP_MODE_POW  (1) - Power
        /// RSSMA_SENSE_POWER_SWEEP_MODE_TIME (2) - Time
        /// 
        /// Default Value:
        /// RSSMA_SENSE_POWER_SWEEP_MODE_FREQ (0) - Frequency
        /// 
        /// </param>
        /// <param name="Offset_State">
        /// Activates/deactivates level offset at the sensor input in dB. 
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <param name="Offset">
        /// This control sets a level offset at the sensor input in dB. 
        /// 
        /// Valid Values:
        /// -100 dB to 100 dB
        /// 
        /// Default Value: 0.0 dB
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int confPowerResponseMeasurementLevelOffset(int Sense, int Sweep_Mode, bool Offset_State, double Offset)
        {
            int pInvokeResult = PInvoke.confPowerResponseMeasurementLevelOffset(this._handle, Sense, Sweep_Mode, System.Convert.ToUInt16(Offset_State), Offset);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configure the power sense response measurement.
        /// 
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:FREQuency:YSCale:MINimum
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:FREQuency:YSCale:MAXimum
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:POWer:YSCale:MINimum
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:POWer:YSCale:MAXimum
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:RMODe
        /// 
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Frequency_Y_Scale_Minimum">
        /// This control sets the minimum value for the y axis of the measurement diagram.
        /// 
        /// Valid Values:
        /// -200 dBm to 100 dBm
        /// 
        /// Default Value: -40 dBm
        /// </param>
        /// <param name="Frequency_Y_Scale_Maximum">
        /// wThis control sets the maximum value for the y axis of the measurement diagram.
        /// 
        /// Valid Values:
        /// -200 dBm to 100 dBm
        /// 
        /// Default Value: 40 dBm
        /// </param>
        /// <param name="Power_Y_Scale_Minimum">
        /// This control sets the minimum value for the y axis of the measurement diagram.
        /// 
        /// Valid Values:
        /// -200 dBm to 100 dBm
        /// 
        /// Default Value: -40 dBm
        /// </param>
        /// <param name="Power_Y_Scale_Maximum">
        /// This control sets the minimum value for the y axis of the measurement diagram.
        /// 
        /// Valid Values:
        /// -200 dBm to 100 dBm
        /// 
        /// Default Value: 40 dBm
        /// </param>
        /// <param name="Sense_Mode">
        /// This control selects single or contimuous mode for response measurement.
        /// 
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_SWEEP_RMODE_SING (0) - Single
        /// RSSMA_SENSE_POWER_SWEEP_RMODE_CONT (1) - Continuous
        /// 
        /// Default Value:
        /// RSSMA_SENSE_POWER_SWEEP_RMODE_SING (0) - Single
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int confPowerResponseMeasurementDiagram(int Sense, double Frequency_Y_Scale_Minimum, double Frequency_Y_Scale_Maximum, double Power_Y_Scale_Minimum, double Power_Y_Scale_Maximum, int Sense_Mode)
        {
            int pInvokeResult = PInvoke.confPowerResponseMeasurementDiagram(this._handle, Sense, Frequency_Y_Scale_Minimum, Frequency_Y_Scale_Maximum, Power_Y_Scale_Minimum, Power_Y_Scale_Maximum, Sense_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates the autozero function. Zeroing is required in regular interval (at least once a day)and if the temperature has varied more than about 5 ?C, if the sensor has been replaced or if measurements of signals with very low power are to be performed. The sensor must be disconnected from all power sources before starting the autozero function.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:ZERO
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int PowerZero(int Sense)
        {
            int pInvokeResult = PInvoke.PowerZero(this._handle, Sense);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates/deactivates the continuous power measurement by the R&amp;S NRP-Z power sensors. 
        /// 
        /// Remote-control command(s):
        /// INITiate&lt;[1]...3&gt;[POWer]:CONTinuous
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Init_Power_Meas">
        /// Activates/deactivates the continuous power measurement by the R&amp;S NRP-Z power sensors. 
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetInitiatePowerMeasurement(int Sense, bool Init_Power_Meas)
        {
            int pInvokeResult = PInvoke.SetInitiatePowerMeasurement(this._handle, Sense, System.Convert.ToUInt16(Init_Power_Meas));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns activation the continuous power measurement by the R&amp;S NRP-Z power sensors. 
        /// 
        /// Remote-control command(s):
        /// INITiate&lt;[1]...3&gt;[POWer]:CONTinuous?
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Init_Power_Meas">
        /// Displays the activation of the continuous power measurement by the R&amp;S NRP-Z power sensors. 
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetInitiatePowerMeasurement(int Sense, out bool Init_Power_Meas)
        {
            ushort Init_Power_MeasAsUShort;
            int pInvokeResult = PInvoke.GetInitiatePowerMeasurement(this._handle, Sense, out Init_Power_MeasAsUShort);
            Init_Power_Meas = System.Convert.ToBoolean(Init_Power_MeasAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates/deactivates the use of the s-parameters correction data of the connected power sensor. 
        /// 
        /// Note(s):
        /// (1) For power sensor with attenuator this command is automatically set to ON.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:CORRection:SPDevice:STATe On | OFF
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Use_SParameters">
        /// Activates/deactivates the use of the s-parameters correction data of the connected power sensor. 
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerUseSParameters(int Sense, bool Use_SParameters)
        {
            int pInvokeResult = PInvoke.SetPowerUseSParameters(this._handle, Sense, System.Convert.ToUInt16(Use_SParameters));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the state of usage of the s-parameters correction data of the connected power sensor. 
        /// 
        /// Note(s):
        /// (1) For power sensor with attenuator this command is automatically set to ON.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:CORRection:SPDevice:STATe?
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Use_SParameters">
        /// Displays the usage of the s-parameters correction data of the connected power sensor. 
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerUseSParameters(int Sense, out bool Use_SParameters)
        {
            ushort Use_SParametersAsUShort;
            int pInvokeResult = PInvoke.GetPowerUseSParameters(this._handle, Sense, out Use_SParametersAsUShort);
            Use_SParameters = System.Convert.ToBoolean(Use_SParametersAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the RF frequency of the source if the user source is selected (SENSe[:POWer]:SOURce USER.)
        /// 
        /// Remote-control command(s):
        /// SENSe[:POWer]:FREQuency
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Frequency">
        /// This control sets the RF frequency of the source if the user source is selected (SENSe[:POWer]:SOURce USER.)
        /// 
        /// Valid Values:
        /// depends on used sensor
        /// 
        /// Default Value: 1.0e9 Hz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerFrequency(int Sense, double Frequency)
        {
            int pInvokeResult = PInvoke.SetPowerFrequency(this._handle, Sense, Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the RF frequency of the source if the user source is selected (SENSe[:POWer]:SOURce USER.)
        /// 
        /// Remote-control command(s):
        /// SENSe[:POWer]:FREQuency?
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Frequency">
        /// This control displays the RF frequency of the source if the user source is selected (SENSe[:POWer]:SOURce USER.)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerFrequency(int Sense, out double Frequency)
        {
            int pInvokeResult = PInvoke.GetPowerFrequency(this._handle, Sense, out Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets a level offset which is added to the measured level value after activation with command SENSe[:POWer]:OFFSet:STATe ON. This allows e.g. an attenuator in the signal path to be taken into account.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:OFFSet
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Offset">
        /// This control sets a level offset which.
        /// 
        /// Valid Values:
        /// -100 dB to 100 dB
        /// 
        /// Default Value: 0.0 dB
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerOffset(int Sense, double Offset)
        {
            int pInvokeResult = PInvoke.SetPowerOffset(this._handle, Sense, Offset);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns a level offset which is added to the measured level value after activation with command SENSe[:POWer]:OFFSet:STATe ON. This allows e.g. an attenuator in the signal path to be taken into account.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:OFFSet?
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Offset">
        /// This control displays a level offset which.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerOffset(int Sense, out double Offset)
        {
            int pInvokeResult = PInvoke.GetPowerOffset(this._handle, Sense, out Offset);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates/deactivates the addition of  the level offset to the measured value. The level offset value is set with command SENSe[:POWer]:OFFSet.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:OFFSet:STATe On | OFF
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Offset_State">
        /// Activates/deactivates the addition of  the level offset to the measured value. The level offset value is set with command SENSe[:POWer]:OFFSet. 
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerOffsetState(int Sense, bool Offset_State)
        {
            int pInvokeResult = PInvoke.SetPowerOffsetState(this._handle, Sense, System.Convert.ToUInt16(Offset_State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the state of activation the addition of  the level offset to the measured value. The level offset value is set with command SENSe[:POWer]:OFFSet.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:OFFSet:STATe?
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Offset_State">
        /// Displays activation the addition of  the level offset to the measured value. The level offset value is set with command SENSe[:POWer]:OFFSet. 
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerOffsetState(int Sense, out bool Offset_State)
        {
            ushort Offset_StateAsUShort;
            int pInvokeResult = PInvoke.GetPowerOffsetState(this._handle, Sense, out Offset_StateAsUShort);
            Offset_State = System.Convert.ToBoolean(Offset_StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The command selects the signal source for the measurement. The RF signal or a user defined source can be selected.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SOURce A | USER | B
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Source">
        /// This control selects the signal source for the measurement.
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_SOURCE_A    (0) - A
        /// RSSMA_SENSE_POWER_SOURCE_USER (1) - User
        /// RSSMA_SENSE_POWER_SOURCE_B    (2) - B
        /// 
        /// Default Value:
        /// RSSMA_SENSE_POWER_SOURCE_A (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSource(int Sense, int Source)
        {
            int pInvokeResult = PInvoke.SetPowerSource(this._handle, Sense, Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The command queries the signal source for the measurement.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SOURce?
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Source">
        /// This control displays the signal source for the measurement.
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_SOURCE_A    (0) - A
        /// RSSMA_SENSE_POWER_SOURCE_USER (1) - User
        /// RSSMA_SENSE_POWER_SOURCE_B    (2) - B
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSource(int Sense, out int Source)
        {
            int pInvokeResult = PInvoke.GetPowerSource(this._handle, Sense, out Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The command selects the unit used for result query with command READ. The power sensor provides the measured value in Watt. In which unit the measured value is returned is selected here
        /// and might be either Watt, dBm or dBuV.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;:UNIT[:POWer] DBM | DBUV | WATT
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Unit">
        /// This control sets the unit used for result query with command READ.
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_UNIT_DBM  (0) - dBm
        /// RSSMA_SENSE_POWER_UNIT_DBUV (1) - dBuV
        /// RSSMA_SENSE_POWER_UNIT_WATT (2) - Watt
        /// 
        /// Default Value:
        /// RSSMA_SENSE_POWER_UNIT_DBM  (0) - dBm
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerUnit(int Sense, int Unit)
        {
            int pInvokeResult = PInvoke.SetPowerUnit(this._handle, Sense, Unit);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the unit used for result query with command READ.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;:UNIT[:POWer]?
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Unit">
        /// This control displays the unit used for result query with command READ.
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_UNIT_DBM  (0) - dBm
        /// RSSMA_SENSE_POWER_UNIT_DBUV (1) - dBuV
        /// RSSMA_SENSE_POWER_UNIT_WATT (2) - Watt
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerUnit(int Sense, out int Unit)
        {
            int pInvokeResult = PInvoke.GetPowerUnit(this._handle, Sense, out Unit);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function switches on and off  the permanent indication of the power measurement result in the upper right corner of the block diagram. For each sensor, the type of sensor, the connector, the measurement source and - if set - the offset is indicated.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:DISPlay:PERManent:STATe
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Permanent_Display">
        /// Switches on and off  the permanent indication of the power measurement result in the upper right corner of the block diagram. 
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerDisplayPermanentState(int Sense, bool Permanent_Display)
        {
            int pInvokeResult = PInvoke.SetPowerDisplayPermanentState(this._handle, Sense, System.Convert.ToUInt16(Permanent_Display));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns on and off state of the permanent indication of the power measurement result in the upper right corner of the block diagram. For each sensor, the type of sensor, the connector, the measurement source and - if set - the offset is indicated.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:DISPlay:PERManent:STATe?
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Permanent_Display">
        /// Displays switches on and off  the permanent indication of the power measurement result in the upper right corner of the block diagram. 
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerDisplayPermanentState(int Sense, out bool Permanent_Display)
        {
            ushort Permanent_DisplayAsUShort;
            int pInvokeResult = PInvoke.GetPowerDisplayPermanentState(this._handle, Sense, out Permanent_DisplayAsUShort);
            Permanent_Display = System.Convert.ToBoolean(Permanent_DisplayAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The function selects which power measurement result (average or peak power) is indicated when permanent display is active.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:DISPlay:PERManent:PRIority AVERage | PEAK
        /// </summary>
        /// <param name="Trace">
        /// This control selects the trace.
        /// 
        /// Valid Values:
        /// 1, 2, 3
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Priority">
        /// This control selects which power measurement result (average or peak power) is indicated when permanent display is active.
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_PERM_PRIOR_AVER (0) - Average Power
        /// RSSMA_SENSE_POWER_PERM_PRIOR_PEAK (1) - Peak Power
        /// 
        /// Default Value: RSSMA_SENSE_POWER_PERM_PRIOR_AVER (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerDisplayPermanentPriority(int Trace, int Priority)
        {
            int pInvokeResult = PInvoke.SetPowerDisplayPermanentPriority(this._handle, Trace, Priority);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The function returns which power measurement result (average or peak power) is indicated when permanent display is active.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:DISPlay:PERManent:PRIority?
        /// </summary>
        /// <param name="Trace">
        /// This control selects the trace.
        /// 
        /// Valid Values:
        /// 1, 2, 3
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Priority">
        /// This control returns which power measurement result (average or peak power) is indicated when permanent display is active.
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_PERM_PRIOR_AVER (0) - Average Power
        /// RSSMA_SENSE_POWER_PERM_PRIOR_PEAK (1) - Peak Power
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerDisplayPermanentPriority(int Trace, out int Priority)
        {
            int pInvokeResult = PInvoke.GetPowerDisplayPermanentPriority(this._handle, Trace, out Priority);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the filter mode. For mode NSR selects noise content and noise timeout.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:FILTer:TYPE AUTO | USER | NSRatio
        /// SENSe&lt;[1]...3&gt;[:POWer]:FILTer:NSRatio
        /// SENSe&lt;[1]...3&gt;[:POWer]:FILTer:NSRatio:MTIMe
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Filter_Mode">
        /// This control sets the filter mode. 
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_FILTER_TYPE_AUTO (0) - Auto
        /// RSSMA_SENSE_POWER_FILTER_TYPE_USER (1) - User
        /// RSSMA_SENSE_POWER_FILTER_TYPE_NSR  (2) - Fixed Noise
        /// 
        /// Default Value:
        /// RSSMA_SENSE_POWER_FILTER_TYPE_AUTO (0) - Auto
        /// 
        /// Note(s):
        /// 
        /// (1) AUTO:
        /// The filter length is automatically selected depending on the measured value. For high values, a short filter length is selected and for low values a long filter length is selected.
        /// 
        /// (2) USER:
        /// The filter length is set manually. As the filter length works as a multiplier for the measurement time, this results in a constant measurement time.
        /// 
        /// (3) Fixed Noise: The filter lenghth (averaging factor) is selected so that the sensor's intrinsic noise (2 standard deviations) does not exceed the specified noise content. The desired noise content is entered with command SENSe:FILTer:NSRatio. To avoid very long settling times when the power is low, the averaging factor can be limited with the Timeout parameter (command SENSe:FILTer:NSRatio:MTIMe).
        /// </param>
        /// <param name="Noise_Content">
        /// This control sets the noise content for fixed noise filter mode. 
        /// 
        /// Valid Values:
        /// 0.0001 to 1.0
        /// 
        /// Default Value: 0.001
        /// </param>
        /// <param name="Timeout">
        /// This control sets the timeout for fixed noise filter mode. 
        /// 
        /// Valid Values:
        /// 1.0 to 999.99
        /// 
        /// Default Value: 4.0
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int confPowerFilter(int Sense, int Filter_Mode, double Noise_Content, double Timeout)
        {
            int pInvokeResult = PInvoke.confPowerFilter(this._handle, Sense, Filter_Mode, Noise_Content, Timeout);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the filter length for user filter mode
        /// (:SENSe&lt;[1]...3&gt;:POWer:FILTer:TYPE USER). As the filter length works as a multiplier for the time window, a constant filter length results in a constant measurement time. Values 1 and 2^n are setable. In remote control, when using command READ to retrieve the measurement result, the time window is fixed to 20 ms. 
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:FILTer:LENGth[:USER]
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Filter_Length">
        /// This control sets the filter length for user filter mode.
        /// 
        /// Valid Values:
        /// 1 to 65536
        /// 
        /// Default Value:
        /// 1
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerFilterLength(int Sense, int Filter_Length)
        {
            int pInvokeResult = PInvoke.SetPowerFilterLength(this._handle, Sense, Filter_Length);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the filter length for user filter mode. 
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:FILTer:LENGth[:USER]?
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Filter_Length">
        /// This control displays the filter length for user filter mode.
        /// 
        /// Valid Values:
        /// 1 to 65536
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerFilterLength(int Sense, out int Filter_Length)
        {
            int pInvokeResult = PInvoke.GetPowerFilterLength(this._handle, Sense, out Filter_Length);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the filter mode. The filter length is the multiplier for the time window and thus directly influences the measurement time. 
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:FILTer:TYPE AUTO | USER | NSRatio
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Filter_Mode">
        /// This control sets the filter mode. 
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_FILTER_TYPE_AUTO (0) - Auto
        /// RSSMA_SENSE_POWER_FILTER_TYPE_USER (1) - User
        /// RSSMA_SENSE_POWER_FILTER_TYPE_NSR  (2) - Fixed Noise
        /// 
        /// Default Value:
        /// RSSMA_SENSE_POWER_FILTER_TYPE_AUTO (0) - Auto
        /// 
        /// Note(s):
        /// 
        /// (1) AUTO:
        /// The filter length is automatically selected depending on the measured value. For high values, a short filter length is selected and for low values a long filter length is selected.
        /// 
        /// (2) USER:
        /// The filter length is set manually. As the filter length works as a multiplier for the measurement time, this results in a constant measurement time.
        /// 
        /// (3) Fixed Noise: The filter lenghth (averaging factor) is selected so that the sensor's intrinsic noise (2 standard deviations) does not exceed the specified noise content. The desired noise content is entered with command SENSe:FILTer:NSRatio. To avoid very long settling times when the power is low, the averaging factor can be limited with the Timeout parameter (command SENSe:FILTer:NSRatio:MTIMe).
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerFilterMode(int Sense, int Filter_Mode)
        {
            int pInvokeResult = PInvoke.SetPowerFilterMode(this._handle, Sense, Filter_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queriess the filter mode for user filter mode. 
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:FILTer:TYPE?
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Filter_Mode">
        /// This control displays the filter mode. 
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_FILTER_TYPE_AUTO (0) - Auto
        /// RSSMA_SENSE_POWER_FILTER_TYPE_USER (1) - User
        /// RSSMA_SENSE_POWER_FILTER_TYPE_NSR  (2) - Fixed Noise
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerFilterMode(int Sense, out int Filter_Mode)
        {
            int pInvokeResult = PInvoke.GetPowerFilterMode(this._handle, Sense, out Filter_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the noise content for fixed noise filter mode (:SENSe:POWer:FILTer:TYPE NSRation). This value determines the proportion of intrinsic noise in the measured result.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:FILTer:NSRatio
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Noise_Content">
        /// This control sets the noise content for fixed noise filter mode. 
        /// 
        /// Valid Values:
        /// 0.0001 to 1.0
        /// 
        /// Default Value: 0.001
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerFilterFixedNoiseContent(int Sense, double Noise_Content)
        {
            int pInvokeResult = PInvoke.SetPowerFilterFixedNoiseContent(this._handle, Sense, Noise_Content);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the noise content for fixed noise filter mode.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:FILTer:NSRatio?
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Noise_Content">
        /// This control gets the noise content for fixed noise filter mode. 
        /// 
        /// Valid Values:
        /// 0.0001 to 1.0
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerFilterFixedNoiseContent(int Sense, out double Noise_Content)
        {
            int pInvokeResult = PInvoke.GetPowerFilterFixedNoiseContent(this._handle, Sense, out Noise_Content);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the timeout for fixed noise filter mode (:SENSe:POWer:FILTer:TYPE NSRation). This value ensures limited settling times.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:FILTer:NSRatio:MTIMe
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Timeout">
        /// This control sets the timeout for fixed noise filter mode. 
        /// 
        /// Valid Values:
        /// 1.0 to 999.99
        /// 
        /// Default Value: 4.0
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerFilterFixedNoiseTimeout(int Sense, double Timeout)
        {
            int pInvokeResult = PInvoke.SetPowerFilterFixedNoiseTimeout(this._handle, Sense, Timeout);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the timeout for fixed noise filter mode.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:FILTer:NSRatio:MTIMe?
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Timeout">
        /// This control gets the timeout for fixed noise filter mode. 
        /// 
        /// Valid Values:
        /// 1.0 to 999.99
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerFilterFixedNoiseTimeout(int Sense, out double Timeout)
        {
            int pInvokeResult = PInvoke.GetPowerFilterFixedNoiseTimeout(this._handle, Sense, out Timeout);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the filter length automatically set value.
        /// 
        /// Example:
        ///  SENS1:FILT:TYPE AUTO
        ///  selects auto filter mode for the power sensor connected to the  
        ///  SENSOR connector.
        /// 
        ///  SENS1:FILT:LENG:AUTO?
        ///  queries the automatically set filter length.
        /// 
        ///  Response: 1024
        ///  
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:FILTer:LENGth:AUTO?
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Filter_Length_Auto">
        /// This control gets the filter length automatically set value.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerFilterLengthAuto(int Sense, out int Filter_Length_Auto)
        {
            int pInvokeResult = PInvoke.GetPowerFilterLengthAuto(this._handle, Sense, out Filter_Length_Auto);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function the search for the optimum filter length for the current measurement conditions. The found filter length can be retrieved with command :SENSe:POWer:FILTer:LENGth:USER?. This command is only available for user filter mode (:SENSe:POWer:FILTer:TYPE USER).
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:FILTer:SONCe
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int PowerFilterSearchOnce(int Sense)
        {
            int pInvokeResult = PInvoke.PowerFilterSearchOnce(this._handle, Sense);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The function activates gate settings for the selected trace. The measurement is started with command SENS:POW:SWE:INIT (function rssma_PowerSweepInitiate). Both gates are active at one time.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K28
        /// 
        /// Note(s):
        /// 
        /// (1) Set the measurement mode to Time with function rssma_SetPowerSweepMode (SENS:SWE:MODE TIME)
        /// 
        /// Remote-control command(s):
        /// CALCulate[:POWer]:SWEep:TIME:GATE:STATe ON | OFF
        /// </summary>
        /// <param name="State">
        /// This control activates gate settings for the selected trace.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - OFF
        /// VI_TRUE  (1) - ON
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSensorGateState(bool State)
        {
            int pInvokeResult = PInvoke.SetPowerSensorGateState(this._handle, System.Convert.ToUInt16(State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The function returns the state of the gate settings for the selected trace.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K28
        /// 
        /// Note(s):
        /// 
        /// (1) Set the measurement mode to Time with function rssma_SetPowerSweepMode (SENS:SWE:MODE TIME)
        /// 
        /// Remote-control command(s):
        /// CALCulate[:POWer]:SWEep:TIME:GATE:STATe?
        /// </summary>
        /// <param name="State">
        /// This control returns the state of the gate settings for the selected trace.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - OFF
        /// VI_TRUE  (1) - ON
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSensorGateState(out bool State)
        {
            ushort StateAsUShort;
            int pInvokeResult = PInvoke.GetPowerSensorGateState(this._handle, out StateAsUShort);
            State = System.Convert.ToBoolean(StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The function sets the start time of the selected gate.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K28
        /// 
        /// Note(s):
        /// 
        /// (1) Set the measurement mode to Time with function rssma_SetPowerSweepMode (SENS:SWE:MODE TIME)
        /// 
        /// Remote-control command(s):
        /// CALCulate[:POWer]:SWEep:TIME:GATE&lt;[1]|2&gt;:STARt
        /// </summary>
        /// <param name="Gate">
        /// This control sets the gate.
        /// 
        /// Valid Values:
        /// 1, 2
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Start">
        /// This control sets the start time of the selected gate.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 5.0e-6 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSensorGateStart(int Gate, double Start)
        {
            int pInvokeResult = PInvoke.SetPowerSensorGateStart(this._handle, Gate, Start);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The function returns the start time of the selected gate.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K28
        /// 
        /// Note(s):
        /// 
        /// (1) Set the measurement mode to Time with function rssma_SetPowerSweepMode (SENS:SWE:MODE TIME)
        /// 
        /// Remote-control command(s):
        /// CALCulate[:POWer]:SWEep:TIME:GATE&lt;[1]|2&gt;:STARt?
        /// </summary>
        /// <param name="Gate">
        /// This control sets the gate.
        /// 
        /// Valid Values:
        /// 1, 2
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Start">
        /// This control returns the start time of the selected gate.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSensorGateStart(int Gate, out double Start)
        {
            int pInvokeResult = PInvoke.GetPowerSensorGateStart(this._handle, Gate, out Start);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The function sets the stop time of the selected gate.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K28
        /// 
        /// Note(s):
        /// 
        /// (1) Set the measurement mode to Time with function rssma_SetPowerSweepMode (SENS:SWE:MODE TIME)
        /// 
        /// Remote-control command(s):
        /// CALCulate[:POWer]:SWEep:TIME:GATE&lt;[1]|2&gt;:STOP
        /// </summary>
        /// <param name="Gate">
        /// This control sets the gate.
        /// 
        /// Valid Values:
        /// 1, 2
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Stop">
        /// This control sets the stop time of the selected gate.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 15.0e-6 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSensorGateStop(int Gate, double Stop)
        {
            int pInvokeResult = PInvoke.SetPowerSensorGateStop(this._handle, Gate, Stop);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The function returns the stop time of the selected gate.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K28
        /// 
        /// Note(s):
        /// 
        /// (1) Set the measurement mode to Time with function rssma_SetPowerSweepMode (SENS:SWE:MODE TIME)
        /// 
        /// Remote-control command(s):
        /// CALCulate[:POWer]:SWEep:TIME:GATE&lt;[1]|2&gt;:STOP?
        /// </summary>
        /// <param name="Gate">
        /// This control sets the gate.
        /// 
        /// Valid Values:
        /// 1, 2
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Stop">
        /// This control returns the stop time of the selected gate.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSensorGateStop(int Gate, out double Stop)
        {
            int pInvokeResult = PInvoke.GetPowerSensorGateStop(this._handle, Gate, out Stop);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The function selects the trace for time gated measurement. Both gates are assigned to the same trace.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K28
        /// 
        /// Note(s):
        /// 
        /// (1) Set the measurement mode to Time with function rssma_SetPowerSweepMode (SENS:SWE:MODE TIME)
        /// 
        /// Remote-control command(s):
        /// CALCulate[:POWer]:SWEep:TIME:GATE:FEED TRACe1 | TRACe2 | TRACe3
        /// </summary>
        /// <param name="Trace">
        /// This control selects the trace for time gated measurement. Both gates are assigned to the same trace.
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_GATE_TRAC_1 (0) - 1
        /// RSSMA_SENSE_POWER_GATE_TRAC_2 (1) - 2
        /// RSSMA_SENSE_POWER_GATE_TRAC_3 (2) - 3
        /// 
        /// Default Value: RSSMA_SENSE_POWER_GATE_TRAC_1 (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSensorGateTrace(int Trace)
        {
            int pInvokeResult = PInvoke.SetPowerSensorGateTrace(this._handle, Trace);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The function returns the trace for time gated measurement.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K28
        /// 
        /// Note(s):
        /// 
        /// (1) Set the measurement mode to Time with function rssma_SetPowerSweepMode (SENS:SWE:MODE TIME)
        /// 
        /// Remote-control command(s):
        /// CALCulate[:POWer]:SWEep:TIME:GATE:FEED?
        /// </summary>
        /// <param name="Trace">
        /// This control returns the trace for time gated measurement.
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_GATE_TRAC_1 (0) - 1
        /// RSSMA_SENSE_POWER_GATE_TRAC_2 (1) - 2
        /// RSSMA_SENSE_POWER_GATE_TRAC_3 (2) - 3
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSensorGateTrace(out int Trace)
        {
            int pInvokeResult = PInvoke.GetPowerSensorGateTrace(this._handle, out Trace);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The function queries the average power value of the time gated measurement.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K28
        /// 
        /// Note(s):
        /// 
        /// (1) Set the measurement mode to Time with function rssma_SetPowerSweepMode (SENS:SWE:MODE TIME)
        /// 
        /// Remote-control command(s):
        /// CALCulate[:POWer]:SWEep:TIME:GATE&lt;[1]|2&gt;:AVERage?
        /// </summary>
        /// <param name="Gate">
        /// This control sets the gate.
        /// 
        /// Valid Values:
        /// 1, 2
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Average_Power">
        /// This control queries the average power value of the time gated measurement.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSensorGateAveragePower(int Gate, out double Average_Power)
        {
            int pInvokeResult = PInvoke.GetPowerSensorGateAveragePower(this._handle, Gate, out Average_Power);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The function queries the peak power value of the time gated measurement.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K28
        /// 
        /// Note(s):
        /// 
        /// (1) Set the measurement mode to Time with function rssma_SetPowerSweepMode (SENS:SWE:MODE TIME)
        /// 
        /// Remote-control command(s):
        /// CALCulate[:POWer]:SWEep:TIME:GATE&lt;[1]|2&gt;:MAXimum?
        /// </summary>
        /// <param name="Gate">
        /// This control sets the gate.
        /// 
        /// Valid Values:
        /// 1, 2
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Peak_Power">
        /// This control queries the peak power value of the time gated measurement.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSensorGatePeakPower(int Gate, out double Peak_Power)
        {
            int pInvokeResult = PInvoke.GetPowerSensorGatePeakPower(this._handle, Gate, out Peak_Power);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function starts the response measurement with NRP power sensor 
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:INITiate
        /// *OPC?
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Timeout">
        /// Sets the timeout for the calibration routine to be finished and have obtained calibration result. If the length of time required for calibration exceeds the timeout value, then the function will return with a timeout error and the instrument will continue with calibration.
        /// 
        /// Valid Range: 0 ms to 600000 ms
        /// 
        /// Default Value: 180000 ms
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int PowerSweepInitiate(int Sense, int Timeout)
        {
            int pInvokeResult = PInvoke.PowerSweepInitiate(this._handle, Sense, Timeout);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function aborts the response measurement with NRP power sensors.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:ABORt   
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int PowerSweepAbort(int Sense)
        {
            int pInvokeResult = PInvoke.PowerSweepAbort(this._handle, Sense);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The function configures using of Separate Frequency.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:FREQuency:SENSor:SRANge[:STATe] ON | OFF
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:FREQuency:SENSor:SRANge:STARt &lt;frequency&gt;
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:FREQuency:SENSor:SRANge:STOP  &lt;frequency&gt;
        /// 
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="State">
        /// This control activates the use of a frequency range for the power measurement that is different to the set signal generator frequency range.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <param name="Separate_Frequency_Start">
        /// This control sets the start frequency for the frequency power analysis with separate frequencies.
        /// 
        /// Valid Values:  not checked
        /// 
        /// 
        /// Default Value: 1.0e9 Hz
        /// </param>
        /// <param name="Separate_Frequency_Stop">
        /// This control sets the stop frequency for the frequency power analysis with separate frequencies.
        /// 
        /// Valid Values: not checked
        /// 
        /// 
        /// Default Value: 22.0e9 Hz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int confPowerSweepFrequencySeparateFrequencyRange(int Sense, bool State, double Separate_Frequency_Start, double Separate_Frequency_Stop)
        {
            int pInvokeResult = PInvoke.confPowerSweepFrequencySeparateFrequencyRange(this._handle, Sense, System.Convert.ToUInt16(State), Separate_Frequency_Start, Separate_Frequency_Stop);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function enters the start frequency for the frequency response measurement.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:FREQuency:STARt   &lt;frequency&gt;
        /// 
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Frequency_Start">
        /// This control sets the start frequency for the frequency response measurement.
        /// 
        /// Valid Values:
        /// 1.0e9 to 22.0e9 Hz
        /// 
        /// Default Value: 1.0e9 Hz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepFrequencyStart(int Sense, double Frequency_Start)
        {
            int pInvokeResult = PInvoke.SetPowerSweepFrequencyStart(this._handle, Sense, Frequency_Start);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the start frequency for the frequency response measurement.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:FREQuency:STARt?
        /// 
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Frequency_Start">
        /// This control displays the start frequency for the frequency response measurement.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepFrequencyStart(int Sense, out double Frequency_Start)
        {
            int pInvokeResult = PInvoke.GetPowerSweepFrequencyStart(this._handle, Sense, out Frequency_Start);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function enters the stop frequency for the frequency response measurement.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:FREQuency:STOP   &lt;frequency&gt;
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Frequency_Stop">
        /// This control sets the stop frequency for the frequency response measurement.
        /// 
        /// Valid Values:
        /// 1.0e9 to 22.0e9 Hz
        /// 
        /// Default Value: 22.0e9 Hz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepFrequencyStop(int Sense, double Frequency_Stop)
        {
            int pInvokeResult = PInvoke.SetPowerSweepFrequencyStop(this._handle, Sense, Frequency_Stop);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the stop frequency for the frequency response measurement.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:FREQuency:STOP?
        /// 
        /// 
        /// 
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Frequency_Stop">
        /// This control displays the stop frequency for the frequency response measurement.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepFrequencyStop(int Sense, out double Frequency_Stop)
        {
            int pInvokeResult = PInvoke.GetPowerSweepFrequencyStop(this._handle, Sense, out Frequency_Stop);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the timing mode of the measurement. Selection FAST leads to a fast measurement with a short integration times for each measurement step, NORMal leads to a longer but more precise measurement due to a higher integration time for each step.
        ///  
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:FREQuency:TIMing[:MODE]
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Frequency_Timing">
        /// This control sets the frequency timing. 
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_SWEEP_FREQ_TIMING_NORM (0) - Normal
        /// RSSMA_SENSE_POWER_SWEEP_FREQ_TIMING_FAST (1) - Fast
        /// 
        /// Default Value:
        /// RSSMA_SENSE_POWER_SWEEP_FREQ_TIMING_NORM (0) - Normal
        /// 
        /// Note(s):
        /// 
        /// (1) - Selection FAST leads to a fast measurement with a short integration times for each measurement step, NORMal leads to a longer but more precise measurement due to a higher integration time for each step.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepFrequencyTiming(int Sense, int Frequency_Timing)
        {
            int pInvokeResult = PInvoke.SetPowerSweepFrequencyTiming(this._handle, Sense, Frequency_Timing);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the timing mode of the measurement. 
        ///  
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:FREQuency:TIMing[:MODE]?
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Frequency_Timing">
        /// This control displays the frequency timing. 
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_SWEEP_FREQ_TIMING_NORM (0) - Normal
        /// RSSMA_SENSE_POWER_SWEEP_FREQ_TIMING_FAST (1) - Fast
        /// 
        /// Note(s):
        /// 
        /// (1) - Selection FAST leads to a fast measurement with a short integration times for each measurement step, NORMal leads to a longer but more precise measurement due to a higher integration time for each step.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepFrequencyTiming(int Sense, out int Frequency_Timing)
        {
            int pInvokeResult = PInvoke.GetPowerSweepFrequencyTiming(this._handle, Sense, out Frequency_Timing);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the spacing for the frequency response measurement. 
        ///  
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:FREQuency:SPACing[:MODE] 
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Frequency_Spacing">
        /// This control selects the spacing for the frequency response measurement. 
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_SWEEP_FREQ_SPACING_LIN (0) - Linear
        /// RSSMA_SENSE_POWER_SWEEP_FREQ_SPACING_LOG (1) - Logaritmic
        /// 
        /// Default Value:
        /// RSSMA_SENSE_POWER_SWEEP_FREQ_SPACING_LIN (0) - Linear
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepFrequencySpacing(int Sense, int Frequency_Spacing)
        {
            int pInvokeResult = PInvoke.SetPowerSweepFrequencySpacing(this._handle, Sense, Frequency_Spacing);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the spacing for the frequency response measurement. 
        ///  
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:FREQuency:SPACing[:MODE]?
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Frequency_Spacing">
        /// This control displays the spacing for the frequency response measurement. 
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_SWEEP_FREQ_SPACING_LIN (0) - Linear
        /// RSSMA_SENSE_POWER_SWEEP_FREQ_SPACING_LOG (1) - Logaritmic
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepFrequencySpacing(int Sense, out int Frequency_Spacing)
        {
            int pInvokeResult = PInvoke.GetPowerSweepFrequencySpacing(this._handle, Sense, out Frequency_Spacing);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function enters the number of measurement steps for the frequency response measurement.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:FREQuency:STEPs
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Frequency_Steps">
        /// This control sets the number of measurement steps for the frequency response measurement.
        /// 
        /// Valid Values:
        /// 10 steps to 1000 steps
        /// 
        /// Default Value: 500 steps
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepFrequencySteps(int Sense, int Frequency_Steps)
        {
            int pInvokeResult = PInvoke.SetPowerSweepFrequencySteps(this._handle, Sense, Frequency_Steps);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the number of measurement steps for the frequency response measurement.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:FREQuency:STEPs?
        /// 
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Frequency_Steps">
        /// This control displays the number of measurement steps for the frequency response measurement.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepFrequencySteps(int Sense, out int Frequency_Steps)
        {
            int pInvokeResult = PInvoke.GetPowerSweepFrequencySteps(this._handle, Sense, out Frequency_Steps);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the minimum value for the y axis of the measurement diagram.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:FREQuency:YSCale:MINimum
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:POWer:YSCale:MINimum
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:TIME:YSCale:MINimum
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Y_Scale_Minimum">
        /// This control sets the minimum value for the y axis of the measurement diagram.
        /// 
        /// Valid Values:
        /// -200 dBm to 100 dBm
        /// 
        /// Default Value: -40 dBm
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepFrequencyYScaleMinimum(int Sense, double Y_Scale_Minimum)
        {
            int pInvokeResult = PInvoke.SetPowerSweepFrequencyYScaleMinimum(this._handle, Sense, Y_Scale_Minimum);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the minimum value for the y axis of the measurement diagram.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:FREQuency:YSCale:MINimum?
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:POWer:YSCale:MINimum?
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:TIME:YSCale:MINimum?
        /// 
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Y_Scale_Minimum">
        /// This control displays the minimum value for the y axis of the measurement diagram.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepFrequencyYScaleMinimum(int Sense, out double Y_Scale_Minimum)
        {
            int pInvokeResult = PInvoke.GetPowerSweepFrequencyYScaleMinimum(this._handle, Sense, out Y_Scale_Minimum);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the maximum value for the y axis of the measurement diagram.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:FREQuency:YSCale:MAXimum
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:POWer:YSCale:MAXimum
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:TIME:YSCale:MAXimum
        /// 
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Y_Scale_Maximum">
        /// This control sets the maximum value for the y axis of the measurement diagram.
        /// 
        /// Valid Values:
        /// -200 dBm to 100 dBm
        /// 
        /// Default Value: 40 dBm
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepFrequencyYScaleMaximum(int Sense, double Y_Scale_Maximum)
        {
            int pInvokeResult = PInvoke.SetPowerSweepFrequencyYScaleMaximum(this._handle, Sense, Y_Scale_Maximum);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the maximum value for the y axis of the measurement diagram.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:FREQuency:YSCale:MAXimum?
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:POWer:YSCale:MAXimum?
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:TIME:YSCale:MAXimum?
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Y_Scale_Maximum">
        /// This control displays the maximum value for the y axis of the measurement diagram.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepFrequencyYScaleMaximum(int Sense, out double Y_Scale_Maximum)
        {
            int pInvokeResult = PInvoke.GetPowerSweepFrequencyYScaleMaximum(this._handle, Sense, out Y_Scale_Maximum);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects single or continuous mode in power analysis.
        ///  
        /// Remote-control command(s):
        /// SENSe[:POWer]:SWEep:FREQuency:RMODe
        /// </summary>
        /// <param name="Execution">
        /// This control selects single or continuous mode for measurement mode frequency in power analysis.
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_SWEEP_RMODE_SING (0) - Single
        /// RSSMA_SENSE_POWER_SWEEP_RMODE_CONT (1) - Continuous
        /// 
        /// Default Value:
        /// RSSMA_SENSE_POWER_SWEEP_RMODE_SING (0) - Single
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepFrequencyExecution(int Execution)
        {
            int pInvokeResult = PInvoke.SetPowerSweepFrequencyExecution(this._handle, Execution);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns single or continuous mode for measurement mode frequency in power analysis.
        /// 
        /// Remote-control command(s):
        /// SENSe[:POWer]:SWEep:FREQuency:RMODe?
        /// </summary>
        /// <param name="Execution">
        /// This control displays single or continuous mode for measurement mode frequency in power analysis.
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_SWEEP_RMODE_SING (0) - Single
        /// RSSMA_SENSE_POWER_SWEEP_RMODE_CONT (1) - Continuous
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepFrequencyExecution(out int Execution)
        {
            int pInvokeResult = PInvoke.GetPowerSweepFrequencyExecution(this._handle, out Execution);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates/deactivates autoscaling of the Y axis of the diagram.
        /// 
        /// Remote-control command(s):
        /// SENSe[:POWer]:SWEep:FREQuency:YSCale:AUTO OFF | CEXPanding | FEXPanding | CFLoating | FFLoating
        /// </summary>
        /// <param name="Auto_Scale">
        /// This control activates/deactivates autoscaling of the Y axis of the diagram.
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_SWEEP_YSCALE_AUTO_OFF  (0) - Off
        /// RSSMA_SENSE_POWER_SWEEP_YSCALE_AUTO_CEXP (1) - Exp. (Coarse) 
        /// RSSMA_SENSE_POWER_SWEEP_YSCALE_AUTO_FEXP (2) - Exp. (Fine) 
        /// RSSMA_SENSE_POWER_SWEEP_YSCALE_AUTO_CFL  (3) - Flt. (Coarse) 
        /// RSSMA_SENSE_POWER_SWEEP_YSCALE_AUTO_FFL  (4) - Flt. (Fine) 
        /// 
        /// Default Value:
        /// RSSMA_SENSE_POWER_SWEEP_YSCALE_AUTO_OFF  (0) - Off
        /// 
        /// Note(s):
        /// 
        /// (1) - Off:
        /// Auto scaling is deactivated. If switching from activated to deactivated Auto scaling, the scaling is maintained. 
        /// 
        /// (2) - Expanding:
        /// Auto scale is activated. The scaling of the Y-axis is selected in such a way, that the trace is always visible. To this end, the range is expanded if the minimum or maximum values of the trace move outside the current scale. The step width is 5 dB for selection course and variable in the range of 0.2 db to 5 dB for selection fine.
        /// 
        /// (3) - Floating:
        /// Auto scale is activated. The scaling of the Y-axis is selected in such a way, that the trace is always visible. To this end, the range is either expanded if the minimum or maximum values of the trace move outside the current scale or scaled down if the trace fits into a reduced scale. The step width is 5 dB for selection course and variable in the range of 0.2 db to 5 dB for selection fine.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepFrequencyYAutoScale(int Auto_Scale)
        {
            int pInvokeResult = PInvoke.SetPowerSweepFrequencyYAutoScale(this._handle, Auto_Scale);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns autoscaling of the Y axis of the diagram.
        /// 
        /// Remote-control command(s):
        /// SENSe[:POWer]:SWEep:FREQuency:YSCale:AUTO?
        /// SENSe[:POWer]:SWEep:POWer:YSCale:AUTO?
        /// SENSe[:POWer]:SWEep:TIME:YSCale:AUTO?
        /// </summary>
        /// <param name="Auto_Scale">
        /// This control returns autoscaling of the Y axis of the diagram.
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_SWEEP_YSCALE_AUTO_OFF  (0) - Off
        /// RSSMA_SENSE_POWER_SWEEP_YSCALE_AUTO_CEXP (1) - Exp. (Coarse) 
        /// RSSMA_SENSE_POWER_SWEEP_YSCALE_AUTO_FEXP (2) - Exp. (Fine) 
        /// RSSMA_SENSE_POWER_SWEEP_YSCALE_AUTO_CFL  (3) - Flt. (Coarse) 
        /// RSSMA_SENSE_POWER_SWEEP_YSCALE_AUTO_FFL  (4) - Flt. (Fine) 
        /// 
        /// Note(s):
        /// 
        /// (1) - Off:
        /// Auto scaling is deactivated. If switching from activated to deactivated Auto scaling, the scaling is maintained. 
        /// 
        /// (2) - Expanding:
        /// Auto scale is activated. The scaling of the Y-axis is selected in such a way, that the trace is always visible. To this end, the range is expanded if the minimum or maximum values of the trace move outside the current scale. The step width is 5 dB for selection course and variable in the range of 0.2 db to 5 dB for selection fine.
        /// 
        /// (3) - Floating:
        /// Auto scale is activated. The scaling of the Y-axis is selected in such a way, that the trace is always visible. To this end, the range is either expanded if the minimum or maximum values of the trace move outside the current scale or scaled down if the trace fits into a reduced scale. The step width is 5 dB for selection course and variable in the range of 0.2 db to 5 dB for selection fine.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepFrequencyYAutoScale(out int Auto_Scale)
        {
            int pInvokeResult = PInvoke.GetPowerSweepFrequencyYAutoScale(this._handle, out Auto_Scale);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function resets the Y scale to suitable values after the use of auto scaling in the expanding mode. For this mode, the scale might get expanded because of temporarily high power values. The reset function resets the diagram in such a way that it matches smaller power values again.
        ///  
        /// Remote-control command(s):
        /// SENSe[:POWer]:SWEep:FREQuency:YSCale:AUTO:RESet
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ResetPowerSweepFrequencyYScale()
        {
            int pInvokeResult = PInvoke.ResetPowerSweepFrequencyYScale(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The function activates the use of a frequency range for the power measurement that is different to the set signal generator frequency range. The separate frequency range is entered  with commands SENS:SWE:FREQ:SENS:STAR  and SENS:SWE:FREQ:SENS:STop.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]?3&gt;[:POWer]:SWEep:FREQuency:SENSor:SRANge[:STATe]   ON | OFF
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="State">
        /// This control activates the use of a frequency range for the power measurement that is different to the set signal generator frequency range.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepFrequencySeparateFrequencyRange(int Sense, bool State)
        {
            int pInvokeResult = PInvoke.SetPowerSweepFrequencySeparateFrequencyRange(this._handle, Sense, System.Convert.ToUInt16(State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The function returns the use of a frequency range for the power measurement that is different to the set signal generator frequency range. The separate frequency range is entered  with commands SENS:SWE:FREQ:SENS:STAR  and SENS:SWE:FREQ:SENS:STop.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]?3&gt;[:POWer]:SWEep:FREQuency:SENSor:SRANge[:STATe]?
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="State">
        /// This control displays the use of a frequency range for the power measurement that is different to the set signal generator frequency range.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepFrequencySeparateFrequencyRange(int Sense, out bool State)
        {
            ushort StateAsUShort;
            int pInvokeResult = PInvoke.GetPowerSweepFrequencySeparateFrequencyRange(this._handle, Sense, out StateAsUShort);
            State = System.Convert.ToBoolean(StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function enters the start frequency for the frequency power analysis with separate frequencies.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]?3&gt;[:POWer]:SWEep:FREQuency:SENSor:SRANge:STARt &lt;frequency&gt;
        /// 
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Separate_Frequency_Start">
        /// This control sets the start frequency for the frequency power analysis with separate frequencies.
        /// 
        /// Valid Values:  not checked
        /// 
        /// 
        /// Default Value: 1.0e9 Hz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepFrequencySeparateFrequencyStart(int Sense, double Separate_Frequency_Start)
        {
            int pInvokeResult = PInvoke.SetPowerSweepFrequencySeparateFrequencyStart(this._handle, Sense, Separate_Frequency_Start);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the start frequency for the frequency power analysis with separate frequencies.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]?3&gt;[:POWer]:SWEep:FREQuency:SENSor:SRANge:STARt?
        /// 
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Separate_Frequency_Start">
        /// This control displays the start frequency for the frequency power analysis with separate frequencies.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepFrequencySeparateFrequencyStart(int Sense, out double Separate_Frequency_Start)
        {
            int pInvokeResult = PInvoke.GetPowerSweepFrequencySeparateFrequencyStart(this._handle, Sense, out Separate_Frequency_Start);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function enters the stop frequency for the frequency power analysis with separate frequencies.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]?3&gt;[:POWer]:SWEep:FREQuency:SENSor:SRANge:STOP &lt;frequency&gt;
        /// 
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Separate_Frequency_Stop">
        /// This control sets the stop frequency for the frequency power analysis with separate frequencies.
        /// 
        /// Valid Values: not checked
        /// 
        /// 
        /// Default Value: 22.0e9 Hz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepFrequencySeparateFrequencyStop(int Sense, double Separate_Frequency_Stop)
        {
            int pInvokeResult = PInvoke.SetPowerSweepFrequencySeparateFrequencyStop(this._handle, Sense, Separate_Frequency_Stop);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the stop frequency for the frequency power analysis with separate frequencies.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]?3&gt;[:POWer]:SWEep:FREQuency:SENSor:SRANge:STOP?
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Separate_Frequency_Stop">
        /// This control displays the stop frequency for the frequency power analysis with separate frequencies.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepFrequencySeparateFrequencyStop(int Sense, out double Separate_Frequency_Stop)
        {
            int pInvokeResult = PInvoke.GetPowerSweepFrequencySeparateFrequencyStop(this._handle, Sense, out Separate_Frequency_Stop);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function generates a reference curve for "Frequency" measurement.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:FREQuency:REFerence:DATA:COPY
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int PowerSweepFrequencyReferenceCurve(int Sense)
        {
            int pInvokeResult = PInvoke.PowerSweepFrequencyReferenceCurve(this._handle, Sense);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function reads the number of points from the reference curve in "Frequency" measurement.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:FREQuency:REFerence:DATA:POINts?
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Points">
        /// This control displays the number of points from the reference curve in "Frequency" measurement.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepFrequencyReferenceCurvePoints(int Sense, out int Points)
        {
            int pInvokeResult = PInvoke.GetPowerSweepFrequencyReferenceCurvePoints(this._handle, Sense, out Points);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the x values of the two reference points, i.e. "Frequency X (Point A)" and "Frequency X (Point B)" in "Frequency" measurement.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:FREQuency:REFerence:DATA:XVALues &lt;Xvalues&gt;
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Array_Size">
        /// Defines the size of array in argument 'Frequency X'.
        /// 
        /// Valid Values:
        /// not checked
        /// 
        /// Default Value: 50
        /// </param>
        /// <param name="Frequency_X">
        /// This control sets the x values of the two reference points, i.e. "Frequency X (Point A)" and "Frequency X (Point B)" in "Frequency" measurement.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepFrequencyReferenceCurveFrequencyX(int Sense, int Array_Size, double[] Frequency_X)
        {
            int pInvokeResult = PInvoke.SetPowerSweepFrequencyReferenceCurveFrequencyX(this._handle, Sense, Array_Size, Frequency_X);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the x values of the two reference points, i.e. "Frequency X (Point A)" and "Frequency X (Point B)" in "Frequency" measurement.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:FREQuency:REFerence:DATA:XVALues?
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Array_Size">
        /// Defines the size of array in argument 'Frequency X'.
        /// 
        /// Valid Values:
        /// not checked
        /// 
        /// Default Value: 50
        /// </param>
        /// <param name="Frequency_X">
        /// This control displays the x values of the two reference points, i.e. "Frequency X (Point A)" and "Frequency X (Point B)" in "Frequency" measurement.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepFrequencyReferenceCurveFrequencyX(int Sense, int Array_Size, double[] Frequency_X)
        {
            int pInvokeResult = PInvoke.GetPowerSweepFrequencyReferenceCurveFrequencyX(this._handle, Sense, Array_Size, Frequency_X);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the y values of the two reference points, i.e. "Pow Y (Point A)" and "Power Y (Point B)" in "Frequency" measurement.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:FREQuency:REFerence:DATA:YVALues &lt;Yvalues&gt;
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Array_Size">
        /// Defines the size of array in argument 'Power Y'.
        /// 
        /// Valid Values:
        /// not checked
        /// 
        /// Default Value: 50
        /// </param>
        /// <param name="Power_Y">
        /// This control sets the y values of the two reference points, i.e. "Pow Y (Point A)" and "Power Y (Point B)" in "Frequency" measurement.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: "0,0"
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepFrequencyReferenceCurvePowerY(int Sense, int Array_Size, double[] Power_Y)
        {
            int pInvokeResult = PInvoke.SetPowerSweepFrequencyReferenceCurvePowerY(this._handle, Sense, Array_Size, Power_Y);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the y values of the two reference points, i.e. "Pow Y (Point A)" and "Power Y (Point B)" in "Frequency" measurement.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:FREQuency:REFerence:DATA:YVALues?
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Array_Size">
        /// Defines the size of array in argument 'Power Y'.
        /// 
        /// Valid Values:
        /// not checked
        /// 
        /// Default Value: 50
        /// </param>
        /// <param name="Power_Y">
        /// This control displays the y values of the two reference points, i.e. "Pow Y (Point A)" and "Power Y (Point B)" in "Frequency" measurement.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepFrequencyReferenceCurvePowerY(int Sense, int Array_Size, double[] Power_Y)
        {
            int pInvokeResult = PInvoke.GetPowerSweepFrequencyReferenceCurvePowerY(this._handle, Sense, Array_Size, Power_Y);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates/deactivates a level offset at the sensor input. Define the appropriate value with :SENSe&lt;ch&gt;[:POWer]:SWEep:FREQuency[:SENSor]:OFFSet.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K28
        /// 
        /// Remote-control command(s):
        /// :SENSe&lt;ch&gt;[:POWer]:SWEep:FREQuency[:SENSor]:OFFSet:STATe On | OFF
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 4 - Third Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Offset_State">
        /// Activates/deactivates the addition of  the level offset to the measured value. The level offset value is set with command SENSe[:POWer]:OFFSet. 
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepFrequencyLevelOffsetState(int Sense, bool Offset_State)
        {
            int pInvokeResult = PInvoke.SetPowerSweepFrequencyLevelOffsetState(this._handle, Sense, System.Convert.ToUInt16(Offset_State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the state of activation a level offset at the sensor input. The level offset value is set with command :SENSe&lt;ch&gt;[:POWer]:SWEep:FREQuency[:SENSor]:OFFSet
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K28
        /// 
        /// Remote-control command(s):
        /// :SENSe&lt;ch&gt;[:POWer]:SWEep:FREQuency[:SENSor]:OFFSet:STATe?
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 4 - Third Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Offset_State">
        /// Displays activation the addition of  the level offset to the measured value. The level offset value is set with command SENSe[:POWer]:OFFSet. 
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepFrequencyLevelOffsetState(int Sense, out bool Offset_State)
        {
            ushort Offset_StateAsUShort;
            int pInvokeResult = PInvoke.GetPowerSweepFrequencyLevelOffsetState(this._handle, Sense, out Offset_StateAsUShort);
            Offset_State = System.Convert.ToBoolean(Offset_StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets level offset at the sensor input in dB. Activate the offset with the command :SENSe&lt;ch&gt;[:POWer]:SWEep:FREQuency[:SENSor]:OFFSet:STATe
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K28
        /// 
        /// Remote-control command(s):
        /// :SENSe&lt;ch&gt;[:POWer]:SWEep:FREQuency[:SENSor]:OFFSet
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 4 - Third Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Offset">
        /// This control sets a level offset.
        /// 
        /// Valid Values:
        /// -100 dB to 100 dB
        /// 
        /// Default Value: 0.0 dB
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepFrequencyLevelOffset(int Sense, double Offset)
        {
            int pInvokeResult = PInvoke.SetPowerSweepFrequencyLevelOffset(this._handle, Sense, Offset);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns a level ofset at the sensor input. The offset is activated with the command SENSe&lt;ch&gt;[:POWer]:SWEep:FREQuency[:SENSor]:OFFSet:STATe
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K28
        /// 
        /// Remote-control command(s):
        /// :SENSe&lt;ch&gt;[:POWer]:SWEep:FREQuency[:SENSor]:OFFSet?
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 4 - Third Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Offset">
        /// This control displays a level offset which.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepFrequencyLevelOffset(int Sense, out double Offset)
        {
            int pInvokeResult = PInvoke.GetPowerSweepFrequencyLevelOffset(this._handle, Sense, out Offset);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The function configures using of Separate Frequency for power vs. power measurement.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]?3&gt;[:POWer]:SWEep:POWer:SENSor:SFRequency:STATe  ON | OFF
        /// SENSe&lt;[1]?3&gt;[:POWer]:SWEep:POWer:SENSor:SFRequency  &lt;separate sensor frequency&gt;
        /// 
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="State">
        /// This control activates/deactivates the use of a different frequency for the power measurement.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <param name="Separate_Frequency">
        /// This control sets the separate frequency used for power vs. power measurement.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 1.0e9 Hz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int confPowerSweepPowerSeparateFrequencyRange(int Sense, bool State, double Separate_Frequency)
        {
            int pInvokeResult = PInvoke.confPowerSweepPowerSeparateFrequencyRange(this._handle, Sense, System.Convert.ToUInt16(State), Separate_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the start level for the power versus power measurement.
        /// 
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:POWer:STARt   &lt;power&gt;
        /// 
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Power_Start">
        /// This control sets the start level for the power versus power measurement.
        /// 
        /// Valid Values:
        /// -140.0 to 30 dBm
        /// 
        /// Default Value: -40 dBm
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepPowerStart(int Sense, double Power_Start)
        {
            int pInvokeResult = PInvoke.SetPowerSweepPowerStart(this._handle, Sense, Power_Start);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the start level for the power versus power measurement.
        /// 
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:POWer:STARt?
        /// 
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Power_Start">
        /// This control displays the start level for the power versus power measurement.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepPowerStart(int Sense, out double Power_Start)
        {
            int pInvokeResult = PInvoke.GetPowerSweepPowerStart(this._handle, Sense, out Power_Start);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the stop level for the power versus power measurement.
        /// 
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:POWer:STOP   &lt;power&gt;
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Power_Stop">
        /// This control sets the stop level for the power versus power measurement.
        /// 
        /// Valid Values:
        /// -140.0 to 30 dBm
        /// 
        /// Default Value: 30 dBm
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepPowerStop(int Sense, double Power_Stop)
        {
            int pInvokeResult = PInvoke.SetPowerSweepPowerStop(this._handle, Sense, Power_Stop);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the stop level for the power versus power measurement.
        /// 
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:POWer:STOP?
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Power_Stop">
        /// This control displays the stop level for the power versus power measurement.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepPowerStop(int Sense, out double Power_Stop)
        {
            int pInvokeResult = PInvoke.GetPowerSweepPowerStop(this._handle, Sense, out Power_Stop);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the sweep spacing for the power versus power measurement.
        /// 
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:POWer:SPACing[:MODE]
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Power_Spacing">
        /// This control selects the sweep spacing for the power versus power measurement.
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_SWEEP_POWER_SPACING_LIN (0) - Linear
        /// RSSMA_SENSE_POWER_SWEEP_POWER_SPACING_LOG (1) - Logaritmic
        /// 
        /// Default Value:
        /// RSSMA_SENSE_POWER_SWEEP_POWER_SPACING_LIN (0) - Linear
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepPowerSpacing(int Sense, int Power_Spacing)
        {
            int pInvokeResult = PInvoke.SetPowerSweepPowerSpacing(this._handle, Sense, Power_Spacing);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the sweep spacing for the power versus power measurement.
        /// 
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:POWer:SPACing[:MODE]?
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Power_Spacing">
        /// This control displays the sweep spacing for the power versus power measurement.
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_SWEEP_POWER_SPACING_LIN (0) - Linear
        /// RSSMA_SENSE_POWER_SWEEP_POWER_SPACING_LOG (1) - Logaritmic
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepPowerSpacing(int Sense, out int Power_Spacing)
        {
            int pInvokeResult = PInvoke.GetPowerSweepPowerSpacing(this._handle, Sense, out Power_Spacing);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the timing mode of the measurement. Selection FAST leads to a fast measurement with a short integration times for each measurement step, NORMal leads to a longer but more precise measurement due to a higher integration time for each step.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:POWer:TIMing[:MODE]
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Power_Timing">
        /// This control sets the timing mode of the measurement. Selection FAST leads to a fast measurement with a short integration times for each measurement step, NORMal leads to a longer but more precise measurement due to a higher integration time for each step.
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_SWEEP_POWER_TIMING_NORM (0) - Normal
        /// RSSMA_SENSE_POWER_SWEEP_POWER_TIMING_FAST (1) - Fast
        /// 
        /// Default Value:
        /// RSSMA_SENSE_POWER_SWEEP_POWER_TIMING_NORM (0) - Normal
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepPowerTiming(int Sense, int Power_Timing)
        {
            int pInvokeResult = PInvoke.SetPowerSweepPowerTiming(this._handle, Sense, Power_Timing);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the timing mode of the measurement. 
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:POWer:TIMing[:MODE]?
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Power_Timing">
        /// This control displays the timing mode of the measurement. Selection FAST leads to a fast measurement with a short integration times for each measurement step, NORMal leads to a longer but more precise measurement due to a higher integration time for each step.
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_SWEEP_POWER_TIMING_NORM (0) - Normal
        /// RSSMA_SENSE_POWER_SWEEP_POWER_TIMING_FAST (1) - Fast
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepPowerTiming(int Sense, out int Power_Timing)
        {
            int pInvokeResult = PInvoke.GetPowerSweepPowerTiming(this._handle, Sense, out Power_Timing);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function enters the number of measurement steps for the power versus power measurement.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:POWer:STEPs 
        /// 
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Power_Steps">
        /// This control sets the number of measurement steps for the power versus power measurement.
        /// 
        /// Valid Values:
        /// 10 steps to 1000 steps
        /// 
        /// Default Value: 500 steps
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepPowerSteps(int Sense, int Power_Steps)
        {
            int pInvokeResult = PInvoke.SetPowerSweepPowerSteps(this._handle, Sense, Power_Steps);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the number of measurement steps for the power versus power measurement.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:POWer:STEPs?
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Power_Steps">
        /// This control displays the number of measurement steps for the power versus power measurement.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepPowerSteps(int Sense, out int Power_Steps)
        {
            int pInvokeResult = PInvoke.GetPowerSweepPowerSteps(this._handle, Sense, out Power_Steps);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the minimum value for the y axis of the measurement diagram.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:POWer:YSCale:MINimum
        /// 
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Y_Scale_Minimum">
        /// This control sets the minimum value for the y axis of the measurement diagram.
        /// 
        /// Valid Values:
        /// -200 dBm to 100 dBm
        /// 
        /// Default Value: -40 dBm
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepPowerYScaleMinimum(int Sense, double Y_Scale_Minimum)
        {
            int pInvokeResult = PInvoke.SetPowerSweepPowerYScaleMinimum(this._handle, Sense, Y_Scale_Minimum);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the minimum value for the y axis of the measurement diagram.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:POWer:YSCale:MINimum?
        /// 
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Y_Scale_Minimum">
        /// This control displays the minimum value for the y axis of the measurement diagram.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepPowerYScaleMinimum(int Sense, out double Y_Scale_Minimum)
        {
            int pInvokeResult = PInvoke.GetPowerSweepPowerYScaleMinimum(this._handle, Sense, out Y_Scale_Minimum);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the maximum value for the y axis of the measurement diagram.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:POWer:YSCale:MAXimum
        /// 
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Y_Scale_Maximum">
        /// This control sets the minimum value for the y axis of the measurement diagram.
        /// 
        /// Valid Values:
        /// -200 dBm to 100 dBm
        /// 
        /// Default Value: 40 dBm
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepPowerYScaleMaximum(int Sense, double Y_Scale_Maximum)
        {
            int pInvokeResult = PInvoke.SetPowerSweepPowerYScaleMaximum(this._handle, Sense, Y_Scale_Maximum);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the maximum value for the y axis of the measurement diagram.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:POWer:YSCale:MAXimum?
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Y_Scale_Maximum">
        /// This control displays the minimum value for the y axis of the measurement diagram.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepPowerYScaleMaximum(int Sense, out double Y_Scale_Maximum)
        {
            int pInvokeResult = PInvoke.GetPowerSweepPowerYScaleMaximum(this._handle, Sense, out Y_Scale_Maximum);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects single or continuous mode in power analysis.
        ///  
        /// Remote-control command(s):
        /// SENSe[:POWer]:SWEep:POWer:RMODe  
        /// </summary>
        /// <param name="Execution">
        /// This control selects single or continuous mode for measurement mode frequency in power analysis.
        /// 
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_SWEEP_RMODE_SING (0) - Single
        /// RSSMA_SENSE_POWER_SWEEP_RMODE_CONT (1) - Continuous
        /// 
        /// Default Value:
        /// RSSMA_SENSE_POWER_SWEEP_RMODE_SING (0) - Single
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepPowerExecution(int Execution)
        {
            int pInvokeResult = PInvoke.SetPowerSweepPowerExecution(this._handle, Execution);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns single or continuous mode for measurement mode power in power analysis.
        /// 
        /// Remote-control command(s):
        /// SENSe[:POWer]:SWEep:POWer:RMODe?
        /// </summary>
        /// <param name="Execution">
        /// This control displays single or continuous mode for measurement mode power in power analysis.
        /// 
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_SWEEP_RMODE_SING (0) - Single
        /// RSSMA_SENSE_POWER_SWEEP_RMODE_CONT (1) - Continuous
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepPowerExecution(out int Execution)
        {
            int pInvokeResult = PInvoke.GetPowerSweepPowerExecution(this._handle, out Execution);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates/deactivates autoscaling of the Y axis of the diagram.
        /// 
        /// Remote-control command(s):
        /// SENSe[:POWer]:SWEep:POWer:YSCale:AUTO OFF | CEXPanding | FEXPanding | CFLoating | FFLoating
        /// </summary>
        /// <param name="Auto_Scale">
        /// This control activates/deactivates autoscaling of the Y axis of the diagram.
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_SWEEP_YSCALE_AUTO_OFF  (0) - Off
        /// RSSMA_SENSE_POWER_SWEEP_YSCALE_AUTO_CEXP (1) - Exp. (Coarse) 
        /// RSSMA_SENSE_POWER_SWEEP_YSCALE_AUTO_FEXP (2) - Exp. (Fine) 
        /// RSSMA_SENSE_POWER_SWEEP_YSCALE_AUTO_CFL  (3) - Flt. (Coarse) 
        /// RSSMA_SENSE_POWER_SWEEP_YSCALE_AUTO_FFL  (4) - Flt. (Fine) 
        /// 
        /// Default Value:
        /// RSSMA_SENSE_POWER_SWEEP_YSCALE_AUTO_OFF  (0) - Off
        /// 
        /// Note(s):
        /// 
        /// (1) - Off:
        /// Auto scaling is deactivated. If switching from activated to deactivated Auto scaling, the scaling is maintained. 
        /// 
        /// (2) - Expanding:
        /// Auto scale is activated. The scaling of the Y-axis is selected in such a way, that the trace is always visible. To this end, the range is expanded if the minimum or maximum values of the trace move outside the current scale. The step width is 5 dB for selection course and variable in the range of 0.2 db to 5 dB for selection fine.
        /// 
        /// (3) - Floating:
        /// Auto scale is activated. The scaling of the Y-axis is selected in such a way, that the trace is always visible. To this end, the range is either expanded if the minimum or maximum values of the trace move outside the current scale or scaled down if the trace fits into a reduced scale. The step width is 5 dB for selection course and variable in the range of 0.2 db to 5 dB for selection fine.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepPowerYAutoScale(int Auto_Scale)
        {
            int pInvokeResult = PInvoke.SetPowerSweepPowerYAutoScale(this._handle, Auto_Scale);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns autoscaling of the Y axis of the diagram.
        /// 
        /// Remote-control command(s):
        /// SENSe[:POWer]:SWEep:POWer:YSCale:AUTO?
        /// </summary>
        /// <param name="Auto_Scale">
        /// This control returns autoscaling of the Y axis of the diagram.
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_SWEEP_YSCALE_AUTO_OFF  (0) - Off
        /// RSSMA_SENSE_POWER_SWEEP_YSCALE_AUTO_CEXP (1) - Exp. (Coarse) 
        /// RSSMA_SENSE_POWER_SWEEP_YSCALE_AUTO_FEXP (2) - Exp. (Fine) 
        /// RSSMA_SENSE_POWER_SWEEP_YSCALE_AUTO_CFL  (3) - Flt. (Coarse) 
        /// RSSMA_SENSE_POWER_SWEEP_YSCALE_AUTO_FFL  (4) - Flt. (Fine) 
        /// 
        /// Note(s):
        /// 
        /// (1) - Off:
        /// Auto scaling is deactivated. If switching from activated to deactivated Auto scaling, the scaling is maintained. 
        /// 
        /// (2) - Expanding:
        /// Auto scale is activated. The scaling of the Y-axis is selected in such a way, that the trace is always visible. To this end, the range is expanded if the minimum or maximum values of the trace move outside the current scale. The step width is 5 dB for selection course and variable in the range of 0.2 db to 5 dB for selection fine.
        /// 
        /// (3) - Floating:
        /// Auto scale is activated. The scaling of the Y-axis is selected in such a way, that the trace is always visible. To this end, the range is either expanded if the minimum or maximum values of the trace move outside the current scale or scaled down if the trace fits into a reduced scale. The step width is 5 dB for selection course and variable in the range of 0.2 db to 5 dB for selection fine.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepPowerYAutoScale(out int Auto_Scale)
        {
            int pInvokeResult = PInvoke.GetPowerSweepPowerYAutoScale(this._handle, out Auto_Scale);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function resets the Y scale to suitable values after the use of auto scaling in the expanding mode. For this mode, the scale might get expanded because of temporarily high power values. The reset function resets the diagram in such a way that it matches smaller power values again.
        ///  
        /// Remote-control command(s):
        /// SENSe[:POWer]:SWEep:POWer:YSCale:AUTO:RESet
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ResetPowerSweepPowerYScale()
        {
            int pInvokeResult = PInvoke.ResetPowerSweepPowerYScale(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The function activates/deactivates the use of a different frequency for the power measurement.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]?3&gt;[:POWer]:SWEep:POWer:SENSor:SFRequency:STATe  ON | OFF
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="State">
        /// This control activates/deactivates the use of a different frequency for the power measurement.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepPowerSeparateFrequencyState(int Sense, bool State)
        {
            int pInvokeResult = PInvoke.SetPowerSweepPowerSeparateFrequencyState(this._handle, Sense, System.Convert.ToUInt16(State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The function returns the use of a different frequency for the power measurement.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]?3&gt;[:POWer]:SWEep:POWer:SENSor:SFRequency:STATe?
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="State">
        /// This control displays the use of a different frequency for the power measurement.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepPowerSeparateFrequencyState(int Sense, out bool State)
        {
            ushort StateAsUShort;
            int pInvokeResult = PInvoke.GetPowerSweepPowerSeparateFrequencyState(this._handle, Sense, out StateAsUShort);
            State = System.Convert.ToBoolean(StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function enters the separate frequency used for power vs. power measurement.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]?3&gt;[:POWer]:SWEep:POWer:SENSor:SFRequency  &lt;separate sensor frequency&gt;
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Separate_Frequency">
        /// This control sets the separate frequency used for power vs. power measurement.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 1.0e9 Hz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepPowerSeparateFrequency(int Sense, double Separate_Frequency)
        {
            int pInvokeResult = PInvoke.SetPowerSweepPowerSeparateFrequency(this._handle, Sense, Separate_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the separate frequency used for power vs. power measurement.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]?3&gt;[:POWer]:SWEep:POWer:SENSor:SFRequency?
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Separate_Frequency">
        /// This control displays the separate frequency used for power vs. power measurement.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepPowerSeparateFrequency(int Sense, out double Separate_Frequency)
        {
            int pInvokeResult = PInvoke.GetPowerSweepPowerSeparateFrequency(this._handle, Sense, out Separate_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function generates a reference curve for "Power" measurement.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:POWer:REFerence:DATA:COPY
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int PowerSweepPowerReferenceCurve(int Sense)
        {
            int pInvokeResult = PInvoke.PowerSweepPowerReferenceCurve(this._handle, Sense);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function reads the number of points from the reference curve in "Power" measurement.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:POWer:REFerence:DATA:POINts?
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Points">
        /// This control displays the number of points from the reference curve in "Power" measurement.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepPowerReferenceCurvePoints(int Sense, out int Points)
        {
            int pInvokeResult = PInvoke.GetPowerSweepPowerReferenceCurvePoints(this._handle, Sense, out Points);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the x values of the two reference points, i.e. "Power X (Point A)" and "Power X (Point B)" in "Power" measurement.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:POWer:REFerence:DATA:XVALues &lt;Xvalues&gt;
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Array_Size">
        /// Defines the size of array in argument 'Power X'.
        /// 
        /// Valid Values:
        /// not checked
        /// 
        /// Default Value: 50
        /// </param>
        /// <param name="Power_X">
        /// This control sets the x values of the two reference points, i.e. "Power X (Point A)" and "Power X (Point B)" in "Power" measurement.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: "0,0"
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepPowerReferenceCurvePowerX(int Sense, int Array_Size, double[] Power_X)
        {
            int pInvokeResult = PInvoke.SetPowerSweepPowerReferenceCurvePowerX(this._handle, Sense, Array_Size, Power_X);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the x values of the two reference points, i.e. "Power X (Point A)" and "Power X (Point B)" in "Power" measurement.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:POWer:REFerence:DATA:XVALues?
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Array_Size">
        /// Defines the size of array in argument 'Power X'.
        /// 
        /// Valid Values:
        /// not checked
        /// 
        /// Default Value: 50
        /// </param>
        /// <param name="Power_X">
        /// This control displays the x values of the two reference points, i.e. "Power X (Point A)" and "Power X (Point B)" in "Power" measurement.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepPowerReferenceCurvePowerX(int Sense, int Array_Size, double[] Power_X)
        {
            int pInvokeResult = PInvoke.GetPowerSweepPowerReferenceCurvePowerX(this._handle, Sense, Array_Size, Power_X);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the y values of the two reference points, i.e. "Power Y (Point A)" and "Power Y (Point B)" in "Power" measurement.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:POWer:REFerence:DATA:YVALues &lt;Yvalues&gt;
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Array_Size">
        /// Defines the size of array in argument 'Power Y'.
        /// 
        /// Valid Values:
        /// not checked
        /// 
        /// Default Value: 50
        /// </param>
        /// <param name="Power_Y">
        /// This control sets the y values of the two reference points, i.e. "Power Y (Point A)" and "Power Y (Point B)" in "Power" measurement.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: "0,0"
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepPowerReferenceCurvePowerY(int Sense, int Array_Size, double[] Power_Y)
        {
            int pInvokeResult = PInvoke.SetPowerSweepPowerReferenceCurvePowerY(this._handle, Sense, Array_Size, Power_Y);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the y values of the two reference points, i.e. "Power Y (Point A)" and "Power Y (Point B)" in "Power" measurement.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:POWer:REFerence:DATA:YVALues?
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Array_Size">
        /// Defines the size of array in argument 'Power Y'.
        /// 
        /// Valid Values:
        /// not checked
        /// 
        /// Default Value: 50
        /// </param>
        /// <param name="Power_Y">
        /// This control displays the y values of the two reference points, i.e. "Power Y (Point A)" and "Power Y (Point B)" in "Power" measurement.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepPowerReferenceCurvePowerY(int Sense, int Array_Size, double[] Power_Y)
        {
            int pInvokeResult = PInvoke.GetPowerSweepPowerReferenceCurvePowerY(this._handle, Sense, Array_Size, Power_Y);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates/deactivates a level offset at the sensor input. Define the appropriate value with :SENSe&lt;ch&gt;[:POWer]:SWEep:POWer[:SENSor]:OFFSet.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K28
        /// 
        /// Remote-control command(s):
        /// :SENSe&lt;ch&gt;[:POWer]:SWEep:POWer[:SENSor]:OFFSet:STATe On | OFF
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 4 - Third Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Offset_State">
        /// Activates/deactivates the addition of the level offset to the measured value. The level offset value is set with command SENSe[:POWer]:OFFSet. 
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepPowerLevelOffsetState(int Sense, bool Offset_State)
        {
            int pInvokeResult = PInvoke.SetPowerSweepPowerLevelOffsetState(this._handle, Sense, System.Convert.ToUInt16(Offset_State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the state of activation a level offset at the sensor input. The level offset value is set with command :SENSe&lt;ch&gt;[:POWer]:SWEep:POWer[:SENSor]:OFFSet
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K28
        /// 
        /// Remote-control command(s):
        /// :SENSe&lt;ch&gt;[:POWer]:SWEep:POWer[:SENSor]:OFFSet:STATe?
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 4 - Third Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Offset_State">
        /// Returns the state of addition the level offset to the measured value. The level offset value is set with command SENSe[:POWer]:OFFSet. 
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepPowerLevelOffsetState(int Sense, out bool Offset_State)
        {
            ushort Offset_StateAsUShort;
            int pInvokeResult = PInvoke.GetPowerSweepPowerLevelOffsetState(this._handle, Sense, out Offset_StateAsUShort);
            Offset_State = System.Convert.ToBoolean(Offset_StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets level offset at the sensor input in dB. Activate the offset with the command 
        /// :SENSe&lt;ch&gt;[:POWer]:SWEep:POWer[:SENSor]:OFFSet:STATe
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K28
        /// 
        /// Remote-control command(s):
        /// :SENSe&lt;ch&gt;[:POWer]:SWEep:POWer[:SENSor]:OFFSet
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 4 - Third Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Offset">
        /// This control sets a level offset.
        /// 
        /// Valid Values:
        /// -100 dB to 100 dB
        /// 
        /// Default Value: 0.0 dB
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepPowerLevelOffset(int Sense, double Offset)
        {
            int pInvokeResult = PInvoke.SetPowerSweepPowerLevelOffset(this._handle, Sense, Offset);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns a level ofset at the sensor input.
        /// The offset is activated with the command 
        /// :SENSe&lt;ch&gt;[:POWer]:SWEep:POWer[:SENSor]:OFFSet:STATe
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K28
        /// 
        /// Remote-control command(s):
        /// :SENSe&lt;ch&gt;[:POWer]:SWEep:POWer[:SENSor]:OFFSet?
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 4 - Third Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Offset">
        /// This control displays a level offset which.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepPowerLevelOffset(int Sense, out double Offset)
        {
            int pInvokeResult = PInvoke.GetPowerSweepPowerLevelOffset(this._handle, Sense, out Offset);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The function configures using of Separate Frequency for power vs. time measurement.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:TIME:SENSor:SFRequency:STATe  ON | OFF
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:TIME:SENSor:SFRequency  &lt;separate frequency&gt;
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="State">
        /// This control activates/deactivates the use of a different frequency for the power measurement.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <param name="Separate_Frequency">
        /// This control sets the separate frequency used for power vs. time measurement.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 1.0e9 Hz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int confPowerSweepTimeSeparateFrequencyRange(int Sense, bool State, double Separate_Frequency)
        {
            int pInvokeResult = PInvoke.confPowerSweepTimeSeparateFrequencyRange(this._handle, Sense, System.Convert.ToUInt16(State), Separate_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The function activates/deactivates pulse data analysis. The measurement is started with command INITiate.
        /// 
        /// Note(s):
        /// The function is only avalaible in time measurement mode and with R&amp;S NRP-Z81 power sensors.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K28
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]?3&gt;[:POWer]:SWEep:TIME[:SENSor]:PULSe:STATe  ON | OFF
        /// 
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="State">
        /// This control activates/deactivates pulse data analysis. The measurement is started with command INITiate.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepTimePulseDataAnalysisState(int Sense, bool State)
        {
            int pInvokeResult = PInvoke.SetPowerSweepTimePulseDataAnalysisState(this._handle, Sense, System.Convert.ToUInt16(State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The function returns state of the pulse data analysis. 
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K28
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]?3&gt;[:POWer]:SWEep:TIME[:SENSor]:PULSe:STATe?
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="State">
        /// This control returns pulse data analysis state.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepTimePulseDataAnalysisState(int Sense, out bool State)
        {
            ushort StateAsUShort;
            int pInvokeResult = PInvoke.GetPowerSweepTimePulseDataAnalysisState(this._handle, Sense, out StateAsUShort);
            State = System.Convert.ToBoolean(StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The function selects how the threshold parameters for pulse analysis are calculated.
        /// 
        /// Note(s):
        /// The function is only avalaible in time measurement mode and with R&amp;S NRP-Z81 power sensors.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K28
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:TIME[:SENSor]:PULSe:THReshold:BASE   VOLTage | POWer
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Base">
        /// This control selects how the threshold parameters for pulse analysis are calculated.
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_TIME_THRESHOLD_BASE_VOLT (0) - Voltage
        /// RSSMA_SENSE_POWER_TIME_THRESHOLD_BASE_POW  (1) - Power
        /// 
        /// Default Value: RSSMA_SENSE_POWER_TIME_THRESHOLD_BASE_VOLT (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepTimePulseThresholdBase(int Sense, int Base)
        {
            int pInvokeResult = PInvoke.SetPowerSweepTimePulseThresholdBase(this._handle, Sense, Base);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The function returns how the threshold parameters for pulse analysis are calculated.
        /// 
        /// Note(s):
        /// The function is only avalaible in time measurement mode and with R&amp;S NRP-Z81 power sensors.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K28
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:TIME[:SENSor]:PULSe:THReshold:BASE  ?
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Base">
        /// This control displays how the threshold parameters for pulse analysis are calculated.
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_TIME_THRESHOLD_BASE_VOLT (0) - Voltage
        /// RSSMA_SENSE_POWER_TIME_THRESHOLD_BASE_POW  (1) - Power
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepTimePulseThresholdBase(int Sense, out int Base)
        {
            int pInvokeResult = PInvoke.GetPowerSweepTimePulseThresholdBase(this._handle, Sense, out Base);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The function selects reference level in terms of percentage of the overall pulse level.
        /// 
        /// Note(s):
        /// The function is only avalaible in time measurement mode and with R&amp;S NRP-Z81 power sensors.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K28
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:TIME[:SENSor]:PULSe:THReshold:POWer:HREFerence   0...100
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:TIME[:SENSor]:PULSe:THReshold:POWer:REFerence   0...100
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:TIME[:SENSor]:PULSe:THReshold:POWer:LREFerence   0...100
        /// 
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Mode">
        /// This control selects the mode of reference level.
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_TIME_THRESHOLD_DISTAL (0) - Distal
        /// RSSMA_SENSE_POWER_TIME_THRESHOLD_MESIAL (1) - Mesial
        /// RSSMA_SENSE_POWER_TIME_THRESHOLD_PROXIM (2) - Proximal
        /// 
        /// Default Value: RSSMA_SENSE_POWER_TIME_THRESHOLD_MESIAL (0)
        /// </param>
        /// <param name="Reference_Level">
        /// This control sets reference level in terms of percentage of the overall pulse level. 
        /// 
        /// Valid Values:
        /// 0.0 to 100.0 %
        /// 
        /// Default Value: 90.0 %
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepTimePulseThresholdReferenceLevel(int Sense, int Mode, double Reference_Level)
        {
            int pInvokeResult = PInvoke.SetPowerSweepTimePulseThresholdReferenceLevel(this._handle, Sense, Mode, Reference_Level);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The function returns reference level in terms of percentage of the overall pulse level.
        /// 
        /// Note(s):
        /// The function is only avalaible in time measurement mode and with R&amp;S NRP-Z81 power sensors.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K28
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:TIME[:SENSor]:PULSe:THReshold:POWer:HREFerence?
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:TIME[:SENSor]:PULSe:THReshold:POWer:REFerence?
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:TIME[:SENSor]:PULSe:THReshold:POWer:LREFerence?
        /// 
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Mode">
        /// This control selects the mode of reference level.
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_TIME_THRESHOLD_DISTAL (0) - Distal
        /// RSSMA_SENSE_POWER_TIME_THRESHOLD_MESIAL (1) - Mesial
        /// RSSMA_SENSE_POWER_TIME_THRESHOLD_PROXIM (2) - Proximal
        /// 
        /// Default Value: RSSMA_SENSE_POWER_TIME_THRESHOLD_MESIAL (0)
        /// </param>
        /// <param name="Reference_Level">
        /// This control displays reference level in terms of percentage of the overall pulse level. 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepTimePulseThresholdReferenceLevel(int Sense, int Mode, out double Reference_Level)
        {
            int pInvokeResult = PInvoke.GetPowerSweepTimePulseThresholdReferenceLevel(this._handle, Sense, Mode, out Reference_Level);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The function selects if the measurement is free running or starts only after a trigger event.
        /// 
        /// Note(s):
        /// 
        /// (1) Set the measurement mode to Time with function rssma_SetPowerSweepMode (SENS:SWE:MODE TIME)
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:TIME:SENSor:TRIGger:SOURce  FREE | AUTO | EXTernal
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Source">
        /// This control selects if the measurement is free running or starts only after a trigger event.
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_TIME_TRIG_SOURCE_AUTO (0) - Auto
        /// RSSMA_SENSE_POWER_TIME_TRIG_SOURCE_FREE (1) - Free
        /// RSSMA_SENSE_POWER_TIME_TRIG_SOURCE_EXT  (2) - External
        /// 
        /// Default Value: RSSMA_SENSE_POWER_TIME_TRIG_SOURCE_AUTO (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepTimeTriggerSource(int Sense, int Source)
        {
            int pInvokeResult = PInvoke.SetPowerSweepTimeTriggerSource(this._handle, Sense, Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The function returns if the measurement is free running or starts only after a trigger event.
        /// 
        /// Note(s):
        /// 
        /// (1) Set the measurement mode to Time with function rssma_SetPowerSweepMode (SENS:SWE:MODE TIME)
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:TIME:SENSor:TRIGger:SOURce?
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Source">
        /// This control returns if the measurement is free running or starts only after a trigger event.
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_TIME_TRIG_SOURCE_AUTO (0) - Auto
        /// RSSMA_SENSE_POWER_TIME_TRIG_SOURCE_FREE (1) - Free
        /// RSSMA_SENSE_POWER_TIME_TRIG_SOURCE_EXT  (2) - External
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepTimeTriggerSource(int Sense, out int Source)
        {
            int pInvokeResult = PInvoke.GetPowerSweepTimeTriggerSource(this._handle, Sense, out Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function determines the minimum time for which the signal must be below (above) the power level defined by level and hysteresis before triggering can occur again.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:TIME:SENSor:TRIGger:DTIMe
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Drop_Out_Time">
        /// This control determines the minimum time for which the signal must be below (above) the power level defined by level and hysteresis before triggering can occur again.
        /// 
        /// Valid Values:
        /// 0.0 to 10.0 s
        /// 
        /// Default Value: 0.0 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepTimeTriggerDropOutTime(int Sense, double Drop_Out_Time)
        {
            int pInvokeResult = PInvoke.SetPowerSweepTimeTriggerDropOutTime(this._handle, Sense, Drop_Out_Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the minimum time for which the signal must be below (above) the power level defined by level and hysteresis before triggering can occur again.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:TIME:SENSor:TRIGger:DTIMe?
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Drop_Out_Time">
        /// This control displays the minimum time for which the signal must be below (above) the power level defined by level and hysteresis before triggering can occur again.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepTimeTriggerDropOutTime(int Sense, out double Drop_Out_Time)
        {
            int pInvokeResult = PInvoke.GetPowerSweepTimeTriggerDropOutTime(this._handle, Sense, out Drop_Out_Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the hysteresis of the internal trigger threshold. Hysteresis is the magnitude (in dB) the trigger signal level must drop below the trigger threshold (positive trigger slope) before triggering can occur again.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:TIME:SENSor:TRIGger:HYSTeresis  -10.0 dB ? + 10.0 dB
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Hysteresis">
        /// This control sets the hysteresis of the internal trigger threshold. Hysteresis is the magnitude (in dB) the trigger signal level must drop below the trigger threshold (positive trigger slope) before triggering can occur again.
        /// 
        /// Valid Values:
        /// -10.0 to 10.0 dB
        /// 
        /// Default Value: 0.5 dB
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepTimeTriggerHysteresis(int Sense, double Hysteresis)
        {
            int pInvokeResult = PInvoke.SetPowerSweepTimeTriggerHysteresis(this._handle, Sense, Hysteresis);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the hysteresis of the internal trigger threshold. Hysteresis is the magnitude (in dB) the trigger signal level must drop below the trigger threshold (positive trigger slope) before triggering can occur again.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:TIME:SENSor:TRIGger:HYSTeresis?
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Hysteresis">
        /// This control displays the hysteresis of the internal trigger threshold. Hysteresis is the magnitude (in dB) the trigger signal level must drop below the trigger threshold (positive trigger slope) before triggering can occur again.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepTimeTriggerHysteresis(int Sense, out double Hysteresis)
        {
            int pInvokeResult = PInvoke.GetPowerSweepTimeTriggerHysteresis(this._handle, Sense, out Hysteresis);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the trigger threshold.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:TIME:SENSor:TRIGger:LEVel  -200 ? 100 dBm
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Threshold">
        /// This control sets the trigger threshold.
        /// 
        /// Valid Values:
        /// -200.0 to 100.0 dBm
        /// 
        /// Default Value: 1.0 dBm
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepTimeTriggerThreshold(int Sense, double Threshold)
        {
            int pInvokeResult = PInvoke.SetPowerSweepTimeTriggerThreshold(this._handle, Sense, Threshold);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the trigger threshold.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:TIME:SENSor:TRIGger:LEVel?
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Threshold">
        /// This control displays the trigger threshold.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepTimeTriggerThreshold(int Sense, out double Threshold)
        {
            int pInvokeResult = PInvoke.GetPowerSweepTimeTriggerThreshold(this._handle, Sense, out Threshold);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the measurement data processing starts with a trigger event in one of the sensors (Logical OR), or whether all channels have to be triggered (logical AND). Each sensor evaluates a trigger event according to its setting independently. This function supports the internal or external trigger modes with multi-channel time measurements.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K28
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:TIME:TEVents
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Events">
        /// This controls sets the measurement data processing starts with a trigger event in one of the sensors (Logical OR), or whether all channels have to be triggered (logical AND).
        /// 
        /// Valid Values:
        /// RSSMA_SWEEP_TRIGGER_EVENTS_AND (0) - AND
        /// RSSMA_SWEEP_TRIGGER_EVENTS_OR  (1) - OR
        /// 
        /// Default Value:
        /// RSSMA_SWEEP_TRIGGER_EVENTS_AND (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepTimeTriggerEvents(int Sense, int Events)
        {
            int pInvokeResult = PInvoke.SetPowerSweepTimeTriggerEvents(this._handle, Sense, Events);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the measurement data processing starts with a trigger event in one of the sensors (Logical OR), or whether all channels have to be triggered (logical AND).
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K28
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:TIME:TEVents?
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Events">
        /// This control displays the measurement data processing starts with a trigger event in one of the sensors (Logical OR), or whether all channels have to be triggered (logical AND).
        /// 
        /// Valid Values:
        /// RSSMA_SWEEP_TRIGGER_EVENTS_AND (0) - AND
        /// RSSMA_SWEEP_TRIGGER_EVENTS_OR  (1) - OR
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepTimeTriggerEvents(int Sense, out int Events)
        {
            int pInvokeResult = PInvoke.GetPowerSweepTimeTriggerEvents(this._handle, Sense, out Events);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The function determines and sets the trigger level. The hysteresis and drop out time are not influenced.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:TIME:SENSor:TRIGger:AUTO ONCE
        /// *OPC?
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Timeout">
        /// Sets the timeout for the calibration routine to be finished and have obtained calibration result. If the length of time required for calibration exceeds the timeout value, then the function will return with a timeout error and the instrument will continue with calibration.
        /// 
        /// Valid Range: 0 ms to 600000 ms
        /// 
        /// Default Value: 180000 ms
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepTimeTriggerAutoSet(int Sense, int Timeout)
        {
            int pInvokeResult = PInvoke.SetPowerSweepTimeTriggerAutoSet(this._handle, Sense, Timeout);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The function sets the polarity of the active slope for the trigger signals.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K28
        /// 
        /// Remote-control command(s):
        /// :SENSe&lt;ch&gt;[:POWer]:SWEep:TIME[:SENSor]:TRIGger:SLOPe POSitive | NEGative
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 4 - Third Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Slope">
        /// This control sets the polarity of the active slope for the trigger signals.
        /// 
        /// Valid Values:
        /// RSSMA_INPUT_TRIGGER_SLOPE_NEGATIVE (0) - Negative
        /// RSSMA_INPUT_TRIGGER_SLOPE_POSITIVE (1) - Positive
        /// 
        /// Default Value: RSSMA_INPUT_TRIGGER_SLOPE_POSITIVE (1)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepTimeTriggerSlope(int Sense, int Slope)
        {
            int pInvokeResult = PInvoke.SetPowerSweepTimeTriggerSlope(this._handle, Sense, Slope);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The function returns the polarity of the active slope for the trigger signals.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K28
        /// 
        /// Remote-control command(s):
        /// :SENSe&lt;ch&gt;[:POWer]:SWEep:TIME[:SENSor]:TRIGger:SLOPe?
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 4 - Third Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Slope">
        /// Returns the polarity of the active slope for the trigger signals.
        /// 
        /// Returned Values:
        /// RSSMA_INPUT_TRIGGER_SLOPE_NEGATIVE (0) - Negative
        /// RSSMA_INPUT_TRIGGER_SLOPE_POSITIVE (1) - Positive
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepTimeTriggerSlope(int Sense, out int Slope)
        {
            int pInvokeResult = PInvoke.GetPowerSweepTimeTriggerSlope(this._handle, Sense, out Slope);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function enters the start time for the power versus time measurement. Value 0 defines the trigger point. By choosing a negative time value, the trace can be shifted in the diagram. It is possible, that the measurement cannot be performed over the complete time range because of limitations due to sensor settings. In this case, an error message is output.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:TIME:STARt
        /// 
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Time_Start">
        /// This control sets the start time for the power versus time measurement.
        /// 
        /// Valid Values:
        /// -1.0 to 1.0 s
        /// 
        /// Default Value: 0.0 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepTimeStart(int Sense, double Time_Start)
        {
            int pInvokeResult = PInvoke.SetPowerSweepTimeStart(this._handle, Sense, Time_Start);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the start time for the power versus time measurement.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:TIME:STARt?
        /// 
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Time_Start">
        /// This control displays the start time for the power versus time measurement.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepTimeStart(int Sense, out double Time_Start)
        {
            int pInvokeResult = PInvoke.GetPowerSweepTimeStart(this._handle, Sense, out Time_Start);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function enters the stop time for the power versus time measurement
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:TIME:STOP
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Time_Stop">
        /// This control sets the stop time for the power versus time measurement
        /// 
        /// Valid Values:
        /// 0.0 to 2.0 s
        /// 
        /// Default Value: 1.0 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepTimeStop(int Sense, double Time_Stop)
        {
            int pInvokeResult = PInvoke.SetPowerSweepTimeStop(this._handle, Sense, Time_Stop);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the stop time for the power versus time measurement.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:TIME:STOP?
        /// 
        /// 
        /// 
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Time_Stop">
        /// This control displays the stop time for the power versus time measurement.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepTimeStop(int Sense, out double Time_Stop)
        {
            int pInvokeResult = PInvoke.GetPowerSweepTimeStop(this._handle, Sense, out Time_Stop);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function determines, whether the measurement data processing starts with a trigger event in one of the sensors (Logical OR), or whether all channels have to be triggered (logical AND). Each sensor evaluates a trigger event according to its setting independently. This function supports the internal or external trigger modes with multi-channel time measurements.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:TIME:TEVents AND | OR
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Trigger_Events">
        /// Determines, whether the measurement data processing starts with a trigger event in one of the sensors (Logical OR), or whether all channels have to be triggered (logical AND). Each sensor evaluates a trigger event according to its setting independ-
        /// ently. This function supports the internal or external trigger modes with multi-channel time measurements.
        /// 
        /// Valid Values:
        /// RSSMA_POWER_SWEEP_TIME_TRIGGER_EVENT_AND (0) - AND
        /// RSSMA_POWER_SWEEP_TIME_TRIGGER_EVENT_OR  (1) - OR
        /// 
        /// Default Value:
        /// RSSMA_POWER_SWEEP_TIME_TRIGGER_EVENT_AND (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepTimeTriggerEvent(int Sense, int Trigger_Events)
        {
            int pInvokeResult = PInvoke.SetPowerSweepTimeTriggerEvent(this._handle, Sense, Trigger_Events);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the measurement data processing starts with a trigger event in one of the sensors (Logical OR), or whether all channels have to be triggered (logical AND).
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:TIME:TEVents?
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Trigger_Events">
        /// This control displays the measurement data processing starts with a trigger event in one of the sensors (Logical OR), or whether all channels have to be triggered (logical AND).
        /// 
        /// Valid Values:
        /// RSSMA_POWER_SWEEP_TIME_TRIGGER_EVENT_AND (0) - AND
        /// RSSMA_POWER_SWEEP_TIME_TRIGGER_EVENT_OR  (1) - OR
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepTimeTriggerEvent(int Sense, out int Trigger_Events)
        {
            int pInvokeResult = PInvoke.GetPowerSweepTimeTriggerEvent(this._handle, Sense, out Trigger_Events);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function enters the number of measurement steps for the power versus time measurement. Value 0 defines the trigger point. It is possible, that the measurement cannot be performed over the complete time range because of limitations due to sensor settings. In this case, an error message is output.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:TIME:STEPs
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Time_Steps">
        /// This control sets the number of measurement steps for the power versus time measurement.
        /// 
        /// Valid Values:
        /// 10 steps to 1000 steps
        /// 
        /// Default Value: 200 steps
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepTimeSteps(int Sense, int Time_Steps)
        {
            int pInvokeResult = PInvoke.SetPowerSweepTimeSteps(this._handle, Sense, Time_Steps);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the number of measurement steps for the power versus time measurement.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:TIME:STEPs?
        /// 
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Time_Steps">
        /// This control displays the number of measurement steps for the power versus time measurement.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepTimeSteps(int Sense, out int Time_Steps)
        {
            int pInvokeResult = PInvoke.GetPowerSweepTimeSteps(this._handle, Sense, out Time_Steps);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the sweep spacing for the power versus time measurement.
        /// 
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:TIME:SPACing[:MODE]
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Power_Spacing">
        /// This control selects the sweep spacing for the power versus time  measurement.
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_SWEEP_POWER_SPACING_LIN (0) - Linear
        /// RSSMA_SENSE_POWER_SWEEP_POWER_SPACING_LOG (1) - Logaritmic
        /// 
        /// Default Value:
        /// RSSMA_SENSE_POWER_SWEEP_POWER_SPACING_LIN (0) - Linear
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepTimeSpacing(int Sense, int Power_Spacing)
        {
            int pInvokeResult = PInvoke.SetPowerSweepTimeSpacing(this._handle, Sense, Power_Spacing);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the sweep spacing for the power versus time measurement.
        /// 
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:TIME:SPACing[:MODE]?
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Power_Spacing">
        /// This control displays the sweep spacing for the power versus time  measurement.
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_SWEEP_POWER_SPACING_LIN (0) - Linear
        /// RSSMA_SENSE_POWER_SWEEP_POWER_SPACING_LOG (1) - Logaritmic
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepTimeSpacing(int Sense, out int Power_Spacing)
        {
            int pInvokeResult = PInvoke.GetPowerSweepTimeSpacing(this._handle, Sense, out Power_Spacing);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The command selects the averaging factor in time mode. The count number determines how many measurement cycles are used to form a measurement result. Higher averaging counts reduce noise but increase the measurement time. Averaging requires a stable trigger event so that the measurement cycles have the same timing.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K28
        /// 
        /// Note(s):
        /// 
        /// (1) Set the measurement mode to Time with function rssma_SetPowerSweepMode (SENS:SWE:MODE TIME)
        /// 
        /// Remote-control command(s):
        /// SENSe[:POWer]:SWEep:TIME:AVERage[:COUNt]
        /// </summary>
        /// <param name="Averaging_Factor">
        /// This control selects the averaging factor in time mode.
        /// 
        /// Valid Values:
        /// 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 
        /// 
        /// 
        /// Default Value: 1
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepTimeAveragingFactor(int Averaging_Factor)
        {
            int pInvokeResult = PInvoke.SetPowerSweepTimeAveragingFactor(this._handle, Averaging_Factor);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The command returns the averaging factor in time mode. The count number determines how many measurement cycles are used to form a measurement result. Higher averaging counts reduce noise but increase the measurement time. Averaging requires a stable trigger event so that the measurement cycles have the same timing.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K28
        /// 
        /// Note(s):
        /// 
        /// (1) Set the measurement mode to Time with function rssma_SetPowerSweepMode (SENS:SWE:MODE TIME)
        /// 
        /// Remote-control command(s):
        /// SENSe[:POWer]:SWEep:TIME:AVERage[:COUNt]?
        /// </summary>
        /// <param name="Averaging_Factor">
        /// This control selects the averaging factor in time mode.
        /// 
        /// Valid Values:
        /// 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 
        /// 
        /// 
        /// Default Value: 1
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepTimeAveragingFactor(out int Averaging_Factor)
        {
            int pInvokeResult = PInvoke.GetPowerSweepTimeAveragingFactor(this._handle, out Averaging_Factor);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the minimum value for the y axis of the measurement diagram.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:TIME:YSCale:MINimum
        /// 
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Y_Scale_Minimum">
        /// This control sets the minimum value for the y axis of the measurement diagram.
        /// 
        /// Valid Values:
        /// -200 dBm to 100 dBm
        /// 
        /// Default Value: -40 dBm
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepTimeYScaleMinimum(int Sense, double Y_Scale_Minimum)
        {
            int pInvokeResult = PInvoke.SetPowerSweepTimeYScaleMinimum(this._handle, Sense, Y_Scale_Minimum);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the minimum value for the y axis of the measurement diagram.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:TIME:YSCale:MINimum?
        /// 
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Y_Scale_Minimum">
        /// This control displays the minimum value for the y axis of the measurement diagram.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepTimeYScaleMinimum(int Sense, out double Y_Scale_Minimum)
        {
            int pInvokeResult = PInvoke.GetPowerSweepTimeYScaleMinimum(this._handle, Sense, out Y_Scale_Minimum);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the maximum value for the y axis of the measurement diagram.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:TIME:YSCale:MAXimum
        /// 
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Y_Scale_Maximum">
        /// This control sets the minimum value for the y axis of the measurement diagram.
        /// 
        /// Valid Values:
        /// -200 dBm to 100 dBm
        /// 
        /// Default Value: 40 dBm
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepTimeYScaleMaximum(int Sense, double Y_Scale_Maximum)
        {
            int pInvokeResult = PInvoke.SetPowerSweepTimeYScaleMaximum(this._handle, Sense, Y_Scale_Maximum);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the maximum value for the y axis of the measurement diagram.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:TIME:YSCale:MAXimum?
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Y_Scale_Maximum">
        /// This control displays the minimum value for the y axis of the measurement diagram.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepTimeYScaleMaximum(int Sense, out double Y_Scale_Maximum)
        {
            int pInvokeResult = PInvoke.GetPowerSweepTimeYScaleMaximum(this._handle, Sense, out Y_Scale_Maximum);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects single or continuous mode in power analysis.
        ///  
        /// Remote-control command(s):
        /// SENSe[:POWer]:SWEep:TIME:RMODe 
        /// </summary>
        /// <param name="Execution">
        /// This control selects single or continuous mode for measurement mode frequency in power analysis.
        /// 
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_SWEEP_RMODE_SING (0) - Single
        /// RSSMA_SENSE_POWER_SWEEP_RMODE_CONT (1) - Continuous
        /// 
        /// Default Value:
        /// RSSMA_SENSE_POWER_SWEEP_RMODE_SING (0) - Single
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepTimeExecution(int Execution)
        {
            int pInvokeResult = PInvoke.SetPowerSweepTimeExecution(this._handle, Execution);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns single or continuous mode for measurement mode time in power analysis.
        /// 
        /// Remote-control command(s):
        /// SENSe[:POWer]:SWEep:POWer:RMODe?
        /// </summary>
        /// <param name="Execution">
        /// This control displays single or continuous mode for measurement mode time in power analysis.
        /// 
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_SWEEP_RMODE_SING (0) - Single
        /// RSSMA_SENSE_POWER_SWEEP_RMODE_CONT (1) - Continuous
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepTimeExecution(out int Execution)
        {
            int pInvokeResult = PInvoke.GetPowerSweepTimeExecution(this._handle, out Execution);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates/deactivates autoscaling of the Y axis of the diagram.
        /// 
        /// Remote-control command(s):
        /// SENSe[:POWer]:SWEep:TIME:YSCale:AUTO OFF | CEXPanding | FEXPanding | CFLoating | FFLoating
        /// 
        /// </summary>
        /// <param name="Auto_Scale">
        /// This control activates/deactivates autoscaling of the Y axis of the diagram.
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_SWEEP_YSCALE_AUTO_OFF  (0) - Off
        /// RSSMA_SENSE_POWER_SWEEP_YSCALE_AUTO_CEXP (1) - Exp. (Coarse) 
        /// RSSMA_SENSE_POWER_SWEEP_YSCALE_AUTO_FEXP (2) - Exp. (Fine) 
        /// RSSMA_SENSE_POWER_SWEEP_YSCALE_AUTO_CFL  (3) - Flt. (Coarse) 
        /// RSSMA_SENSE_POWER_SWEEP_YSCALE_AUTO_FFL  (4) - Flt. (Fine) 
        /// 
        /// Default Value:
        /// RSSMA_SENSE_POWER_SWEEP_YSCALE_AUTO_OFF  (0) - Off
        /// 
        /// Note(s):
        /// 
        /// (1) - Off:
        /// Auto scaling is deactivated. If switching from activated to deactivated Auto scaling, the scaling is maintained. 
        /// 
        /// (2) - Expanding:
        /// Auto scale is activated. The scaling of the Y-axis is selected in such a way, that the trace is always visible. To this end, the range is expanded if the minimum or maximum values of the trace move outside the current scale. The step width is 5 dB for selection course and variable in the range of 0.2 db to 5 dB for selection fine.
        /// 
        /// (3) - Floating:
        /// Auto scale is activated. The scaling of the Y-axis is selected in such a way, that the trace is always visible. To this end, the range is either expanded if the minimum or maximum values of the trace move outside the current scale or scaled down if the trace fits into a reduced scale. The step width is 5 dB for selection course and variable in the range of 0.2 db to 5 dB for selection fine.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepTimeYAutoScale(int Auto_Scale)
        {
            int pInvokeResult = PInvoke.SetPowerSweepTimeYAutoScale(this._handle, Auto_Scale);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns autoscaling of the Y axis of the diagram.
        /// 
        /// Remote-control command(s):
        /// SENSe[:POWer]:SWEep:TIME:YSCale:AUTO?
        /// </summary>
        /// <param name="Auto_Scale">
        /// This control returns autoscaling of the Y axis of the diagram.
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_SWEEP_YSCALE_AUTO_OFF  (0) - Off
        /// RSSMA_SENSE_POWER_SWEEP_YSCALE_AUTO_CEXP (1) - Exp. (Coarse) 
        /// RSSMA_SENSE_POWER_SWEEP_YSCALE_AUTO_FEXP (2) - Exp. (Fine) 
        /// RSSMA_SENSE_POWER_SWEEP_YSCALE_AUTO_CFL  (3) - Flt. (Coarse) 
        /// RSSMA_SENSE_POWER_SWEEP_YSCALE_AUTO_FFL  (4) - Flt. (Fine) 
        /// 
        /// Note(s):
        /// 
        /// (1) - Off:
        /// Auto scaling is deactivated. If switching from activated to deactivated Auto scaling, the scaling is maintained. 
        /// 
        /// (2) - Expanding:
        /// Auto scale is activated. The scaling of the Y-axis is selected in such a way, that the trace is always visible. To this end, the range is expanded if the minimum or maximum values of the trace move outside the current scale. The step width is 5 dB for selection course and variable in the range of 0.2 db to 5 dB for selection fine.
        /// 
        /// (3) - Floating:
        /// Auto scale is activated. The scaling of the Y-axis is selected in such a way, that the trace is always visible. To this end, the range is either expanded if the minimum or maximum values of the trace move outside the current scale or scaled down if the trace fits into a reduced scale. The step width is 5 dB for selection course and variable in the range of 0.2 db to 5 dB for selection fine.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepTimeYAutoScale(out int Auto_Scale)
        {
            int pInvokeResult = PInvoke.GetPowerSweepTimeYAutoScale(this._handle, out Auto_Scale);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function resets the Y scale to suitable values after the use of auto scaling in the expanding mode. For this mode, the scale might get expanded because of temporarily high power values. The reset function resets the diagram in such a way that it matches smaller power values again.
        ///  
        /// Remote-control command(s):
        /// SENSe[:POWer]:SWEep:TIME:YSCale:AUTO:RESet
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ResetPowerSweepTimeYScale()
        {
            int pInvokeResult = PInvoke.ResetPowerSweepTimeYScale(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The function activates/deactivates the use of a different frequency for the power measurement.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:TIME:SENSor:SFRequency:STATe  ON | OFF
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="State">
        /// This control activates/deactivates the use of a different frequency for the power measurement.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepTimeSeparateFrequencyState(int Sense, bool State)
        {
            int pInvokeResult = PInvoke.SetPowerSweepTimeSeparateFrequencyState(this._handle, Sense, System.Convert.ToUInt16(State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The function returns the use of a different frequency for the power measurement.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:TIME:SENSor:SFRequency:STATe?
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="State">
        /// This control displays the use of a different frequency for the power measurement.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepTimeSeparateFrequencyState(int Sense, out bool State)
        {
            ushort StateAsUShort;
            int pInvokeResult = PInvoke.GetPowerSweepTimeSeparateFrequencyState(this._handle, Sense, out StateAsUShort);
            State = System.Convert.ToBoolean(StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function enters the separate frequency used for power vs. time measurement.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:TIME:SENSor:SFRequency  &lt;separate frequency&gt;
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Separate_Frequency">
        /// This control sets the separate frequency used for power vs. time measurement.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 1.0e9 Hz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepTimeSeparateFrequency(int Sense, double Separate_Frequency)
        {
            int pInvokeResult = PInvoke.SetPowerSweepTimeSeparateFrequency(this._handle, Sense, Separate_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the separate frequency used for power vs. time measurement.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:TIME:SENSor:SFRequency?
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Separate_Frequency">
        /// This control displays the separate frequency used for power vs. time measurement.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepTimeSeparateFrequency(int Sense, out double Separate_Frequency)
        {
            int pInvokeResult = PInvoke.GetPowerSweepTimeSeparateFrequency(this._handle, Sense, out Separate_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function generates a reference curve for "Time" measurement.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:TIME:REFerence:DATA:COPY
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int PowerSweepTimeReferenceCurve(int Sense)
        {
            int pInvokeResult = PInvoke.PowerSweepTimeReferenceCurve(this._handle, Sense);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function reads the number of points from the reference curve in "Time" measurement.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:TIME:REFerence:DATA:POINts?
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Points">
        /// This control displays the number of points from the reference curve in "Time" measurement.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepTimeReferenceCurvePoints(int Sense, out int Points)
        {
            int pInvokeResult = PInvoke.GetPowerSweepTimeReferenceCurvePoints(this._handle, Sense, out Points);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the x values of the two reference points, i.e. "Time X (Point A)" and "Time X (Point B)" in "Time" measurement.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:TIME:REFerence:DATA:XVALues &lt;Xvalues&gt;
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Array_Size">
        /// Defines the size of array in argument 'Time X'.
        /// 
        /// Valid Values:
        /// not checked
        /// 
        /// Default Value: 50
        /// </param>
        /// <param name="Time_X">
        /// This control sets the x values of the two reference points, i.e. "Time X (Point A)" and "Time X (Point B)" in "Time" measurement.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: "0,0"
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepTimeReferenceCurveTimeX(int Sense, int Array_Size, double[] Time_X)
        {
            int pInvokeResult = PInvoke.SetPowerSweepTimeReferenceCurveTimeX(this._handle, Sense, Array_Size, Time_X);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the x values of the two reference points, i.e. "Time X (Point A)" and "Time X (Point B)" in "Time" measurement.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:TIME:REFerence:DATA:XVALues?
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Array_Size">
        /// Defines the size of array in argument 'Time X'.
        /// 
        /// Valid Values:
        /// not checked
        /// 
        /// Default Value: 50
        /// </param>
        /// <param name="Time_X">
        /// This control displays the x values of the two reference points, i.e. "Time X (Point A)" and "Time X (Point B)" in "Time" measurement.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepTimeReferenceCurveTimeX(int Sense, int Array_Size, double[] Time_X)
        {
            int pInvokeResult = PInvoke.GetPowerSweepTimeReferenceCurveTimeX(this._handle, Sense, Array_Size, Time_X);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the y values of the two reference points, i.e. "Power Y (Point A)" and "Power Y (Point B)" in "Time" measurement.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:TIME:REFerence:DATA:YVALues &lt;Yvalues&gt;
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Array_Size">
        /// Defines the size of array in argument 'Power Y'.
        /// 
        /// Valid Values:
        /// not checked
        /// 
        /// Default Value: 50
        /// </param>
        /// <param name="Power_Y">
        /// This control sets the y values of the two reference points, i.e. "Power Y (Point A)" and "Power Y (Point B)" in "Time" measurement.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: "0,0"
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepTimeReferenceCurvePowerY(int Sense, int Array_Size, double[] Power_Y)
        {
            int pInvokeResult = PInvoke.SetPowerSweepTimeReferenceCurvePowerY(this._handle, Sense, Array_Size, Power_Y);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the y values of the two reference points, i.e. "Power Y (Point A)" and "Power Y (Point B)" in "Time" measurement.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:TIME:REFerence:DATA:YVALues?
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Array_Size">
        /// Defines the size of array in argument 'Power Y'.
        /// 
        /// Valid Values:
        /// not checked
        /// 
        /// Default Value: 50
        /// </param>
        /// <param name="Power_Y">
        /// This control displays the y values of the two reference points, i.e. "Power Y (Point A)" and "Power Y (Point B)" in "Time" measurement.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepTimeReferenceCurvePowerY(int Sense, int Array_Size, double[] Power_Y)
        {
            int pInvokeResult = PInvoke.GetPowerSweepTimeReferenceCurvePowerY(this._handle, Sense, Array_Size, Power_Y);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates/deactivates a level offset at the sensor input. Define the appropriate value with :SENSe&lt;ch&gt;[:POWer]:SWEep:TIME[:SENSor]:OFFSet.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K28
        /// 
        /// Remote-control command(s):
        /// :SENSe&lt;ch&gt;[:POWer]:SWEep:TIME[:SENSor]:OFFSet:STATe On | OFF
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 4 - Third Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Offset_State">
        /// Activates/deactivates the addition of  the level offset to the measured value. The level offset value is set with command SENSe[:POWer]:OFFSet. 
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepTimeLevelOffsetState(int Sense, bool Offset_State)
        {
            int pInvokeResult = PInvoke.SetPowerSweepTimeLevelOffsetState(this._handle, Sense, System.Convert.ToUInt16(Offset_State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the state of activation a level offset at the sensor input. The level offset value is set with command :SENSe&lt;ch&gt;[:POWer]:SWEep:TIME[:SENSor]:OFFSet
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K28
        /// 
        /// Remote-control command(s):
        /// :SENSe&lt;ch&gt;[:POWer]:SWEep:TIME[:SENSor]:OFFSet:STATe?
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 4 - Third Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Offset_State">
        /// Displays activation the addition of  the level offset to the measured value. The level offset value is set with command SENSe[:POWer]:OFFSet. 
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepTimeLevelOffsetState(int Sense, out bool Offset_State)
        {
            ushort Offset_StateAsUShort;
            int pInvokeResult = PInvoke.GetPowerSweepTimeLevelOffsetState(this._handle, Sense, out Offset_StateAsUShort);
            Offset_State = System.Convert.ToBoolean(Offset_StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets level offset at the sensor input in dB. Activate the offset with the command :SENSe&lt;ch&gt;[:POWer]:SWEep:TIME[:SENSor]:OFFSet:STATe
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K28
        /// 
        /// Remote-control command(s):
        /// :SENSe&lt;ch&gt;[:POWer]:SWEep:TIME[:SENSor]:OFFSet
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 4 - Third Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Offset">
        /// This control sets a level offset.
        /// 
        /// Valid Values:
        /// -100 dB to 100 dB
        /// 
        /// Default Value: 0.0 dB
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepTimeLevelOffset(int Sense, double Offset)
        {
            int pInvokeResult = PInvoke.SetPowerSweepTimeLevelOffset(this._handle, Sense, Offset);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns a level ofset at the sensor input.
        /// The offset is activated with the command :SENSe&lt;ch&gt;[:POWer]:SWEep:TIME[:SENSor]:OFFSet:STATe
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K28
        /// 
        /// Remote-control command(s):
        /// :SENSe&lt;ch&gt;[:POWer]:SWEep:TIME[:SENSor]:OFFSet?
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 4 - Third Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Offset">
        /// This control displays a level offset which.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepTimeLevelOffset(int Sense, out double Offset)
        {
            int pInvokeResult = PInvoke.GetPowerSweepTimeLevelOffset(this._handle, Sense, out Offset);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The function activates/deactivates the selected trace.
        /// 
        /// Remote-control command(s):
        /// TRACe&lt;[1]...3&gt;[:POWer]:SWEep:STATe  ON | OFF
        /// 
        /// 
        /// </summary>
        /// <param name="Trace">
        /// This control selects the trace.
        /// 
        /// Valid Values:
        /// 1, 2, 3
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="State">
        /// This control activates/deactivates the selected trace.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepTraceState(int Trace, bool State)
        {
            int pInvokeResult = PInvoke.SetPowerSweepTraceState(this._handle, Trace, System.Convert.ToUInt16(State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The function returns the selected trace state.
        /// 
        /// Remote-control command(s):
        /// TRACe&lt;[1]...3&gt;[:POWer]:SWEep:STATe?
        /// 
        /// </summary>
        /// <param name="Trace">
        /// This control selects the trace.
        /// 
        /// Valid Values:
        /// 1, 2, 3
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="State">
        /// This control displays the selected trace state.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepTraceState(int Trace, out bool State)
        {
            ushort StateAsUShort;
            int pInvokeResult = PInvoke.GetPowerSweepTraceState(this._handle, Trace, out StateAsUShort);
            State = System.Convert.ToBoolean(StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The function defines the color of each trace.
        /// 
        /// Remote-control command(s):
        /// TRACe&lt;[1]?3&gt;[:POWer]:SWEep:COLor INVers | GRAY | YELLow | BLUE | GREen | RED | MAGenta
        /// </summary>
        /// <param name="Trace">
        /// This control selects the trace.
        /// 
        /// Valid Values:
        /// 1, 2, 3
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Color">
        /// This control defines the color of each trace.
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_SWEEP_TRACE_COLOR_INVE (0) - Invers
        /// RSSMA_SENSE_POWER_SWEEP_TRACE_COLOR_GRAY (1) - Gray
        /// RSSMA_SENSE_POWER_SWEEP_TRACE_COLOR_YELL (2) - Yellow
        /// RSSMA_SENSE_POWER_SWEEP_TRACE_COLOR_BLUE (3) - Blue
        /// RSSMA_SENSE_POWER_SWEEP_TRACE_COLOR_GREE (4) - Green
        /// RSSMA_SENSE_POWER_SWEEP_TRACE_COLOR_RED  (5) - Red
        /// RSSMA_SENSE_POWER_SWEEP_TRACE_COLOR_MAGN (6) - Magneta
        /// 
        /// Default Value: RSSMA_SENSE_POWER_SWEEP_TRACE_COLOR_INVE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepTraceColor(int Trace, int Color)
        {
            int pInvokeResult = PInvoke.SetPowerSweepTraceColor(this._handle, Trace, Color);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The function returns the color of each trace.
        /// 
        /// Remote-control command(s):
        /// TRACe&lt;[1]?3&gt;[:POWer]:SWEep:COLor?
        /// </summary>
        /// <param name="Trace">
        /// This control selects the trace.
        /// 
        /// Valid Values:
        /// 1, 2, 3
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Color">
        /// This control displays the color of each trace.
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_SWEEP_TRACE_COLOR_INVE (0) - Invers
        /// RSSMA_SENSE_POWER_SWEEP_TRACE_COLOR_GRAY (1) - Gray
        /// RSSMA_SENSE_POWER_SWEEP_TRACE_COLOR_YELL (2) - Yellow
        /// RSSMA_SENSE_POWER_SWEEP_TRACE_COLOR_BLUE (3) - Blue
        /// RSSMA_SENSE_POWER_SWEEP_TRACE_COLOR_GREE (4) - Green
        /// RSSMA_SENSE_POWER_SWEEP_TRACE_COLOR_RED  (5) - Red
        /// RSSMA_SENSE_POWER_SWEEP_TRACE_COLOR_MAGN (6) - Magneta
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepTraceColor(int Trace, out int Color)
        {
            int pInvokeResult = PInvoke.GetPowerSweepTraceColor(this._handle, Trace, out Color);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The function stores the selected trace data as reference trace.
        /// 
        /// Remote-control command(s):
        /// TRACe&lt;[1]...3&gt;[:POWer]:SWEep:COPY  REFerence
        /// </summary>
        /// <param name="Trace">
        /// This control selects the trace.
        /// 
        /// Valid Values:
        /// 1, 2, 3
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Copy_Mode">
        /// This control defines the copy.
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_SWEEP_TRACE_COPY_REF (0) - Reference
        /// 
        /// Default Value: RSSMA_SENSE_POWER_SWEEP_TRACE_COPY_REF (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int copyPowerSweepTrace(int Trace, int Copy_Mode)
        {
            int pInvokeResult = PInvoke.copyPowerSweepTrace(this._handle, Trace, Copy_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the number of measurement points of the selected trace of the current power analysis. 
        /// 
        /// Remote-control command(s):
        /// TRACe&lt;[1]?3&gt;[:POWer]:SWEep:DATA:POINts?   
        /// </summary>
        /// <param name="Trace">
        /// This control selects the trace.
        /// 
        /// Valid Values:
        /// 1, 2, 3
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Data_Points">
        /// This control displays the number of measurement points of the selected trace of the current power analysis. 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepTraceDataPoints(int Trace, out int Data_Points)
        {
            int pInvokeResult = PInvoke.GetPowerSweepTraceDataPoints(this._handle, Trace, out Data_Points);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the x-axis values - frequency, power or time values -  of the selected trace of the current power analysis.
        /// 
        /// Remote-control command(s):
        /// TRACe&lt;[1]?3&gt;[:POWer]:SWEep:DATA:XVALues?   
        /// </summary>
        /// <param name="Trace">
        /// This control selects the trace.
        /// 
        /// Valid Values:
        /// 1, 2, 3
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Array_Size">
        /// Defines the number of elements in the 'Data X Values' array.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: none
        /// 
        /// </param>
        /// <param name="X_Values">
        /// This control displays the x-axis values - frequency, power or time values -  of the selected trace of the current power analysis.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepTraceXValues(int Trace, int Array_Size, double[] X_Values)
        {
            int pInvokeResult = PInvoke.GetPowerSweepTraceXValues(this._handle, Trace, Array_Size, X_Values);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the measurement (y-axis) values of the selected trace of the current power analysis.
        /// 
        /// Remote-control command(s):
        /// TRACe&lt;[1]?3&gt;[:POWer]:SWEep:DATA:YVALues?   
        /// </summary>
        /// <param name="Trace">
        /// This control selects the trace.
        /// 
        /// Valid Values:
        /// 1, 2, 3
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Array_Size">
        /// Defines the number of elements in the 'Data X Values' array.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: none
        /// 
        /// </param>
        /// <param name="Y_Values">
        /// This control displays the measurement (y-axis) values of the selected trace of the current power analysis.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepTraceYValues(int Trace, int Array_Size, double[] Y_Values)
        {
            int pInvokeResult = PInvoke.GetPowerSweepTraceYValues(this._handle, Trace, Array_Size, Y_Values);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The function defines the source for the data trace.
        /// 
        /// Remote-control command(s):
        /// TRACe&lt;[1]...3&gt;[:POWer]:SWEep:FEED  SENSor1 | SENSor2 | SENSor3 | REFerence | NONE
        /// </summary>
        /// <param name="Trace">
        /// This control selects the trace.
        /// 
        /// Valid Values:
        /// 1, 2, 3
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Source">
        /// This control defines the source for the data trace.
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_SWEEP_TRACE_SOURCE_S1  (0) - Sensor 1
        /// RSSMA_SENSE_POWER_SWEEP_TRACE_SOURCE_S2  (1) - Sensor 2
        /// RSSMA_SENSE_POWER_SWEEP_TRACE_SOURCE_S3  (2) - Sensor 3
        /// RSSMA_SENSE_POWER_SWEEP_TRACE_SOURCE_REF (3) - Reference
        /// RSSMA_SENSE_POWER_SWEEP_TRACE_SOURCE_NON (4) - None
        /// 
        /// Default Value: RSSMA_SENSE_POWER_SWEEP_TRACE_SOURCE_NON (4)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepTraceSource(int Trace, int Source)
        {
            int pInvokeResult = PInvoke.SetPowerSweepTraceSource(this._handle, Trace, Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The function returns the source for the data trace.
        /// 
        /// Remote-control command(s):
        /// TRACe&lt;[1]...3&gt;[:POWer]:SWEep:FEED?
        /// </summary>
        /// <param name="Trace">
        /// This control selects the trace.
        /// 
        /// Valid Values:
        /// 1, 2, 3
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Source">
        /// This control displays the source for the data trace.
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_SWEEP_TRACE_SOURCE_S1  (0) - Sensor 1
        /// RSSMA_SENSE_POWER_SWEEP_TRACE_SOURCE_S2  (1) - Sensor 2
        /// RSSMA_SENSE_POWER_SWEEP_TRACE_SOURCE_S3  (2) - Sensor 3
        /// RSSMA_SENSE_POWER_SWEEP_TRACE_SOURCE_REF (3) - Reference
        /// RSSMA_SENSE_POWER_SWEEP_TRACE_SOURCE_NON (4) - None
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepTraceSource(int Trace, out int Source)
        {
            int pInvokeResult = PInvoke.GetPowerSweepTraceSource(this._handle, Trace, out Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The function queries the state of pulse data analysis.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K28
        /// 
        /// Remote-control command(s):
        /// TRACe&lt;[1]...3&gt;:POWer:SWEep:PULSe:STATe?
        /// </summary>
        /// <param name="Trace">
        /// This control selects the trace.
        /// 
        /// Valid Values:
        /// 1, 2, 3
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="State">
        /// This control returns the state of pulse data analysis.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepTracePulseDataAnalysisState(int Trace, out bool State)
        {
            ushort StateAsUShort;
            int pInvokeResult = PInvoke.GetPowerSweepTracePulseDataAnalysisState(this._handle, Trace, out StateAsUShort);
            State = System.Convert.ToBoolean(StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The function queries how the threshold parameters are calculated.
        /// 
        /// Note(s):
        /// The function is only avalaible in time measurement mode and with R&amp;S NRP-Z81 power sensors.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K28
        /// 
        /// Remote-control command(s):
        /// TRACe&lt;[1]...3&gt;[:POWer]:SWEep:PULSe:THReshold:BASE?
        /// 
        /// 
        /// </summary>
        /// <param name="Trace">
        /// This control selects the trace.
        /// 
        /// Valid Values:
        /// 1, 2, 3
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Base">
        /// This control displays how the threshold parameters are calculated.
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_TIME_THRESHOLD_BASE_VOLT (0) - Voltage
        /// RSSMA_SENSE_POWER_TIME_THRESHOLD_BASE_POW  (1) - Power
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepTracePulseThresholdBase(int Trace, out int Base)
        {
            int pInvokeResult = PInvoke.GetPowerSweepTracePulseThresholdBase(this._handle, Trace, out Base);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The function returns threshold level.
        /// 
        /// Note(s):
        /// The function is only avalaible in time measurement mode and with R&amp;S NRP-Z81 power sensors.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K28
        /// 
        /// Remote-control command(s):
        /// TRACe&lt;[1]...3&gt;[:POWer]:SWEep:PULSe:THReshold:POWer:HREFerence?
        /// TRACe&lt;[1]...3&gt;[:POWer]:SWEep:PULSe:THReshold:POWer:REFerence?
        /// TRACe&lt;[1]...3&gt;[:POWer]:SWEep:PULSe:THReshold:POWer:LREFerence?
        /// </summary>
        /// <param name="Trace">
        /// This control selects the trace.
        /// 
        /// Valid Values:
        /// 1, 2, 3
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Mode">
        /// This control selects the mode of reference level.
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_TIME_THRESHOLD_DISTAL (0) - Distal
        /// RSSMA_SENSE_POWER_TIME_THRESHOLD_MESIAL (1) - Mesial
        /// RSSMA_SENSE_POWER_TIME_THRESHOLD_PROXIM (2) - Proximal
        /// 
        /// Default Value: RSSMA_SENSE_POWER_TIME_THRESHOLD_MESIAL (0)
        /// </param>
        /// <param name="Reference_Level">
        /// This control displays threshold level. 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepTracePulseThresholdReferenceLevel(int Trace, int Mode, out double Reference_Level)
        {
            int pInvokeResult = PInvoke.GetPowerSweepTracePulseThresholdReferenceLevel(this._handle, Trace, Mode, out Reference_Level);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects single or contimuous mode for response measurement.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:RMODe
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Sense_Mode">
        /// This control selects single or contimuous mode for response measurement.
        /// 
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_SWEEP_RMODE_SING (0) - Single
        /// RSSMA_SENSE_POWER_SWEEP_RMODE_CONT (1) - Continuous
        /// 
        /// Default Value:
        /// RSSMA_SENSE_POWER_SWEEP_RMODE_SING (0) - Single
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepSenseMode(int Sense, int Sense_Mode)
        {
            int pInvokeResult = PInvoke.SetPowerSweepSenseMode(this._handle, Sense, Sense_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns single or contimuous mode for response measurement.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:RMODe?
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Sense_Mode">
        /// This control displays single or contimuous mode for response measurement.
        /// 
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_SWEEP_RMODE_SING (0) - Single
        /// RSSMA_SENSE_POWER_SWEEP_RMODE_CONT (1) - Continuous
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepSenseMode(int Sense, out int Sense_Mode)
        {
            int pInvokeResult = PInvoke.GetPowerSweepSenseMode(this._handle, Sense, out Sense_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects power versus frequency measurement (frequency response) or power vs power measurment (power sweep, AM/AM) or power vs. time measurement
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:MODE 
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Sweep_Mode">
        /// This control selects power versus frequency measurement (frequency response) or power vs power measurment (power sweep, AM/AM) or power vs. time measurement
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_SWEEP_MODE_FREQ (0) - Frequency
        /// RSSMA_SENSE_POWER_SWEEP_MODE_POW  (1) - Power
        /// RSSMA_SENSE_POWER_SWEEP_MODE_TIME (2) - Time
        /// 
        /// Default Value:
        /// RSSMA_SENSE_POWER_SWEEP_MODE_FREQ (0) - Frequency
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepMode(int Sense, int Sweep_Mode)
        {
            int pInvokeResult = PInvoke.SetPowerSweepMode(this._handle, Sense, Sweep_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns power versus frequency measurement (frequency response) or power vs power measurment (power sweep, AM/AM) 
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:MODE?
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Sweep_Mode">
        /// This control displays power versus frequency measurement (frequency response) or power vs power measurment (power sweep, AM/AM) 
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_SWEEP_MODE_FREQ (0) - Frequency
        /// RSSMA_SENSE_POWER_SWEEP_MODE_POW  (1) - Power
        /// RSSMA_SENSE_POWER_SWEEP_MODE_TIME (2) - Time
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepMode(int Sense, out int Sweep_Mode)
        {
            int pInvokeResult = PInvoke.GetPowerSweepMode(this._handle, Sense, out Sweep_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The function switches the indication of the selected type on or off.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K28
        /// 
        /// Note(s):
        /// 
        /// (1) Set the measurement mode to Time with function rssma_SetPowerSweepMode (SENS:SWE:MODE TIME)
        /// 
        /// Remote-control command(s):
        /// TRACe&lt;CH&gt;[:POWer]:SWEep:MEASurement:PULSe:ALL:DISPlay:ANNotation[:STATe] ON | OFF
        /// TRACe[:POWer]:SWEep:MEASurement:STANard:DISPlay:ANNotation[:STATe] ON | OFF
        /// TRACe[:POWer]:SWEep:MEASurement:MARKer:DISPlay:ANNotation[:STATe] ON | OFF
        /// TRACe[:POWer]:SWEep:MEASurement:GATE:DISPlay:ANNotation[:STATe] ON | OFF
        /// TRACe[:POWer]:SWEep:MEASurement:PULSe:DISPlay:ANNotation[:STATe] ON | OFF
        /// TRACe[:POWer]:SWEep:MEASurement:FULLscreen:DISPlay:ANNotation[:STATe]  ON | OFF
        /// TRACe&lt;CH&gt;[:POWer]:SWEep:MEASurement:POWer:AVERage:DISPlay:ANNotation[:STATe] 
        /// TRACe&lt;CH&gt;[:POWer]:SWEep:MEASurement:POWer:HREFerence:DISPlay:ANNotation[:STATe] 
        /// TRACe&lt;CH&gt;[:POWer]:SWEep:MEASurement:POWer:LREFerence:DISPlay:ANNotation[:STATe] 
        /// TRACe&lt;CH&gt;[:POWer]:SWEep:MEASurement:POWer:MAXimum:DISPlay:ANNotation[:STATe] 
        /// TRACe&lt;CH&gt;[:POWer]:SWEep:MEASurement:POWer:MINimum:DISPlay:ANNotation[:STATe] 
        /// TRACe&lt;CH&gt;[:POWer]:SWEep:MEASurement:POWer:PULSe:BASE:DISPlay:ANNotation[:STATe] 
        /// TRACe&lt;CH&gt;[:POWer]:SWEep:MEASurement:POWer:PULSe:TOP:DISPlay:ANNotation[:STATe] 
        /// TRACe&lt;CH&gt;[:POWer]:SWEep:MEASurement:POWer:REFerence:DISPlay:ANNotation[:STATe] 
        /// TRACe&lt;CH&gt;[:POWer]:SWEep:MEASurement:PULSe:DCYCle:DISPlay:ANNotation[:STATe] 
        /// TRACe&lt;CH&gt;[:POWer]:SWEep:MEASurement:PULSe:DURation:DISPlay:ANNotation[:STATe] 
        /// TRACe&lt;CH&gt;[:POWer]:SWEep:MEASurement:PULSe:PERiod:DISPlay:ANNotation[:STATe] 
        /// TRACe&lt;CH&gt;[:POWer]:SWEep:MEASurement:PULSe:SEParation:DISPlay:ANNotation[:STATe] 
        /// TRACe&lt;CH&gt;[:POWer]:SWEep:MEASurement:TRANsition:NEGative:DURation:DISPlay:ANNotation[:STATe] 
        /// TRACe&lt;CH&gt;[:POWer]:SWEep:MEASurement:TRANsition:NEGative:OCCurrence:DISPlay:ANNotation[:STATe] 
        /// TRACe&lt;CH&gt;[:POWer]:SWEep:MEASurement:TRANsition:NEGative:OVERshoot:DISPlay:ANNotation[:STATe] 
        /// TRACe&lt;CH&gt;[:POWer]:SWEep:MEASurement:TRANsition:POSitive:DURation:DISPlay:ANNotation[:STATe] 
        /// TRACe&lt;CH&gt;[:POWer]:SWEep:MEASurement:TRANsition:POSitive:OCCurrence:DISPlay:ANNotation[:STATe] 
        /// TRACe&lt;CH&gt;[:POWer]:SWEep:MEASurement:TRANsition:POSitive:OVERshoot:DISPlay:ANNotation[:STATe] 
        /// 
        /// </summary>
        /// <param name="Trace">
        /// This control selects the trace.
        /// 
        /// Valid Values:
        /// 1, 2, 3
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Type">
        /// This control selects the type of display indication.
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_DISP_PULS_ALL         (0) - Pulse Data All
        /// RSSMA_SENSE_POWER_DISP_PULS             (1) - Pulse Data
        /// RSSMA_SENSE_POWER_DISP_MARK             (2) - Marker
        /// RSSMA_SENSE_POWER_DISP_GATE             (3) - Gate
        /// RSSMA_SENSE_POWER_DISP_STAN             (4) - Standard
        /// RSSMA_SENSE_POWER_DISP_FULL_SCR         (5) - Fullscreen
        /// RSSMA_SENSE_POWER_DISP_POWER_AVER       (6) - Power Average
        /// RSSMA_SENSE_POWER_DISP_POWER_HREF       (7) - Power Hi Reference
        /// RSSMA_SENSE_POWER_DISP_POWER_REF        (8) - Power Reference
        /// RSSMA_SENSE_POWER_DISP_POWER_LREF       (9) - Power Lo Reference
        /// RSSMA_SENSE_POWER_DISP_POWER_MAX        (10) - Power Maximum
        /// RSSMA_SENSE_POWER_DISP_POWER_MIN        (11) - Power Minimum
        /// RSSMA_SENSE_POWER_DISP_POWER_PULSE_BASE (12) - Power Pulse Base
        /// RSSMA_SENSE_POWER_DISP_POWER_PULSE_TOP  (13) - Power Pulse Top
        /// RSSMA_SENSE_POWER_DISP_PULSE_DCYCLE     (14) - Pulse DCycle
        /// RSSMA_SENSE_POWER_DISP_PULSE_DUR        (15) - Pulse Duration
        /// RSSMA_SENSE_POWER_DISP_PULSE_PERIOD     (16) - Pulse Period
        /// RSSMA_SENSE_POWER_DISP_PULSE_SEP        (17) - Pulse Separation
        /// RSSMA_SENSE_POWER_DISP_TRAN_NEG_DUR     (18) - Negative Transition Duration
        /// RSSMA_SENSE_POWER_DISP_TRAN_NEG_OCC     (19) - Negative Transition Occurrence
        /// RSSMA_SENSE_POWER_DISP_TRAN_NEG_OVER    (20) - Negative Transition Overshoot
        /// RSSMA_SENSE_POWER_DISP_TRAN_POS_DUR     (21) - Positive Transition Duration
        /// RSSMA_SENSE_POWER_DISP_TRAN_POS_OCC     (22) - Positive Transition Occurrence
        /// RSSMA_SENSE_POWER_DISP_TRAN_POS_OVER    (23) - Positive Transition Overshoot
        /// 
        /// Default Value: RSSMA_SENSE_POWER_DISP_PULS_ALL (0)
        /// </param>
        /// <param name="Indication">
        /// This control switches the indication of the selected type on or off.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerDisplayIndication(int Trace, int Type, bool Indication)
        {
            int pInvokeResult = PInvoke.SetPowerDisplayIndication(this._handle, Trace, Type, System.Convert.ToUInt16(Indication));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The function returns the state of the indication of the selected type.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K28
        /// 
        /// Note(s):
        /// 
        /// (1) Set the measurement mode to Time with function rssma_SetPowerSweepMode (SENS:SWE:MODE TIME)
        /// 
        /// Remote-control command(s):
        /// TRACe&lt;CH&gt;[:POWer]:SWEep:MEASurement:PULSe:ALL:DISPlay:ANNotation[:STATe]?
        /// TRACe[:POWer]:SWEep:MEASurement:STANard:DISPlay:ANNotation[:STATe]?
        /// TRACe[:POWer]:SWEep:MEASurement:MARKer:DISPlay:ANNotation[:STATe]?
        /// TRACe[:POWer]:SWEep:MEASurement:GATE:DISPlay:ANNotation[:STATe]?
        /// TRACe[:POWer]:SWEep:MEASurement:PULSe:DISPlay:ANNotation[:STATe]?
        /// TRACe[:POWer]:SWEep:MEASurement:FULLscreen:DISPlay:ANNotation[:STATe]?
        /// TRACe&lt;CH&gt;[:POWer]:SWEep:MEASurement:POWer:AVERage:DISPlay:ANNotation[:STATe]?
        /// TRACe&lt;CH&gt;[:POWer]:SWEep:MEASurement:POWer:HREFerence:DISPlay:ANNotation[:STATe]?
        /// TRACe&lt;CH&gt;[:POWer]:SWEep:MEASurement:POWer:LREFerence:DISPlay:ANNotation[:STATe]?
        /// TRACe&lt;CH&gt;[:POWer]:SWEep:MEASurement:POWer:MAXimum:DISPlay:ANNotation[:STATe]?
        /// TRACe&lt;CH&gt;[:POWer]:SWEep:MEASurement:POWer:MINimum:DISPlay:ANNotation[:STATe]?
        /// TRACe&lt;CH&gt;[:POWer]:SWEep:MEASurement:POWer:PULSe:BASE:DISPlay:ANNotation[:STATe]?
        /// TRACe&lt;CH&gt;[:POWer]:SWEep:MEASurement:POWer:PULSe:TOP:DISPlay:ANNotation[:STATe]?
        /// TRACe&lt;CH&gt;[:POWer]:SWEep:MEASurement:POWer:REFerence:DISPlay:ANNotation[:STATe]?
        /// TRACe&lt;CH&gt;[:POWer]:SWEep:MEASurement:PULSe:DCYCle:DISPlay:ANNotation[:STATe]?
        /// TRACe&lt;CH&gt;[:POWer]:SWEep:MEASurement:PULSe:DURation:DISPlay:ANNotation[:STATe]?
        /// TRACe&lt;CH&gt;[:POWer]:SWEep:MEASurement:PULSe:PERiod:DISPlay:ANNotation[:STATe]?
        /// TRACe&lt;CH&gt;[:POWer]:SWEep:MEASurement:PULSe:SEParation:DISPlay:ANNotation[:STATe]?
        /// TRACe&lt;CH&gt;[:POWer]:SWEep:MEASurement:TRANsition:NEGative:DURation:DISPlay:ANNotation[:STATe]?
        /// TRACe&lt;CH&gt;[:POWer]:SWEep:MEASurement:TRANsition:NEGative:OCCurrence:DISPlay:ANNotation[:STATe]?
        /// TRACe&lt;CH&gt;[:POWer]:SWEep:MEASurement:TRANsition:NEGative:OVERshoot:DISPlay:ANNotation[:STATe]?
        /// TRACe&lt;CH&gt;[:POWer]:SWEep:MEASurement:TRANsition:POSitive:DURation:DISPlay:ANNotation[:STATe]?
        /// TRACe&lt;CH&gt;[:POWer]:SWEep:MEASurement:TRANsition:POSitive:OCCurrence:DISPlay:ANNotation[:STATe]?
        /// TRACe&lt;CH&gt;[:POWer]:SWEep:MEASurement:TRANsition:POSitive:OVERshoot:DISPlay:ANNotation[:STATe]?
        /// </summary>
        /// <param name="Trace">
        /// This control selects the trace.
        /// 
        /// Valid Values:
        /// 1, 2, 3
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Type">
        /// This control selects the type of display indication.
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_DISP_PULS_ALL         (0) - Pulse Data All
        /// RSSMA_SENSE_POWER_DISP_PULS             (1) - Pulse Data
        /// RSSMA_SENSE_POWER_DISP_MARK             (2) - Marker
        /// RSSMA_SENSE_POWER_DISP_GATE             (3) - Gate
        /// RSSMA_SENSE_POWER_DISP_STAN             (4) - Standard
        /// RSSMA_SENSE_POWER_DISP_FULL_SCR         (5) - Fullscreen
        /// RSSMA_SENSE_POWER_DISP_POWER_AVER       (6) - Power Average
        /// RSSMA_SENSE_POWER_DISP_POWER_HREF       (7) - Power Hi Reference
        /// RSSMA_SENSE_POWER_DISP_POWER_REF        (8) - Power Reference
        /// RSSMA_SENSE_POWER_DISP_POWER_LREF       (9) - Power Lo Reference
        /// RSSMA_SENSE_POWER_DISP_POWER_MAX        (10) - Power Maximum
        /// RSSMA_SENSE_POWER_DISP_POWER_MIN        (11) - Power Minimum
        /// RSSMA_SENSE_POWER_DISP_POWER_PULSE_BASE (12) - Power Pulse Base
        /// RSSMA_SENSE_POWER_DISP_POWER_PULSE_TOP  (13) - Power Pulse Top
        /// RSSMA_SENSE_POWER_DISP_PULSE_DCYCLE     (14) - Pulse DCycle
        /// RSSMA_SENSE_POWER_DISP_PULSE_DUR        (15) - Pulse Duration
        /// RSSMA_SENSE_POWER_DISP_PULSE_PERIOD     (16) - Pulse Period
        /// RSSMA_SENSE_POWER_DISP_PULSE_SEP        (17) - Pulse Separation
        /// RSSMA_SENSE_POWER_DISP_TRAN_NEG_DUR     (18) - Negative Transition Duration
        /// RSSMA_SENSE_POWER_DISP_TRAN_NEG_OCC     (19) - Negative Transition Occurrence
        /// RSSMA_SENSE_POWER_DISP_TRAN_NEG_OVER    (20) - Negative Transition Overshoot
        /// RSSMA_SENSE_POWER_DISP_TRAN_POS_DUR     (21) - Positive Transition Duration
        /// RSSMA_SENSE_POWER_DISP_TRAN_POS_OCC     (22) - Positive Transition Occurrence
        /// RSSMA_SENSE_POWER_DISP_TRAN_POS_OVER    (23) - Positive Transition Overshoot
        /// 
        /// Default Value: RSSMA_SENSE_POWER_DISP_PULS_ALL (0)
        /// </param>
        /// <param name="Indication">
        /// This control returns the state of the indication of the selected type.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerDisplayIndication(int Trace, int Type, out bool Indication)
        {
            ushort IndicationAsUShort;
            int pInvokeResult = PInvoke.GetPowerDisplayIndication(this._handle, Trace, Type, out IndicationAsUShort);
            Indication = System.Convert.ToBoolean(IndicationAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The function returns the measured pulse parameters values.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K28
        /// 
        /// Note(s):
        /// 
        /// (1) Set the measurement mode to Time with function rssma_SetPowerSweepMode (SENS:SWE:MODE TIME)
        /// 
        /// Remote-control command(s):
        /// TRACe&lt;[1]...3&gt;[:POWer]:SWEep:MEASurement:POWer:AVERage?
        /// TRACe&lt;[1]...3&gt;[:POWer]:SWEep:MEASurement:POWer:HREFerence?
        /// TRACe&lt;[1]...3&gt;[:POWer]:SWEep:MEASurement:POWer:LREFerence?
        /// TRACe&lt;[1]...3&gt;[:POWer]:SWEep:MEASurement:POWer:MAXimum?
        /// TRACe&lt;[1]...3&gt;[:POWer]:SWEep:MEASurement:POWer:MINimum?
        /// TRACe&lt;[1]...3&gt;[:POWer]:SWEep:MEASurement:POWer:PULSe:BASE?
        /// TRACe&lt;[1]...3&gt;[:POWer]:SWEep:MEASurement:POWer:PULSe:TOP?
        /// TRACe&lt;[1]...3&gt;[:POWer]:SWEep:MEASurement:POWer:REFerence?
        /// TRACe&lt;[1]...3&gt;[:POWer]:SWEep:MEASurement:PULSe:DCYCle?
        /// TRACe&lt;[1]...3&gt;[:POWer]:SWEep:MEASurement:PULSe:DURation?
        /// TRACe&lt;[1]...3&gt;[:POWer]:SWEep:MEASurement:PULSe:PERiod?
        /// TRACe&lt;[1]...3&gt;[:POWer]:SWEep:MEASurement:PULSe:SEParation?
        /// TRACe&lt;[1]...3&gt;[:POWer]:SWEep:MEASurement:TRANsition:NEGative:DURation?
        /// TRACe&lt;[1]...3&gt;[:POWer]:SWEep:MEASurement:TRANsition:NEGative:OCCurrence?
        /// TRACe&lt;[1]...3&gt;[:POWer]:SWEep:MEASurement:TRANsition:NEGative:OVERshoot?
        /// TRACe&lt;[1]...3&gt;[:POWer]:SWEep:MEASurement:TRANsition:POSitive:DURation?
        /// TRACe&lt;[1]...3&gt;[:POWer]:SWEep:MEASurement:TRANsition:POSitive:OCCurrence?
        /// TRACe&lt;[1]...3&gt;[:POWer]:SWEep:MEASurement:TRANsition:POSitive:OVERshoot?
        /// 
        /// </summary>
        /// <param name="Trace">
        /// This control selects the trace.
        /// 
        /// Valid Values:
        /// 1, 2, 3
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Type">
        /// This control selects the type of display indication.
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_DISP_POWER_AVER       (6) - Power Average
        /// RSSMA_SENSE_POWER_DISP_POWER_HREF       (7) - Power Hi Reference
        /// RSSMA_SENSE_POWER_DISP_POWER_REF        (8) - Power Reference
        /// RSSMA_SENSE_POWER_DISP_POWER_LREF       (9) - Power Lo Reference
        /// RSSMA_SENSE_POWER_DISP_POWER_MAX        (10) - Power Maximum
        /// RSSMA_SENSE_POWER_DISP_POWER_MIN        (11) - Power Minimum
        /// RSSMA_SENSE_POWER_DISP_POWER_PULSE_BASE (12) - Power Pulse Base
        /// RSSMA_SENSE_POWER_DISP_POWER_PULSE_TOP  (13) - Power Pulse Top
        /// RSSMA_SENSE_POWER_DISP_PULSE_DCYCLE     (14) - Pulse DCycle
        /// RSSMA_SENSE_POWER_DISP_PULSE_DUR        (15) - Pulse Duration
        /// RSSMA_SENSE_POWER_DISP_PULSE_PERIOD     (16) - Pulse Period
        /// RSSMA_SENSE_POWER_DISP_PULSE_SEP        (17) - Pulse Separation
        /// RSSMA_SENSE_POWER_DISP_TRAN_NEG_DUR     (18) - Negative Transition Duration
        /// RSSMA_SENSE_POWER_DISP_TRAN_NEG_OCC     (19) - Negative Transition Occurrence
        /// RSSMA_SENSE_POWER_DISP_TRAN_NEG_OVER    (20) - Negative Transition Overshoot
        /// RSSMA_SENSE_POWER_DISP_TRAN_POS_DUR     (21) - Positive Transition Duration
        /// RSSMA_SENSE_POWER_DISP_TRAN_POS_OCC     (22) - Positive Transition Occurrence
        /// RSSMA_SENSE_POWER_DISP_TRAN_POS_OVER    (23) - Positive Transition Overshoot
        /// 
        /// Default Value: RSSMA_SENSE_POWER_DISP_PULS_ALL (0)
        /// </param>
        /// <param name="Pulse_Data_Analysis">
        /// This control returns the measured pulse parameters values.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerDisplayPulseDataAnalysis(int Trace, int Type, out double Pulse_Data_Analysis)
        {
            int pInvokeResult = PInvoke.GetPowerDisplayPulseDataAnalysis(this._handle, Trace, Type, out Pulse_Data_Analysis);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries if a sensor is connected at the selected port to the signal generator. The sensor is selected by suffix 1, 2 or 3 in key word SENSe or READ of the command header. Suffix 1 denotes the sensor connected to the SENSOR connector, suffix 2 the sensor connected first to one of the USB interfaces and suffix 3 the sensor connected second to one of the USB interfaces.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:STATus[:DEVice]?
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Device">
        /// This control displays the if a sensor is connected at the selected port to the signal generator.
        /// 
        /// Valid Values:
        /// 1 to 3
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int PowerSensorDevice(int Sense, out int Device)
        {
            int pInvokeResult = PInvoke.PowerSensorDevice(this._handle, Sense, out Device);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the type of sensor connected at the selected port. The type is automatically detected.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:TYPE?
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Type">
        /// This control displays the sensor type.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int PowerSensorType(int Sense, System.Text.StringBuilder Type)
        {
            int pInvokeResult = PInvoke.PowerSensorType(this._handle, Sense, Type);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function retrieves the power measurement result of the selected power sensor. The value is provided with the unit set with command SENSe&lt;[1]...3&gt;:UNIT[:POWer]. 
        /// 
        /// Remote-control command(s):
        /// READ&lt;[1]...3&gt;[POWer]?
        /// </summary>
        /// <param name="Read">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Power">
        /// This control displays the power measurement result of the selected power sensor.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int PowerReadPower(int Read, out double Power)
        {
            int pInvokeResult = PInvoke.PowerReadPower(this._handle, Read, out Power);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the software version of the connected NRP power sensor.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;CH&gt;[:POWer]:SVERsion? 
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Version">
        /// This control querying the version of the connected NRP power sensor.
        /// 
        /// Valid Values:
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSensorVersion(int Sense, System.Text.StringBuilder Version)
        {
            int pInvokeResult = PInvoke.GetPowerSensorVersion(this._handle, Sense, Version);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the serial number of the sensor. 
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SNUMber?
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Serial_Number">
        /// This control displays the power sensor serial number.
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int PowerSensorSerialNumber(int Sense, System.Text.StringBuilder Serial_Number)
        {
            int pInvokeResult = PInvoke.PowerSensorSerialNumber(this._handle, Sense, Serial_Number);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the diagram display.
        /// 
        /// Remote-control command(s):
        /// DISPlay[:WINDow][:POWer]:SWEep:GRID:STATe ON | OFF
        /// DISPlay[:WINDow][:POWer]:SWEep:BACKground:COLor  BLACk | WHITe
        /// 
        /// </summary>
        /// <param name="Grid">
        /// Activates/deactivates the indication of a grid in the diagram area.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_TRUE  (1)
        /// 
        /// </param>
        /// <param name="Background_Color">
        /// This control selects the background color of the measurement diagram. The background color is also effective for the hardcopy of the diagram.
        /// 
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_DISPLAY_BC_BLACK (0) - Black
        /// RSSMA_SENSE_POWER_DISPLAY_BC_WHITE (1) - White
        /// 
        /// Default Value:
        /// RSSMA_SENSE_POWER_DISPLAY_BC_BLACK (0) - Black
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int confDiagramDisplay(bool Grid, int Background_Color)
        {
            int pInvokeResult = PInvoke.confDiagramDisplay(this._handle, System.Convert.ToUInt16(Grid), Background_Color);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates/deactivates the indication of a grid in the diagram area.
        /// 
        /// Remote-control command(s):
        /// DISPlay[:WINDow][:POWer]:SWEep:GRID:STATe ON | OFF
        /// </summary>
        /// <param name="Grid">
        /// Activates/deactivates the indication of a grid in the diagram area.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_TRUE  (1)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDiagramGrid(bool Grid)
        {
            int pInvokeResult = PInvoke.SetDiagramGrid(this._handle, System.Convert.ToUInt16(Grid));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the indication of a grid in the diagram area.
        /// 
        /// Remote-control command(s):
        /// DISPlay[:WINDow][:POWer]:SWEep:GRID:STATe?
        /// </summary>
        /// <param name="Grid">
        /// Displays the indication of a grid in the diagram area.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDiagramGrid(out bool Grid)
        {
            ushort GridAsUShort;
            int pInvokeResult = PInvoke.GetDiagramGrid(this._handle, out GridAsUShort);
            Grid = System.Convert.ToBoolean(GridAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the background color of the measurement diagram. The background color is also effective for the hardcopy of the diagram.
        /// 
        /// Remote-control command(s):
        /// DISPlay[:WINDow][:POWer]:SWEep:BACKground:COLor  BLACk | WHITe
        /// 
        /// 
        /// </summary>
        /// <param name="Background_Color">
        /// This control selects the background color of the measurement diagram. The background color is also effective for the hardcopy of the diagram.
        /// 
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_DISPLAY_BC_BLACK (0) - Black
        /// RSSMA_SENSE_POWER_DISPLAY_BC_WHITE (1) - White
        /// 
        /// Default Value:
        /// RSSMA_SENSE_POWER_DISPLAY_BC_BLACK (0) - Black
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDiagramBackgroundColor(int Background_Color)
        {
            int pInvokeResult = PInvoke.SetDiagramBackgroundColor(this._handle, Background_Color);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the background color of the measurement diagram. The background color is also effective for the hardcopy of the diagram.
        /// 
        /// Remote-control command(s):
        /// DISPlay[:WINDow][:POWer]:SWEep:BACKground:COLor?
        /// 
        /// 
        /// </summary>
        /// <param name="Background_Color">
        /// This control displays the background color of the measurement diagram. The background color is also effective for the hardcopy of the diagram.
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_DISPLAY_BC_BLACK (0) - Black
        /// RSSMA_SENSE_POWER_DISPLAY_BC_WHITE (1) - White
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDiagramBackgroundColor(out int Background_Color)
        {
            int pInvokeResult = PInvoke.GetDiagramBackgroundColor(this._handle, out Background_Color);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the bitmap graphic format for the screenshot of the power analysis trace.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:HCOPy:DEVice:LANGuage
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Sweep_Hardcopy_Format">
        /// This control selects the bitmap graphic format for the screenshot of the power analysis trace.
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_SWEEP_HARDCOPY_LANG_BMP (0) - BMP
        /// RSSMA_SENSE_POWER_SWEEP_HARDCOPY_LANG_JPG (1) - JPG
        /// RSSMA_SENSE_POWER_SWEEP_HARDCOPY_LANG_XPM (2) - XPM
        /// RSSMA_SENSE_POWER_SWEEP_HARDCOPY_LANG_PNG (3) - PNG
        /// RSSMA_SENSE_POWER_SWEEP_HARDCOPY_LANG_CSV (4) - CSV
        /// 
        /// Default Value:
        /// RSSMA_SENSE_POWER_SWEEP_HARDCOPY_LANG_BMP (0) - BMP
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepHardcopyLNGFormat(int Sense, int Sweep_Hardcopy_Format)
        {
            int pInvokeResult = PInvoke.SetPowerSweepHardcopyLNGFormat(this._handle, Sense, Sweep_Hardcopy_Format);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the bitmap graphic format for the screenshot of the power analysis trace.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:HCOPy:DEVice:LANGuage?
        /// </summary>
        /// <param name="Sense">
        /// This control sets the power sensor connected to the SENSOR port.
        /// 
        /// Valid Values:
        /// 1 - Power sensor connected to the SENSOR port
        /// 2 - First Power sensor connected to the USB interface
        /// 3 - Second Power sensor connected to the USB interface
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Sweep_Hardcopy_Format">
        /// This control displays the bitmap graphic format for the screenshot of the power analysis trace.
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_SWEEP_HARDCOPY_LANG_BMP (0) - BMP
        /// RSSMA_SENSE_POWER_SWEEP_HARDCOPY_LANG_JPG (1) - JPG
        /// RSSMA_SENSE_POWER_SWEEP_HARDCOPY_LANG_XPM (2) - XPM
        /// RSSMA_SENSE_POWER_SWEEP_HARDCOPY_LANG_PNG (3) - PNG
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepHardcopyLNGFormat(int Sense, out int Sweep_Hardcopy_Format)
        {
            int pInvokeResult = PInvoke.GetPowerSweepHardcopyLNGFormat(this._handle, Sense, out Sweep_Hardcopy_Format);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function stores the Hardcopy in the selected output format into a file.
        /// 
        /// Example:
        ///  SENS:SWE:HCOP:DEV:LANG BMP
        ///  selects output format *,bmp.
        /// 
        ///  MMEM:DIR 'var/nrp_sweep'
        ///  sets the directory 
        /// 
        ///  SENS:SWE:HCOP:FILE 'trace1'
        ///  triggers a hardcopy of the current trace and stores it in the   
        ///  file trace1.bmp in the set directory. The measurement diagram 
        ///  has to be visible in the foreground. 
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:HCOPy:FILE  &lt;file name&gt;
        /// 
        /// </summary>
        /// <param name="File_Name">
        /// File name of the Hardcopy.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepHardcopyFile(string File_Name)
        {
            int pInvokeResult = PInvoke.SetPowerSweepHardcopyFile(this._handle, File_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns name of the Hardcopy file.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;[1]...3&gt;[:POWer]:SWEep:HCOPy:FILE?
        /// </summary>
        /// <param name="File_Name">
        /// File name of the hardcopy file.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepHardcopyFile(System.Text.StringBuilder File_Name)
        {
            int pInvokeResult = PInvoke.GetPowerSweepHardcopyFile(this._handle, File_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the output device. The setting is fixed to FILE, i.e. the  hardcopy is stored in a file.
        /// 
        /// Remote-control command(s):
        /// SENSe[:POWer]:SWEep:HCOPy:DEVice  FILE
        /// </summary>
        /// <param name="Hardcopy_Device">
        /// This control defines the output device. The setting is fixed to FILE, i.e. the  hardcopy is stored in a file.
        /// 
        /// Valid Values:
        /// RSSMA_HCOPY_DEV_FILE (0) - File
        /// 
        /// Default Value: RSSMA_HCOPY_DEV_FILE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepHardcopyDevice(int Hardcopy_Device)
        {
            int pInvokeResult = PInvoke.SetPowerSweepHardcopyDevice(this._handle, Hardcopy_Device);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the output device. The setting is fixed to FILE, i.e. the  hardcopy is stored in a file.
        /// 
        /// Remote-control command(s):
        /// SENSe[:POWer]:SWEep:HCOPy:DEVice?
        /// </summary>
        /// <param name="Hardcopy_Device">
        /// This control displays the output device. The setting is fixed to FILE, i.e. the  hardcopy is stored in a file.
        /// 
        /// Valid Values:
        /// RSSMA_HCOPY_DEV_FILE (0) - File
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepHardcopyDevice(out int Hardcopy_Device)
        {
            int pInvokeResult = PInvoke.GetPowerSweepHardcopyDevice(this._handle, out Hardcopy_Device);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the size of the hardcopy in number of pixels. The first value of the size setting defines the width, the second value the height of the image.
        /// 
        /// Example:
        ///  SENS:SWE:HCOP:DEV:LANG BMP
        /// 'selects output format *.bmp.
        /// 
        /// SENS:SWE:HCOP:DEV:SIZE 320,240
        /// 'the size of the bitmap is 320 pixels by 240 pixels.
        ///  
        /// Remote-control command(s):
        /// SENSe[:POWer]:SWEep:HCOPy:DEVice:SIZE  320,240 | 640,480 | 800,600| 1024,768
        /// 
        ///  
        /// </summary>
        /// <param name="Image_Size">
        /// Sets the the size of the hardcopy in number of pixels.
        /// 
        /// Valid Values:
        /// RSSMA_HCOPY_SIZE_320_240  (0) - 320x240
        /// RSSMA_HCOPY_SIZE_640_480  (1) - 640x480
        /// RSSMA_HCOPY_SIZE_800_600  (2) - 800x600
        /// RSSMA_HCOPY_SIZE_1024_768 (3) - 1024x768
        /// 
        /// 
        /// Default Value: RSSMA_HCOPY_SIZE_320_240 (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepHardcopyImageSize(int Image_Size)
        {
            int pInvokeResult = PInvoke.SetPowerSweepHardcopyImageSize(this._handle, Image_Size);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the size of the hardcopy in number of pixels. The first value of the size setting defines the width, the second value the height of the image.
        ///  
        /// Remote-control command(s):
        /// SENSe[:POWer]:SWEep:HCOPy:DEVice:SIZEM?
        ///  
        /// </summary>
        /// <param name="Image_Size">
        /// Displays the the size of the hardcopy in number of pixels.
        /// 
        /// Valid Values:
        /// RSSMA_HCOPY_SIZE_320_240  (0) - 320x240
        /// RSSMA_HCOPY_SIZE_640_480  (1) - 640x480
        /// RSSMA_HCOPY_SIZE_800_600  (2) - 800x600
        /// RSSMA_HCOPY_SIZE_1024_768 (3) - 1024x768
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepHardcopyImageSize(out int Image_Size)
        {
            int pInvokeResult = PInvoke.GetPowerSweepHardcopyImageSize(this._handle, out Image_Size);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects if the markers in the measurement diagram and the marker list below the diagram are also indicated in the hardcopy file.
        /// 
        /// Remote-control command(s):
        /// SENSe[:POWer]:SWEep:HCOPy:ITEM[:WINDow][:STATistic]:MARKer[:STATe]   ON | OFF
        /// 
        /// 
        /// 
        /// 
        /// 
        /// </summary>
        /// <param name="State">
        /// This control selects if the markers in the measurement diagram and the marker list below the diagram are also indicated in the hardcopy file.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepHardcopyMarkerState(bool State)
        {
            int pInvokeResult = PInvoke.SetPowerSweepHardcopyMarkerState(this._handle, System.Convert.ToUInt16(State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns if the markers in the measurement diagram and the marker list below the diagram are also indicated in the hardcopy file.
        /// 
        /// Remote-control command(s):
        /// SENSe[:POWer]:SWEep:HCOPy:ITEM[:WINDow][:STATistic]:MARKer[:STATe]?
        /// 
        /// 
        /// 
        /// 
        /// 
        /// </summary>
        /// <param name="State">
        /// This control displays if the markers in the measurement diagram and the marker list below the diagram are also indicated in the hardcopy file.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepHardcopyMarkerState(out bool State)
        {
            ushort StateAsUShort;
            int pInvokeResult = PInvoke.GetPowerSweepHardcopyMarkerState(this._handle, out StateAsUShort);
            State = System.Convert.ToBoolean(StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function triggers the generation of a hardcopy of the current measurement diagram.. The data is written into the file selected/created with the SENS:SWE:HCOP:FILE command. 
        /// 
        /// Remote-control command(s):
        /// SENSe[:POWer]:SWEep:HCOPy[:EXECute]
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SavePowerSweepHardcopy()
        {
            int pInvokeResult = PInvoke.SavePowerSweepHardcopy(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines whether each row (or column depending on the orientation) should be preceded by a header containing information about the trace (see also 'SENSe[:POWer]:SWEep:HCOPy:DATA?').
        /// 
        /// Remote-control command(s):
        /// SENSe[:POWer]:SWEep:HCOPy:DEVice:LANGuage:CSV:HEADer  OFF | STANdard
        /// </summary>
        /// <param name="CSV_Header">
        /// This control defines whether each row (or column depending on the orientation) should be preceded by a header containing information about the trace (see also 'SENSe[:POWer]:SWEep:HCOPy:DATA?').
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_SWEEP_HARDCOPY_CSV_HEADER_OFF (0) - Off
        /// RSSMA_SENSE_POWER_SWEEP_HARDCOPY_CSV_HEADER_STD (1) - Standard
        /// 
        /// Default Value:
        /// RSSMA_SENSE_POWER_SWEEP_HARDCOPY_CSV_HEADER_STD (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepHardcopyCSVHeader(int CSV_Header)
        {
            int pInvokeResult = PInvoke.SetPowerSweepHardcopyCSVHeader(this._handle, CSV_Header);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns whether each row (or column depending on the orientation) should be preceded by a header containing information about the trace (see also 'SENSe[:POWer]:SWEep:HCOPy:DATA?').
        /// 
        /// Remote-control command(s):
        /// SENSe[:POWer]:SWEep:HCOPy:DEVice:LANGuage:CSV:HEADer?
        /// </summary>
        /// <param name="CSV_Header">
        /// This control displays whether each row (or column depending on the orientation) should be preceded by a header containing information about the trace (see also 'SENSe[:POWer]:SWEep:HCOPy:DATA?').
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_SWEEP_HARDCOPY_CSV_HEADER_OFF (0) - Off
        /// RSSMA_SENSE_POWER_SWEEP_HARDCOPY_CSV_HEADER_STD (1) - Standard
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepHardcopyCSVHeader(out int CSV_Header)
        {
            int pInvokeResult = PInvoke.GetPowerSweepHardcopyCSVHeader(this._handle, out CSV_Header);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the orientation of the X/Y value pairs. For examples on how the data are arranged see , section CSV Options Hardkey.
        /// 
        /// Remote-control command(s):
        /// SENSe[:POWer]:SWEep:HCOPy:DEVice:LANGuage:CSV:ORIentation HORizontal|VERTical
        /// 
        /// 
        /// </summary>
        /// <param name="CSV_Orientation">
        /// This control defines the orientation of the X/Y value pairs. 
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_SWEEP_HARDCOPY_CSV_ORIENT_HOR (0) - Horizontal
        /// RSSMA_SENSE_POWER_SWEEP_HARDCOPY_CSV_ORIENT_VER (1) - Vertical
        /// 
        /// Default Value:
        /// RSSMA_SENSE_POWER_SWEEP_HARDCOPY_CSV_ORIENT_HOR (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepHardcopyCSVOrientation(int CSV_Orientation)
        {
            int pInvokeResult = PInvoke.SetPowerSweepHardcopyCSVOrientation(this._handle, CSV_Orientation);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the orientation of the X/Y value pairs. For examples on how the data are arranged see , section CSV Options Hardkey.
        /// 
        /// Remote-control command(s):
        /// SENSe[:POWer]:SWEep:HCOPy:DEVice:LANGuage:CSV:ORIentation?
        /// 
        /// 
        /// </summary>
        /// <param name="CSV_Orientation">
        /// This control displays the orientation of the X/Y value pairs. 
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_SWEEP_HARDCOPY_CSV_ORIENT_HOR (0) - Horizontal
        /// RSSMA_SENSE_POWER_SWEEP_HARDCOPY_CSV_ORIENT_VER (1) - Vertical
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepHardcopyCSVOrientation(out int CSV_Orientation)
        {
            int pInvokeResult = PInvoke.GetPowerSweepHardcopyCSVOrientation(this._handle, out CSV_Orientation);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines which character is to separate the values, either tabulator, semicolon, comma or blank.
        /// 
        /// Remote-control command(s):
        /// SENSe[:POWer]:SWEep:HCOPy:DEVice:LANGuage:CSV[:COLumn]:SEParator  TABulator | SEMicolon | COMMa | BLANk
        /// 
        /// 
        /// 
        /// </summary>
        /// <param name="CSV_Column_Separator">
        /// This control defines which character is to separate the values, either tabulator, semicolon, comma or blank.
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_SWEEP_HARDCOPY_CSV_COL_TAB (0) - Tabulator
        /// RSSMA_SENSE_POWER_SWEEP_HARDCOPY_CSV_COL_SEM (1) - Semicolon
        /// RSSMA_SENSE_POWER_SWEEP_HARDCOPY_CSV_COL_COM (2) - Comma
        /// RSSMA_SENSE_POWER_SWEEP_HARDCOPY_CSV_COL_BLN (3) - Blank
        /// 
        /// Default Value:
        /// RSSMA_SENSE_POWER_SWEEP_HARDCOPY_CSV_COL_TAB (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepHardcopyCSVColumnSeparator(int CSV_Column_Separator)
        {
            int pInvokeResult = PInvoke.SetPowerSweepHardcopyCSVColumnSeparator(this._handle, CSV_Column_Separator);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns which character is to separate the values, either tabulator, semicolon, comma or blank.
        /// 
        /// Remote-control command(s):
        /// SENSe[:POWer]:SWEep:HCOPy:DEVice:LANGuage:CSV[:COLumn]:SEParator?
        /// 
        /// 
        /// 
        /// </summary>
        /// <param name="CSV_Column_Separator">
        /// This control displays which character is to separate the values, either tabulator, semicolon, comma or blank.
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_SWEEP_HARDCOPY_CSV_COL_TAB (0) - Tabulator
        /// RSSMA_SENSE_POWER_SWEEP_HARDCOPY_CSV_COL_SEM (1) - Semicolon
        /// RSSMA_SENSE_POWER_SWEEP_HARDCOPY_CSV_COL_COM (2) - Comma
        /// RSSMA_SENSE_POWER_SWEEP_HARDCOPY_CSV_COL_BLN (3) - Blank
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepHardcopyCSVColumnSeparator(out int CSV_Column_Separator)
        {
            int pInvokeResult = PInvoke.GetPowerSweepHardcopyCSVColumnSeparator(this._handle, out CSV_Column_Separator);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines which character should be used as the decimal point of the values, either dot or comma.
        /// 
        /// Remote-control command(s):
        /// SENSe[:POWer]:SWEep:HCOPy:DEVice:LANGuage:CSV:DPOint  DOT | COMMa
        /// </summary>
        /// <param name="CSV_Decimal_Point">
        /// This control defines which character should be used as the decimal point of the values, either dot or comma.
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_SWEEP_HARDCOPY_CSV_DECPOINT_DOT (0) - Dot
        /// RSSMA_SENSE_POWER_SWEEP_HARDCOPY_CSV_DECPOINT_COM (1) - Comma
        /// 
        /// Default Value:
        /// RSSMA_SENSE_POWER_SWEEP_HARDCOPY_CSV_DECPOINT_DOT (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepHardcopyCSVDecimalPoint(int CSV_Decimal_Point)
        {
            int pInvokeResult = PInvoke.SetPowerSweepHardcopyCSVDecimalPoint(this._handle, CSV_Decimal_Point);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns which character should be used as the decimal point of the values, either dot or comma.
        /// 
        /// Remote-control command(s):
        /// SENSe[:POWer]:SWEep:HCOPy:DEVice:LANGuageCSV:DPOint?
        /// </summary>
        /// <param name="CSV_Decimal_Point">
        /// This control displays which character should be used as the decimal point of the values, either dot or comma.
        /// 
        /// Valid Values:
        /// RSSMA_SENSE_POWER_SWEEP_HARDCOPY_CSV_DECPOINT_DOT (0) - Dot
        /// RSSMA_SENSE_POWER_SWEEP_HARDCOPY_CSV_DECPOINT_COM (1) - Comma
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepHardcopyCSVDecimalPoint(out int CSV_Decimal_Point)
        {
            int pInvokeResult = PInvoke.GetPowerSweepHardcopyCSVDecimalPoint(this._handle, out CSV_Decimal_Point);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the measurement data directly. The data is transferred to the remote client as data stream, e.g. for further processing.
        /// Readable ASCII data is available for hardcopy language CSV. The representation of the values depends on the selected orientation for the CSV format. 
        /// 
        /// Remote-control command(s):
        /// SENSe[:POWer]:SWEep:HCOPy:DATA? 
        /// </summary>
        /// <param name="Destination">
        /// This control defines destination file to which the data transfer from instrument to control computer applies.
        /// 
        /// Valid Range: not tested
        /// 
        /// Default Value: ""
        /// 
        /// Note(s):
        /// 
        /// (1) Readable ASCII data is available for hardcopy language CSV. The representation of the values depends on the selected orientation for the CSV format. 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepHardcopyCSVData(string Destination)
        {
            int pInvokeResult = PInvoke.GetPowerSweepHardcopyCSVData(this._handle, Destination);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates/deactivates automatic naming of the hardcopy files. 
        /// 
        /// Remote-control command(s):
        /// SENSe[:POWer]:SWEep:HCOPy:FILE[:NAME]:AUTO:STATe   ON | OFF
        /// 
        /// 
        /// 
        /// 
        /// 
        /// </summary>
        /// <param name="State">
        /// Switches on or off automatic naming of the hardcopy files. 
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_TRUE (1)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepHardcopyAutomaticNamingState(bool State)
        {
            int pInvokeResult = PInvoke.SetPowerSweepHardcopyAutomaticNamingState(this._handle, System.Convert.ToUInt16(State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns automatic naming of the hardcopy files. 
        /// 
        /// Remote-control command(s):
        /// SENSe[:POWer]:SWEep:HCOPy:FILE[:NAME]:AUTO:STATe?
        /// 
        /// 
        /// 
        /// 
        /// 
        /// </summary>
        /// <param name="State">
        /// Displays on or off automatic naming of the hardcopy files. 
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepHardcopyAutomaticNamingState(out bool State)
        {
            ushort StateAsUShort;
            int pInvokeResult = PInvoke.GetPowerSweepHardcopyAutomaticNamingState(this._handle, out StateAsUShort);
            State = System.Convert.ToBoolean(StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the file name that what generated using the automatic naming settings.
        /// 
        /// Remote-control command(s):
        /// SENSe[:POWer]:SWEep:HCOPy:FILE[:NAME]:AUTO:FILE?
        /// </summary>
        /// <param name="File_Name">
        /// Returns the file name that what generated using the automatic naming settings.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepHardcopyAutomaticFileName(string File_Name)
        {
            int pInvokeResult = PInvoke.GetPowerSweepHardcopyAutomaticFileName(this._handle, File_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the directory into which the hardcopy files will be stored if auto naming is activated (SENS:SWE:HCOP:FILE:AUTO:STAT ON). 
        /// 
        /// Remote-control command(s):
        /// SENSe[:POWer]:SWEep:HCOPy:FILE[:NAME]:AUTO:DIRectory  &lt;path&gt;
        /// </summary>
        /// <param name="Directory_Name">
        /// File name of the hardcopy file.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepHardcopyAutomaticDirectory(string Directory_Name)
        {
            int pInvokeResult = PInvoke.SetPowerSweepHardcopyAutomaticDirectory(this._handle, Directory_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the directory into which the hardcopy files will be stored if auto naming is activated (SENS:SWE:HCOP:FILE:AUTO:STAT ON). 
        /// 
        /// Remote-control command(s):
        /// SENSe[:POWer]:SWEep:HCOPy:FILE[:NAME]:AUTO:DIRectory?
        /// </summary>
        /// <param name="Directory_Name">
        /// File name of the hardcopy file.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepHardcopyAutomaticDirectory(System.Text.StringBuilder Directory_Name)
        {
            int pInvokeResult = PInvoke.GetPowerSweepHardcopyAutomaticDirectory(this._handle, Directory_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function deletes all files with extensions "bmp", "img", "png", "xpm" and "csv" in the directory set for automatic naming.
        /// 
        /// Remote-control command(s):
        /// SENSe[:POWer]:SWEep:HCOPy:FILE[:NAME]:AUTO:DIRectory:CLEar  
        /// 
        /// 
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int DeletePowerSweepHardcopyImageFiles()
        {
            int pInvokeResult = PInvoke.DeletePowerSweepHardcopyImageFiles(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates/deactivates the usage of the day/month/year in the automatic file name. 
        /// 
        /// Remote-control command(s):
        /// SENSe[:POWer]:SWEep:HCOPy:FILE[:NAME]:AUTO[:FILE]:DAY:STATe   ON | OFF
        /// SENSe[:POWer]:SWEep:HCOPy:FILE[:NAME]:AUTO[:FILE]:MONTh:STATe   ON | OFF
        /// SENSe[:POWer]:SWEep:HCOPy:FILE[:NAME]:AUTO[:FILE]:YEAR:STATe   ON | OFF
        /// 
        /// 
        /// 
        /// 
        /// 
        /// </summary>
        /// <param name="File_Name_Part">
        /// Specifies the part of automatic generated file name should be set.
        /// 
        /// Valid Values:
        /// RSSMA_HCOPY_AUTO_FILE_DAY    (0) - Day
        /// RSSMA_HCOPY_AUTO_FILE_MONTH  (1) - Month
        /// RSSMA_HCOPY_AUTO_FILE_YEAR   (2) - Year
        /// 
        /// Default Value: RSSMA_HCOPY_AUTO_FILE_DAY (0)
        /// </param>
        /// <param name="State">
        /// Switches on or off the usage of the day/month/year in the automatic file name.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_TRUE (1)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepHardcopyAutomaticFileDateState(int File_Name_Part, bool State)
        {
            int pInvokeResult = PInvoke.SetPowerSweepHardcopyAutomaticFileDateState(this._handle, File_Name_Part, System.Convert.ToUInt16(State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the usage of the day/month/year in the automatic file name. 
        /// 
        /// Remote-control command(s):
        /// SENSe[:POWer]:SWEep:HCOPy:FILE[:NAME]:AUTO[:FILE]:DAY:STATe?
        /// SENSe[:POWer]:SWEep:HCOPy:FILE[:NAME]:AUTO[:FILE]:MONTh:STATe?
        /// SENSe[:POWer]:SWEep:HCOPy:FILE[:NAME]:AUTO[:FILE]:YEAR:STATe?
        /// 
        /// </summary>
        /// <param name="File_Name_Part">
        /// Specifies the part of automatic generated file name should be set.
        /// 
        /// Valid Values:
        /// RSSMA_HCOPY_AUTO_FILE_DAY    (0) - Day
        /// RSSMA_HCOPY_AUTO_FILE_MONTH  (1) - Month
        /// RSSMA_HCOPY_AUTO_FILE_YEAR   (2) - Year
        /// 
        /// Default Value: RSSMA_HCOPY_AUTO_FILE_DAY (0)
        /// </param>
        /// <param name="State">
        /// Displays the usage of the day/month/year in the automatic file name.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepHardcopyAutomaticFileDateState(int File_Name_Part, out bool State)
        {
            ushort StateAsUShort;
            int pInvokeResult = PInvoke.GetPowerSweepHardcopyAutomaticFileDateState(this._handle, File_Name_Part, out StateAsUShort);
            State = System.Convert.ToBoolean(StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the day/month/year part in the automatic file name. 
        /// 
        /// Remote-control command(s):
        /// SENSe[:POWer]:SWEep:HCOPy:FILE[:NAME]:AUTO[:FILE]:DAY?
        /// SENSe[:POWer]:SWEep:HCOPy:FILE[:NAME]:AUTO[:FILE]:MONTh?
        /// SENSe[:POWer]:SWEep:HCOPy:FILE[:NAME]:AUTO[:FILE]:YEAR?
        /// 
        /// 
        /// 
        /// 
        /// 
        /// 
        /// 
        /// </summary>
        /// <param name="File_Name_Part">
        /// Specifies the part of automatic generated file name should be set.
        /// 
        /// Valid Values:
        /// RSSMA_HCOPY_AUTO_FILE_DAY    (0) - Day
        /// RSSMA_HCOPY_AUTO_FILE_MONTH  (1) - Month
        /// RSSMA_HCOPY_AUTO_FILE_YEAR   (2) - Year
        /// 
        /// Default Value: RSSMA_HCOPY_AUTO_FILE_DAY (0)
        /// </param>
        /// <param name="Part">
        /// Returns the day/month/year of the date part in the automatic file name. 
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepHardcopyAutomaticFileDate(int File_Name_Part, string Part)
        {
            int pInvokeResult = PInvoke.GetPowerSweepHardcopyAutomaticFileDate(this._handle, File_Name_Part, Part);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates/deactivates the usage of the prefix in the automatic file name. 
        /// 
        /// Remote-control command(s):
        /// SENSe[:POWer]:SWEep:HCOPy:FILE[:NAME]:AUTO[:FILE]:PREFix:STATe   ON | OFF
        /// 
        /// 
        /// 
        /// 
        /// 
        /// 
        /// 
        /// 
        /// 
        /// 
        /// </summary>
        /// <param name="State">
        /// Switches on or off the usage of the prefix in the automatic file name.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_TRUE (1)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepHardcopyAutomaticFilePrefixState(bool State)
        {
            int pInvokeResult = PInvoke.SetPowerSweepHardcopyAutomaticFilePrefixState(this._handle, System.Convert.ToUInt16(State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the usage of the prefix in the automatic file name. 
        /// 
        /// Remote-control command(s):
        /// SENSe[:POWer]:SWEep:HCOPy:FILE[:NAME]:AUTO[:FILE]:PREFix:STATe?
        /// 
        /// 
        /// 
        /// 
        /// 
        /// 
        /// 
        /// 
        /// 
        /// </summary>
        /// <param name="State">
        /// Displays the usage of the prefix in the automatic file name.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepHardcopyAutomaticFilePrefixState(out bool State)
        {
            ushort StateAsUShort;
            int pInvokeResult = PInvoke.GetPowerSweepHardcopyAutomaticFilePrefixState(this._handle, out StateAsUShort);
            State = System.Convert.ToBoolean(StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the prefix part in the automatic file name. 
        /// 
        /// Remote-control command(s):
        /// SENSe[:POWer]:SWEep:HCOPy:FILE[:NAME]:AUTO[:FILE]:PREFix  &lt;prefix&gt;
        /// 
        /// </summary>
        /// <param name="Prefix">
        /// Prefix of the automatic file name
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerSweepHardcopyAutomaticFilePrefix(string Prefix)
        {
            int pInvokeResult = PInvoke.SetPowerSweepHardcopyAutomaticFilePrefix(this._handle, Prefix);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the prefix part in the automatic file name. 
        /// 
        /// Remote-control command(s):
        /// SENSe[:POWer]:SWEep:HCOPy:FILE[:NAME]:AUTO[:FILE]:PREFix?
        /// 
        /// </summary>
        /// <param name="Prefix">
        /// Prefix of the automatic file name
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepHardcopyAutomaticFilePrefix(System.Text.StringBuilder Prefix)
        {
            int pInvokeResult = PInvoke.GetPowerSweepHardcopyAutomaticFilePrefix(this._handle, Prefix);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function  queries the generated number in the automatic file name. 
        /// 
        /// Remote-control command(s):
        /// SENSe[:POWer]:SWEep:HCOPy:FILE[:NAME]:AUTO[:FILE]:NUMBer?
        /// 
        /// 
        /// 
        /// 
        /// 
        /// 
        /// 
        /// 
        /// 
        /// </summary>
        /// <param name="Number">
        /// Returns the generated number in the automatic file name. 
        /// 
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerSweepHardcopyAutomaticFileNumber(out int Number)
        {
            int pInvokeResult = PInvoke.GetPowerSweepHardcopyAutomaticFileNumber(this._handle, out Number);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The function sets the trace mathematics mode for "Frequency" measurement. This feature enables to calculate the difference between the measurement values of two traces. Additionally, for further calculation a math result can also be assigned to a trace.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K28
        /// 
        /// Remote-control command(s):
        /// CALCulate[:POWer]:SWEep:FREQuency:MATH&lt;[1]...4&gt;:STATe
        /// </summary>
        /// <param name="Trace">
        /// This control selects the trace.
        /// 
        /// Valid Values:
        /// 1, 2, 3, 4
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="State">
        /// This control sets the trace mathematics mode for "Frequency" measurement.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value:
        /// VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerMathFrequencyState(int Trace, bool State)
        {
            int pInvokeResult = PInvoke.SetPowerMathFrequencyState(this._handle, Trace, System.Convert.ToUInt16(State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The function returns the trace mathematics mode for "Power" measurement.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K28
        /// 
        /// Remote-control command(s):
        /// CALCulate[:POWer]:SWEep:POWer:MATH&lt;[1]...4&gt;:STATe?
        /// </summary>
        /// <param name="Trace">
        /// This control selects the trace.
        /// 
        /// Valid Values:
        /// 1, 2, 3, 4
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="State">
        /// This control returns the trace mathematics mode for "Power" measurement.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerMathFrequencyState(int Trace, out bool State)
        {
            ushort StateAsUShort;
            int pInvokeResult = PInvoke.GetPowerMathFrequencyState(this._handle, Trace, out StateAsUShort);
            State = System.Convert.ToBoolean(StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The function executes the subtraction of the operands 1 and 2 and assigns the result to the selected trace in "Frequency" measurement mode.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K28
        /// 
        /// Remote-control command(s):
        /// CALCulate[:POWer]:SWEep:FREQuency:MATH&lt;[1]...4&gt;:SUBTract
        /// </summary>
        /// <param name="Trace">
        /// This control selects the trace.
        /// 
        /// Valid Values:
        /// 1, 2, 3, 4
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Subtract">
        /// This control sets the subtraction of the operands 1 and 2 and assigns the result to the selected trace in "Frequency" measurement mode.
        /// 
        /// Valid Values:
        /// RSSMA_MATH_SUBTRACT_T1T1  (0)
        /// RSSMA_MATH_SUBTRACT_T1T2  (1)
        /// RSSMA_MATH_SUBTRACT_T1T3  (2)
        /// RSSMA_MATH_SUBTRACT_T1T4  (3)
        /// RSSMA_MATH_SUBTRACT_T1REF (4)
        /// RSSMA_MATH_SUBTRACT_T2T1  (5)
        /// RSSMA_MATH_SUBTRACT_T2T2  (6)
        /// RSSMA_MATH_SUBTRACT_T2T3  (7)
        /// RSSMA_MATH_SUBTRACT_T2T4  (8)
        /// RSSMA_MATH_SUBTRACT_T2REF (9)
        /// RSSMA_MATH_SUBTRACT_T3T1  (10)
        /// RSSMA_MATH_SUBTRACT_T3T2  (11)
        /// RSSMA_MATH_SUBTRACT_T3T3  (12)
        /// RSSMA_MATH_SUBTRACT_T3T4  (13)
        /// RSSMA_MATH_SUBTRACT_T3REF (14)
        /// RSSMA_MATH_SUBTRACT_T4T1  (15)
        /// RSSMA_MATH_SUBTRACT_T4T2  (16)
        /// RSSMA_MATH_SUBTRACT_T4T3  (17)
        /// RSSMA_MATH_SUBTRACT_T4T4  (18)
        /// RSSMA_MATH_SUBTRACT_T4REF (19)
        /// 
        /// Default Value:
        /// RSSMA_MATH_SUBTRACT_T1T1  (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int PowerMathFrequencySubtract(int Trace, int Subtract)
        {
            int pInvokeResult = PInvoke.PowerMathFrequencySubtract(this._handle, Trace, Subtract);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The function sets the trace mathematics mode for "Power" measurement. This feature enables to calculate the difference between the measurement values of two traces. Additionally, for further calculation a math result can also be assigned to a trace.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K28
        /// 
        /// Remote-control command(s):
        /// CALCulate[:POWer]:SWEep:POWer:MATH&lt;[1]...4&gt;:STATe
        /// </summary>
        /// <param name="Trace">
        /// This control selects the trace.
        /// 
        /// Valid Values:
        /// 1, 2, 3, 4
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="State">
        /// This control sets the trace mathematics mode for "Power" measurement.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value:
        /// VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerMathPowerState(int Trace, bool State)
        {
            int pInvokeResult = PInvoke.SetPowerMathPowerState(this._handle, Trace, System.Convert.ToUInt16(State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The function returns the trace mathematics mode for "Frequency" measurement.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K28
        /// 
        /// Remote-control command(s):
        /// CALCulate[:POWer]:SWEep:FREQuency:MATH&lt;[1]...3&gt;:STATe?
        /// </summary>
        /// <param name="Trace">
        /// This control selects the trace.
        /// 
        /// Valid Values:
        /// 1, 2, 3, 4
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="State">
        /// This control returns the trace mathematics mode for "Frequency" measurement.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerMathPowerState(int Trace, out bool State)
        {
            ushort StateAsUShort;
            int pInvokeResult = PInvoke.GetPowerMathPowerState(this._handle, Trace, out StateAsUShort);
            State = System.Convert.ToBoolean(StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The function executes the subtraction of the operands 1 and 2 and assigns the result to the selected trace in "Power" measurement mode.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K28
        /// 
        /// Remote-control command(s):
        /// CALCulate[:POWer]:SWEep:POWer:MATH&lt;[1]...4&gt;:SUBTract
        /// </summary>
        /// <param name="Trace">
        /// This control selects the trace.
        /// 
        /// Valid Values:
        /// 1, 2, 3, 4
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Subtract">
        /// This control sets the subtraction of the operands 1 and 2 and assigns the result to the selected trace in "Power" measurement mode.
        /// 
        /// Valid Values:
        /// RSSMA_MATH_SUBTRACT_T1T1  (0)
        /// RSSMA_MATH_SUBTRACT_T1T2  (1)
        /// RSSMA_MATH_SUBTRACT_T1T3  (2)
        /// RSSMA_MATH_SUBTRACT_T1T4  (3)
        /// RSSMA_MATH_SUBTRACT_T1REF (4)
        /// RSSMA_MATH_SUBTRACT_T2T1  (5)
        /// RSSMA_MATH_SUBTRACT_T2T2  (6)
        /// RSSMA_MATH_SUBTRACT_T2T3  (7)
        /// RSSMA_MATH_SUBTRACT_T2T4  (8)
        /// RSSMA_MATH_SUBTRACT_T2REF (9)
        /// RSSMA_MATH_SUBTRACT_T3T1  (10)
        /// RSSMA_MATH_SUBTRACT_T3T2  (11)
        /// RSSMA_MATH_SUBTRACT_T3T3  (12)
        /// RSSMA_MATH_SUBTRACT_T3T4  (13)
        /// RSSMA_MATH_SUBTRACT_T3REF (14)
        /// RSSMA_MATH_SUBTRACT_T4T1  (15)
        /// RSSMA_MATH_SUBTRACT_T4T2  (16)
        /// RSSMA_MATH_SUBTRACT_T4T3  (17)
        /// RSSMA_MATH_SUBTRACT_T4T4  (18)
        /// RSSMA_MATH_SUBTRACT_T4REF (19)
        /// 
        /// Default Value:
        /// RSSMA_MATH_SUBTRACT_T1T1  (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int PowerMathPowerSubtract(int Trace, int Subtract)
        {
            int pInvokeResult = PInvoke.PowerMathPowerSubtract(this._handle, Trace, Subtract);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The function sets the trace mathematics mode for "Time" measurement. This feature enables to calculate the difference between the measurement values of two traces. Additionally, for further calculation a math result can also be assigned to a
        /// trace.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K28
        /// 
        /// Remote-control command(s):
        /// CALCulate[:POWer]:SWEep:TIME:MATH&lt;[1]...4&gt;:STATe
        /// </summary>
        /// <param name="Trace">
        /// This control selects the trace.
        /// 
        /// Valid Values:
        /// 1, 2, 3, 4
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="State">
        /// This control sets the trace mathematics mode for "Time" measurement.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value:
        /// VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerMathTimeState(int Trace, bool State)
        {
            int pInvokeResult = PInvoke.SetPowerMathTimeState(this._handle, Trace, System.Convert.ToUInt16(State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The function returns the trace mathematics mode for "Time" measurement.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K28
        /// 
        /// Remote-control command(s):
        /// CALCulate[:POWer]:SWEep:TIME:MATH&lt;[1]...4&gt;:STATe?
        /// </summary>
        /// <param name="Trace">
        /// This control selects the trace.
        /// 
        /// Valid Values:
        /// 1, 2, 3, 4
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="State">
        /// This control returns the trace mathematics mode for "Time" measurement.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerMathTimeState(int Trace, out bool State)
        {
            ushort StateAsUShort;
            int pInvokeResult = PInvoke.GetPowerMathTimeState(this._handle, Trace, out StateAsUShort);
            State = System.Convert.ToBoolean(StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The function executes the subtraction of the operands 1 and 2 and assigns the result to the selected trace in "Time" measurement mode.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K28
        /// 
        /// Remote-control command(s):
        /// CALCulate[:POWer]:SWEep:TIME:MATH&lt;[1]...4&gt;:SUBTract
        /// </summary>
        /// <param name="Trace">
        /// This control selects the trace.
        /// 
        /// Valid Values:
        /// 1, 2, 3, 4
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Subtract">
        /// This control sets the subtraction of the operands 1 and 2 and assigns the result to the selected trace in "Time" measurement mode.
        /// 
        /// Valid Values:
        /// RSSMA_MATH_SUBTRACT_T1T1  (0)
        /// RSSMA_MATH_SUBTRACT_T1T2  (1)
        /// RSSMA_MATH_SUBTRACT_T1T3  (2)
        /// RSSMA_MATH_SUBTRACT_T1T4  (3)
        /// RSSMA_MATH_SUBTRACT_T1REF (4)
        /// RSSMA_MATH_SUBTRACT_T2T1  (5)
        /// RSSMA_MATH_SUBTRACT_T2T2  (6)
        /// RSSMA_MATH_SUBTRACT_T2T3  (7)
        /// RSSMA_MATH_SUBTRACT_T2T4  (8)
        /// RSSMA_MATH_SUBTRACT_T2REF (9)
        /// RSSMA_MATH_SUBTRACT_T3T1  (10)
        /// RSSMA_MATH_SUBTRACT_T3T2  (11)
        /// RSSMA_MATH_SUBTRACT_T3T3  (12)
        /// RSSMA_MATH_SUBTRACT_T3T4  (13)
        /// RSSMA_MATH_SUBTRACT_T3REF (14)
        /// RSSMA_MATH_SUBTRACT_T4T1  (15)
        /// RSSMA_MATH_SUBTRACT_T4T2  (16)
        /// RSSMA_MATH_SUBTRACT_T4T3  (17)
        /// RSSMA_MATH_SUBTRACT_T4T4  (18)
        /// RSSMA_MATH_SUBTRACT_T4REF (19)
        /// 
        /// Default Value:
        /// RSSMA_MATH_SUBTRACT_T1T1  (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int PowerMathTimeSubtract(int Trace, int Subtract)
        {
            int pInvokeResult = PInvoke.PowerMathTimeSubtract(this._handle, Trace, Subtract);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the frequency parameters of sweep.
        /// 
        /// This function is linked to the commands [SOURce:]FREQuency:STARt and [SOURce:]FREQuency:STOP, i.e. changing these values causes the CENTer value to change, and vice versa:
        /// 
        /// CENTer = (STARt + STOP)/2. 
        /// 
        /// As with the Frequency value entered in the header, the OFFSet value is also taken into consideration with this function. The specified value range is therefore only effective if OFFSet is set to 0. The value range for other OFFset values can be calculated using the following formula:
        /// 
        /// 300 kHz + OFFSet ... RFmax + OFFSet
        /// 
        /// Remote-control command(s):
        /// [SOURce:]FREQuency:CENTer
        /// [SOURce:]FREQuency:SPAN
        /// [SOURce:]FREQuency:STARt
        /// [SOURce:]FREQuency:STOP
        /// [SOURce:]FREQuency:MODE SWEep
        /// [SOURce:]SWEep[:FREQuency]:MODE AUTO | MANual | STEP
        /// [SOURce:]FREQuency:MODE CW|FIXed | SWEep | LIST
        /// TRIGger:FSWeep:SOURce AUTO | IMMediate | SINGle | EXTernal| BUS | EAUTo
        /// [SOURce:]SWEep[:FREQuency]:STEP[:LINear]
        /// [SOURce:]SWEep[:FREQuency]:DWELl
        /// [SOURce:]SWEep[:FREQuency]:SPACing LINear | LOGarithmic
        /// [SOURce:]SWEep[:FREQuency]:STEP:LOGarithmic
        /// </summary>
        /// <param name="Mode">
        /// Sets the sweep mode.
        /// 
        /// Valid Values:
        /// RSSMA_SWEEP_MODE_AUTO      (0) - Auto
        /// RSSMA_SWEEP_MODE_SINGLE    (1) - Single
        /// RSSMA_SWEEP_MODE_STEP      (2) - Step
        /// RSSMA_SWEEP_MODE_EXT_SINGLE(3) - Extern Single
        /// RSSMA_SWEEP_MODE_EXT_STEP  (4) - Extern Step
        /// RSSMA_SWEEP_MODE_EXT_START (5) - Extern Start/Stop
        /// 
        /// Default Value: RSSMA_SWEEP_MODE_AUTO (0)
        /// 
        /// Notes:
        /// 
        /// (1) Auto:
        /// Cycle from the beginning to the end of the list with automatic restart at the beginning. If a different mode was activated prior to the Auto mode, the cycle continues from the current index. 
        /// 
        /// (2) Single:
        /// Single cycle from the beginning to the end of the list. If Single is selected, the cycle is not started immediately.
        /// 
        /// (3) Step:
        /// Manual, step-by-step processing of the list.
        /// 
        /// (4) Extern Single:
        /// Single cycle from the beginning to the end of the list as with Single, but started by an external trigger.
        /// 
        /// (5) Extern Step:
        /// Step-by-step cycle using the external trigger signal. Each trigger event starts a single step.
        /// 
        /// (6) Extern Start/Stop:
        /// The sweep is triggered externally via the INST TRIG connector. As soon as one sweep is finished, the next sweep is started. A second trigger event stops the sweep at the current frequency, a third trigger event starts the trigger at the start frequency, and so on
        /// 
        /// </param>
        /// <param name="Frequency_Setting">
        /// This parameter defines the method used for setting the sweep parameters.
        /// 
        /// Valid Values:
        /// RSSMA_FREQ_CENTER_SPAN    (0) - Center/Span
        /// RSSMA_FREQ_START_STOP     (1) - Start/Stop
        /// 
        /// Default Value: RSSMA_FREQ_CENTER_SPAN (0)
        /// </param>
        /// <param name="Center_Frequency">
        /// Sets the center frequency of the sweep.
        /// 
        /// Valid Range (offset = 0): 300 kHz to RFmax (RFmax depending on model)
        /// 
        /// Default Value: 300.0e6 Hz
        /// 
        /// </param>
        /// <param name="Span">
        /// Specifies the span for the sweep.
        /// 
        /// Valid Range: 0.0 to RFmax (RFmax depending on model)
        /// 
        /// Default Value: 400.0e6 Hz
        /// 
        /// </param>
        /// <param name="Start_Frequency">
        /// Sets the start frequency for the sweep mode. STARt can be greater than STOP.
        /// 
        /// Valid Range: 300 kHz + OFFSet to RFmax + OFFSet (RFmax depending on model)
        /// 
        /// Default Value: 100.0e6 Hz
        /// 
        /// </param>
        /// <param name="Stop_Frequency">
        /// Sets the stop frequency for the sweep mode. STOP can be less than STARt.
        /// 
        /// Valid Range: 300 kHz + OFFSet to RFmax + OFFSet (RFmax depending on model)
        /// 
        /// Default Value: 500.0e6 Hz
        /// 
        /// </param>
        /// <param name="Spacing">
        /// Selects linear or logarithmic sweep spacing.
        /// 
        /// Valid Values:
        /// RSSMA_FREQ_SWEEP_SPACING_LIN    (0) - Linear
        /// RSSMA_FREQ_SWEEP_SPACING_LOG    (1) - Logarithmic
        /// 
        /// Default Value: RSSMA_FREQ_SWEEP_SPACING_LIN  (0)
        /// 
        /// 
        /// </param>
        /// <param name="Step">
        /// Sets the step width for linear or logarithmic sweeps.
        /// 
        /// Valid Range: 
        /// For Linear Spacing:
        /// 0 to (STOP - STARt)
        /// POINts = (SPAN / STEP:LIN) + 1
        /// 
        /// For Logarithmic Spacing:
        /// 0.01 to 100.0 PCT
        /// 
        /// Default Value: none
        /// 
        /// Notes:
        /// 
        /// If STEP:LIN changes, the value of POINTs is adjusted. The STARt and STOP value is retained.
        /// 
        /// </param>
        /// <param name="Dwell_Time">
        /// This function sets the time taken for each frequency step of the sweep.
        /// 
        /// Valid Range: 3.0e-3 to 10.0 s
        /// 
        /// Default Value: 10.0e-3 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int confFrequencySweep(int Mode, int Frequency_Setting, double Center_Frequency, double Span, double Start_Frequency, double Stop_Frequency, int Spacing, double Step, double Dwell_Time)
        {
            int pInvokeResult = PInvoke.confFrequencySweep(this._handle, Mode, Frequency_Setting, Center_Frequency, Span, Start_Frequency, Stop_Frequency, Spacing, Step, Dwell_Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function triggers a sweep.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]:SWEep[:FREQuency]:EXECute
        /// 
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int FrequencySweepExecute()
        {
            int pInvokeResult = PInvoke.FrequencySweepExecute(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the sweep mode.
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]SWEep[:FREQuency]:MODE AUTO | MANual | STEP
        /// [SOURce:]FREQuency:MODE CW|FIXed | SWEep | LIST
        /// TRIGger:FSWeep:SOURce AUTO | IMMediate | SINGle | EXTernal| BUS | EAUTo
        /// </summary>
        /// <param name="Mode">
        /// Sets the sweep mode.
        /// 
        /// Valid Values:
        /// RSSMA_SWEEP_MODE_AUTO      (0) - Auto
        /// RSSMA_SWEEP_MODE_SINGLE    (1) - Single
        /// RSSMA_SWEEP_MODE_STEP      (2) - Step
        /// RSSMA_SWEEP_MODE_EXT_SINGLE(3) - Extern Single
        /// RSSMA_SWEEP_MODE_EXT_STEP  (4) - Extern Step
        /// RSSMA_SWEEP_MODE_EXT_START (5) - Extern Start/Stop
        /// 
        /// Default Value: RSSMA_SWEEP_MODE_AUTO (0)
        /// 
        /// Notes:
        /// 
        /// (1) Auto:
        /// Cycle from the beginning to the end of the list with automatic restart at the beginning. If a different mode was activated prior to the Auto mode, the cycle continues from the current index. 
        /// 
        /// (2) Single:
        /// Single cycle from the beginning to the end of the list. If Single is selected, the cycle is not started immediately.
        /// 
        /// (3) Step:
        /// Manual, step-by-step processing of the list.
        /// 
        /// (4) Extern Single:
        /// Single cycle from the beginning to the end of the list as with Single, but started by an external trigger.
        /// 
        /// (5) Extern Step:
        /// Step-by-step cycle using the external trigger signal. Each trigger event starts a single step.
        /// 
        /// (6) Extern Start/Stop:
        /// The sweep is triggered externally via the INST TRIG connector. As soon as one sweep is finished, the next sweep is started. A second trigger event stops the sweep at the current frequency, a third trigger event starts the trigger at the start frequency, and so on
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetFrequencySweepMode(int Mode)
        {
            int pInvokeResult = PInvoke.SetFrequencySweepMode(this._handle, Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the start frequency for the sweep mode. STARt can be greater than STOP.
        /// 
        /// This function is linked to the commands [SOUR]:FREQ:CENT and [SOUR]:FREQ:SPAN, i.e. changing these values causes the STARt value to change, and vice versa:
        /// 
        /// STARt = (CENTer - SPAN/2). 
        /// 
        /// As with the Frequency value entered in the header, the OFFSet value is also taken into consideration with this function. The specified value range is therefore only effective if OFFSet is set to 0. The value range for other OFFset values can be calculated using the following formula (see also section Frequency - Phase Menu):
        /// 
        /// 300 kHz + OFFSet ... RFmax + OFFSet
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]FREQuency:STARt
        /// 
        /// </summary>
        /// <param name="Start_Frequency">
        /// Sets the start frequency for the sweep mode. STARt can be greater than STOP.
        /// 
        /// Valid Range: 300 kHz + OFFSet to RFmax + OFFSet (RFmax depending on model)
        /// 
        /// Default Value: 100.0e6 Hz
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetFrequencySweepStartFreq(double Start_Frequency)
        {
            int pInvokeResult = PInvoke.SetFrequencySweepStartFreq(this._handle, Start_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the start frequency of the sweep mode. STARt can be greater than STOP.
        /// 
        /// This function is linked to the commands [SOUR]:FREQ:CENT and [SOUR]:FREQ:SPAN, i.e. changing these values causes the STARt value to change, and vice versa:
        /// 
        /// STARt = (CENTer - SPAN/2). 
        /// 
        /// As with the Frequency value entered in the header, the OFFSet value is also taken into consideration with this function. The specified value range is therefore only effective if OFFSet is set to 0. The value range for other OFFset values can be calculated using the following formula (see also section Frequency - Phase Menu"):
        /// 
        /// 300 kHz + OFFSet ... RFmax + OFFSet
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]FREQuency:STARt?
        /// 
        /// </summary>
        /// <param name="Start_Frequency">
        /// Returns the start frequency of the sweep mode. STARt can be greater than STOP.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetFrequencySweepStartFreq(out double Start_Frequency)
        {
            int pInvokeResult = PInvoke.GetFrequencySweepStartFreq(this._handle, out Start_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the stop frequency for the sweep mode. STOP can be less than STARt.
        /// 
        /// This function is linked to the commands [SOUR]:FREQ:CENt and [SOUR]:FREQ:SPAN, i.e. changing these values causes the STARt value to change, and vice versa:
        /// 
        /// STOP = (CENTer + SPAN/2). 
        /// 
        /// As with the Frequency value entered in the header, the OFFSet value is also taken into consideration with this command. The specified value range is therefore only effective if OFFSet is set to 0. The value range for other OFFset values can be calculated using the following formula (see also section Frequency - Phase Menu"):
        /// 
        /// 300 kHz  + OFFSet ... RFmax + OFFSet
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]FREQuency:STOP
        /// 
        /// </summary>
        /// <param name="Stop_Frequency">
        /// Sets the stop frequency for the sweep mode. STOP can be less than STARt.
        /// 
        /// Valid Range: 300 kHz + OFFSet to RFmax + OFFSet (RFmax depending on model)
        /// 
        /// Default Value: 500.0e6 Hz
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetFrequencySweepStopFreq(double Stop_Frequency)
        {
            int pInvokeResult = PInvoke.SetFrequencySweepStopFreq(this._handle, Stop_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the stop frequency of the sweep mode. STOP can be less than STARt.
        /// 
        /// This function is linked to the commands [SOUR]:FREQ:CENt and [SOUR]:FREQ:SPAN, i.e. changing these values causes the STARt value to change, and vice versa:
        /// 
        /// STOP = (CENTer + SPAN/2). 
        /// 
        /// As with the Frequency value entered in the header, the OFFSet value is also taken into consideration with this command. The specified value range is therefore only effective if OFFSet is set to 0. The value range for other OFFset values can be calculated using the following formula (see also section Frequency - Phase Menu"):
        /// 
        /// 300 kHz  + OFFSet ... RFmax + OFFSet
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]FREQuency:STOP?
        /// 
        /// </summary>
        /// <param name="Stop_Frequency">
        /// Returns the stop frequency of the sweep mode. STOP can be less than STARt.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetFrequencySweepStopFreq(out double Stop_Frequency)
        {
            int pInvokeResult = PInvoke.GetFrequencySweepStopFreq(this._handle, out Stop_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the center frequency of the sweep. This setting in combination with the span setting ([SOURce:]FREQuency:SPAN) defines the sweep range.
        /// 
        /// This function is linked to the commands [SOURce:]FREQuency:STARt and [SOURce:]FREQuency:STOP, i.e. changing these values causes the CENTer value to change, and vice versa:
        /// 
        /// CENTer = (STARt + STOP)/2. 
        /// 
        /// As with the Frequency value entered in the header, the OFFSet value is also taken into consideration with this function. The specified value range is therefore only effective if OFFSet is set to 0. The value range for other OFFset values can be calculated using the following formula:
        /// 
        /// 300 kHz + OFFSet ... RFmax + OFFSet
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]FREQuency:CENTer
        /// 
        /// </summary>
        /// <param name="Center_Frequency">
        /// Sets the center frequency of the sweep.
        /// 
        /// Valid Range (offset = 0): 300 kHz to RFmax (RFmax depending on model)
        /// 
        /// Default Value: 300.0e6 Hz
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetFrequencySweepCenterFreq(double Center_Frequency)
        {
            int pInvokeResult = PInvoke.SetFrequencySweepCenterFreq(this._handle, Center_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the center frequency of the sweep. This setting in combination with the span setting ([SOURce:]FREQuency:SPAN) defines the sweep range.
        /// 
        /// This function is linked to the commands [SOURce:]FREQuency:STARt and [SOURce:]FREQuency:STOP, i.e. changing these values causes the CENTer value to change, and vice versa:
        /// 
        /// CENTer = (STARt + STOP)/2. 
        /// 
        /// As with the Frequency value entered in the header, the OFFSet value is also taken into consideration with this function. The specified value range is therefore only effective if OFFSet is set to 0. The value range for other OFFset values can be calculated using the following formula:
        /// 
        /// 300 kHz + OFFSet ... RFmax +OFFSet
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]FREQuency:CENTer?
        /// 
        /// </summary>
        /// <param name="Center_Frequency">
        /// Returns the center frequency of the sweep.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetFrequencySweepCenterFreq(out double Center_Frequency)
        {
            int pInvokeResult = PInvoke.GetFrequencySweepCenterFreq(this._handle, out Center_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function specifies the span for the sweep. This setting in combination with the center frequency setting ([SOUR]:FREQ:CENT) defines the sweep range.
        /// 
        /// This function is linked to the commands [SOUR]:FREQ:STAR and [SOUR]:FREQ:STOP, i.e. changing these values causes the SPAN value to change, and vice versa:
        /// 
        /// SPAN = (STOP - STARt)
        /// 
        /// Negative values for SPAN are permitted; STARt &gt; STOP then applies.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]FREQuency:SPAN
        /// 
        /// </summary>
        /// <param name="Span">
        /// Specifies the span for the sweep.
        /// 
        /// Valid Range: 0.0 to RFmax (RFmax depending on model)
        /// 
        /// Default Value: 400.0e6 Hz
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetFrequencySweepSpan(double Span)
        {
            int pInvokeResult = PInvoke.SetFrequencySweepSpan(this._handle, Span);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the span of the sweep. This setting in combination with the center frequency setting ([SOUR]:FREQ:CENT) defines the sweep range.
        /// 
        /// This function is linked to the commands [SOUR]:FREQ:STAR and [SOUR]:FREQ:STOP, i.e. changing these values causes the SPAN value to change, and vice versa:
        /// 
        /// SPAN = (STOP - STARt)
        /// 
        /// Negative values for SPAN are permitted; STARt &gt; STOP then applies.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]FREQuency:SPAN?
        /// 
        /// </summary>
        /// <param name="Span">
        /// Returns the span of the sweep.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetFrequencySweepSpan(out double Span)
        {
            int pInvokeResult = PInvoke.GetFrequencySweepSpan(this._handle, out Span);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects linear or logarithmic sweep spacing.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]SWEep[:FREQuency]:SPACing LINear | LOGarithmic
        /// </summary>
        /// <param name="Spacing">
        /// Selects linear or logarithmic sweep spacing.
        /// 
        /// Valid Values:
        /// RSSMA_FREQ_SWEEP_SPACING_LIN    (0) - Linear
        /// RSSMA_FREQ_SWEEP_SPACING_LOG    (1) - Logarithmic
        /// 
        /// Default Value: RSSMA_FREQ_SWEEP_SPACING_LIN  (0)
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetFrequencySweepSpacing(int Spacing)
        {
            int pInvokeResult = PInvoke.SetFrequencySweepSpacing(this._handle, Spacing);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns linear or logarithmic sweep spacing.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]SWEep[:FREQuency]:SPACing?
        /// </summary>
        /// <param name="Spacing">
        /// Returns linear or logarithmic sweep spacing.
        /// 
        /// Valid Values:
        /// RSSMA_FREQ_SWEEP_SPACING_LIN    (0) - Linear
        /// RSSMA_FREQ_SWEEP_SPACING_LOG    (1) - Logarithmic
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetFrequencySweepSpacing(out int Spacing)
        {
            int pInvokeResult = PInvoke.GetFrequencySweepSpacing(this._handle, out Spacing);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the step width for linear sweeps.
        /// 
        /// This function is linked to the command :SWEep[:FREQuency]:POINts as follows:
        /// 
        /// POINts = (SPAN / STEP:LIN) + 1
        /// 
        /// If STEP:LIN changes, the value of POINTs is adjusted. The STARt and STOP value is retained.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]SWEep[:FREQuency]:STEP[:LINear]
        /// </summary>
        /// <param name="Step_Lin">
        /// Sets the step width for linear sweeps.
        /// 
        /// Valid Range: 0 to (STOP - STARt)
        ///              POINts = (SPAN / STEP:LIN) + 1
        /// 
        /// Default Value: 1.0e+6 Hz
        /// 
        /// Notes:
        /// 
        /// If STEP:LIN changes, the value of POINTs is adjusted. The STARt and STOP value is retained.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetFrequencySweepStepLin(double Step_Lin)
        {
            int pInvokeResult = PInvoke.SetFrequencySweepStepLin(this._handle, Step_Lin);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the step width for linear sweeps.
        /// 
        /// This function is linked to the command :SWEep[:FREQuency]:POINts as follows:
        /// 
        /// POINts = (SPAN / STEP:LIN) + 1
        /// 
        /// If STEP:LIN changes, the value of POINTs is adjusted. The STARt and STOP value is retained.
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]SWEep[:FREQuency]:STEP[:LINear]?
        /// </summary>
        /// <param name="Step_Lin">
        /// Returns the step width for linear sweeps.
        /// 
        /// Valid Range: 0 to (STOP - STARt)
        ///              POINts = (SPAN / STEP:LIN) + 1
        /// 
        /// Notes:
        /// 
        /// If STEP:LIN changes, the value of POINTs is adjusted. The STARt and STOP value is retained.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetFrequencySweepStepLin(out double Step_Lin)
        {
            int pInvokeResult = PInvoke.GetFrequencySweepStepLin(this._handle, out Step_Lin);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function specifies the step width factor for logarithmic sweeps. The next frequency value of a sweep is calculated (for STARt &lt; STOP) using the following formula:
        /// 
        /// New frequency = Old frequency + STEP:LOG x Old frequency
        /// 
        /// STEP:LOG therefore gives the fraction of the old frequency. The frequency is increased by this fraction for the next sweep step. Usually STEP:LOG is given in percent, whereby the suffix PCT must always be used.
        /// 
        /// This function is linked to the command :SWEep[:FREQuency]:POINts for STARt &lt; STOP as follows:
        /// 
        /// POINts = ((log STOP - log STARt) / log STEP:LOG) + 1
        /// 
        /// If STEP:LOG changes, the value of POINTs is adjusted. The STARt and STOP value is retained.
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]SWEep[:FREQuency]:STEP:LOGarithmic
        /// </summary>
        /// <param name="Step_Log">
        /// Specifies the step width factor for logarithmic sweeps.
        /// 
        /// Valid Range: 0.01 to 100.0 PCT
        /// 
        /// Default Value: 1.0 PCT
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetFrequencySweepStepLog(double Step_Log)
        {
            int pInvokeResult = PInvoke.SetFrequencySweepStepLog(this._handle, Step_Log);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the step width factor for logarithmic sweeps. The next frequency value of a sweep is calculated (for STARt &lt; STOP) using the following formula:
        /// 
        /// New frequency = Old frequency + STEP:LOG x Old frequency
        /// 
        /// STEP:LOG therefore gives the fraction of the old frequency. The frequency is increased by this fraction for the next sweep step. Usually STEP:LOG is given in percent, whereby the suffix PCT must always be used.
        /// 
        /// This function is linked to the command :SWEep[:FREQuency]:POINts for STARt &lt; STOP as follows:
        /// 
        /// POINts = ((log STOP - log STARt) / log STEP:LOG) + 1
        /// 
        /// If STEP:LOG changes, the value of POINTs is adjusted. The STARt and STOP value is retained.
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]SWEep[:FREQuency]:STEP:LOGarithmic?
        /// 
        /// </summary>
        /// <param name="Step_Log">
        /// Returns the step width factor for logarithmic sweeps.
        /// 
        /// Valid Range: 0.01 to 100.0 PCT
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetFrequencySweepStepLog(out double Step_Log)
        {
            int pInvokeResult = PInvoke.GetFrequencySweepStepLog(this._handle, out Step_Log);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the time taken for each frequency step of the sweep.
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]SWEep[:FREQuency]:DWELl
        /// 
        /// </summary>
        /// <param name="Dwell_Time">
        /// This function sets the time taken for each frequency step of the sweep.
        /// 
        /// Valid Range: 3.0e-3 to 10.0 s
        /// 
        /// Default Value: 10.0e-3 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetFrequencySweepDwellTime(double Dwell_Time)
        {
            int pInvokeResult = PInvoke.SetFrequencySweepDwellTime(this._handle, Dwell_Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the time taken for each frequency step of the sweep.
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]SWEep[:FREQuency]:DWELl?
        /// 
        /// </summary>
        /// <param name="Dwell_Time">
        /// This function returns the time taken for each frequency step of the sweep.
        /// 
        /// Valid Range: 3.0e-3 to 10.0 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetFrequencySweepDwellTime(out double Dwell_Time)
        {
            int pInvokeResult = PInvoke.GetFrequencySweepDwellTime(this._handle, out Dwell_Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// In Sweep mode (:SOUR:FREQ:MODE SWE) this function sets the frequency for the next sweep step in the Step sweep mode (:SOUR:SWE:MODE MAN). Here only frequency values between the settings [SOUR]:FREQ:STAR and ...:STOP are permitted. Each sweep step is triggered by a separate :SOUR:FREQ:MAN command.
        /// 
        /// As with the Frequency value entered in the header, the OFFSet value is also taken into consideration with this function. The specified value range is therefore only effective if OFFSet is set to 0. The value range for other OFFset values can be calculated using the following formula (see also section RF Frequency and Phase - Frequency - Phase).
        /// 
        /// STARt + OFFSet ... STOP + OFFSet
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]FREQuency:MANual
        /// 
        /// </summary>
        /// <param name="Manual_Step">
        /// This function sets the frequency for the next sweep step in the Step sweep mode.
        /// 
        /// Valid Range: STARt + OFFSet to STOP + OFFSet
        /// 
        /// Default Value: 100.0e6 Hz
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetFrequencySweepManualStep(double Manual_Step)
        {
            int pInvokeResult = PInvoke.SetFrequencySweepManualStep(this._handle, Manual_Step);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// In Sweep mode (:SOUR:FREQ:MODE SWE) this function returns the frequency for the next sweep step in the Step sweep mode (:SOUR:SWE:MODE MAN). Here only frequency values between the settings [SOUR]:FREQ:STAR and ...:STOP are permitted. Each sweep step is triggered by a separate :SOUR:FREQ:MAN command.
        /// 
        /// As with the Frequency value entered in the header, the OFFSet value is also taken into consideration with this function. The specified value range is therefore only effective if OFFSet is set to 0. The value range for other OFFset values can be calculated using the following formula (see also section RF Frequency and Phase - Frequency - Phase).
        /// 
        /// STARt + OFFSet ... STOP + OFFSet
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]FREQuency:MANual
        /// 
        /// </summary>
        /// <param name="Manual_Step">
        /// This function returns the frequency for the next sweep step in the Step sweep mode.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetFrequencySweepManualStep(out double Manual_Step)
        {
            int pInvokeResult = PInvoke.GetFrequencySweepManualStep(this._handle, out Manual_Step);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the number of steps in an RF sweep. This function is linked to the command :SWEep[:FREQuency]:STEP as follows:
        /// 
        /// The following applies for linear sweeps: 
        ///       POINts = (SPAN / STEP:LIN) + 1
        /// 
        /// The following applies for logarithmic sweeps and STARt &lt; STOP:
        ///       POINts = ((log STOP - log STARt) / log STEP:LOG) + 1
        /// 
        /// If POINTs changes, the value of STEP is adjusted. The STARt and STOP value is retained.
        /// 
        /// Two separate POINts values are used for linear or logarithmic sweep spacing (:SWEep[:FREQuency]:SPACing LIN | LOG). This function is always effective for the currently set sweep spacing.
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]SWEep[:FREQuency]:POINts
        /// 
        /// </summary>
        /// <param name="Frequency_Sweep_Points">
        /// Sets the number of steps in an RF sweep.
        /// 
        /// Valid Range:
        /// The following applies for linear sweeps: 
        ///       POINts = (SPAN / STEP:LIN) + 1
        /// 
        /// The following applies for logarithmic sweeps and STARt &lt; STOP:
        ///       POINts = ((log STOP - log STARt) / log STEP:LOG) + 1
        /// 
        /// Default Value: 401
        /// 
        /// Notes:
        /// 
        /// If POINTs changes, the value of STEP is adjusted. The STARt and STOP value is retained.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetFrequencySweepPoints(int Frequency_Sweep_Points)
        {
            int pInvokeResult = PInvoke.SetFrequencySweepPoints(this._handle, Frequency_Sweep_Points);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the number of steps in an RF sweep. This function is linked to the command :SWEep[:FREQuency]:STEP as follows:
        /// 
        /// The following applies for linear sweeps: 
        ///       POINts = (SPAN / STEP:LIN) + 1
        /// 
        /// The following applies for logarithmic sweeps and STARt &lt; STOP:
        ///       POINts = ((log STOP - log STARt) / log STEP:LOG) + 1
        /// 
        /// If POINTs changes, the value of STEP is adjusted. The STARt and STOP value is retained.
        /// 
        /// Two separate POINts values are used for linear or logarithmic sweep spacing (:SWEep[:FREQuency]:SPACing LIN | LOG). This function is always effective for the currently set sweep spacing.
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]SWEep[:FREQuency]:POINts?
        /// 
        /// </summary>
        /// <param name="Frequency_Sweep_Points">
        /// Returns the number of steps in an RF sweep.
        /// 
        /// Valid Range:
        /// The following applies for linear sweeps: 
        ///       POINts = (SPAN / STEP:LIN) + 1
        /// 
        /// The following applies for logarithmic sweeps and STARt &lt; STOP:
        ///       POINts = ((log STOP - log STARt) / log STEP:LOG) + 1
        /// 
        /// Notes:
        /// 
        /// If POINTs changes, the value of STEP is adjusted. The STARt and STOP value is retained.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetFrequencySweepPoints(out int Frequency_Sweep_Points)
        {
            int pInvokeResult = PInvoke.GetFrequencySweepPoints(this._handle, out Frequency_Sweep_Points);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the cycle mode for a sweep sequence (shape).
        /// 
        /// Remote-control command(s):
        /// [SOURce:]SWEep[:FREQuency]:SHAPe   SAWTooth | TRIangle
        /// </summary>
        /// <param name="Shape">
        /// Selects the cycle mode for a sweep sequence (shape).
        /// 
        /// Valid Values:
        /// RSSMA_FREQ_SWEEP_SHAPE_SAWT    (0) - SAWTooth
        /// RSSMA_FREQ_SWEEP_SHAPE_TRI     (1) - TRIangle
        /// 
        /// Default Value: RSSMA_FREQ_SWEEP_SHAPE_TRI     (1)
        /// 
        /// Notes:
        /// (1) SAWTooth - One sweep runs from start to stop frequency. Each subsequent sweep starts at the start frequency, i.e. the shape of  the sweep sequence resembles a sawtooth.
        /// 
        /// (2) TRIangle - One sweep runs from start to stop frequency and back,i.e. the shape of the sweep resembles a triangle. Each subsequent sweep starts at the start frequency.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssmb_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetFrequencySweepShape(int Shape)
        {
            int pInvokeResult = PInvoke.SetFrequencySweepShape(this._handle, Shape);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the cycle mode for a sweep sequence (shape).
        /// 
        /// Remote-control command(s):
        /// [SOURce:]SWEep[:FREQuency]:SHAPe?
        /// </summary>
        /// <param name="Shape">
        /// Returns the cycle mode for a sweep sequence (shape).
        /// 
        /// Valid Values:
        /// RSSMA_FREQ_SWEEP_SHAPE_SAWT    (0) - SAWTooth
        /// RSSMA_FREQ_SWEEP_SHAPE_TRI     (1) - TRIangle
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssmb_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetFrequencySweepShape(out int Shape)
        {
            int pInvokeResult = PInvoke.GetFrequencySweepShape(this._handle, out Shape);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the RF sweep parameters and changes the mode of RF level to Sweep mode.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]POWer:STARt
        /// [SOURce:]POWer:STOP
        /// [SOURce:]POWer:STEP[:INCRement]
        /// [SOURce:]SWEep:POWer:MODE AUTO | MANual | STEP
        /// [SOURce:]POWer:MODE CW|FIXed | SWEep | LIST
        /// TRIGger&lt;1|2&gt;:PSWeep:SOURce AUTO | IMMediate | SINGle | EXTernal| BUS | EAUTo
        /// [SOURce:]SWEep:POWer:DWELl
        /// </summary>
        /// <param name="Level_Sweep_Mode">
        /// Sets the sweep mode.
        /// 
        /// Valid Values:
        /// RSSMA_SWEEP_MODE_AUTO      (0) - Auto
        /// RSSMA_SWEEP_MODE_SINGLE    (1) - Single
        /// RSSMA_SWEEP_MODE_STEP      (2) - Step
        /// RSSMA_SWEEP_MODE_EXT_SINGLE(3) - External Single
        /// RSSMA_SWEEP_MODE_EXT_STEP  (4) - External Step
        /// RSSMA_SWEEP_MODE_EXT_START (5) - Extern Start/Stop
        /// 
        /// Default Value: RSSMA_SWEEP_MODE_AUTO (0)
        /// 
        /// Notes:
        /// 
        /// (1) Auto - Cycle from the beginning to the end of the list with automatic restart at the beginning. If a different mode was activated prior to the Auto mode, the cycle continues from the current index. 
        /// 
        /// (2) Single - Single cycle from the beginning to the end of the list. If Single is selected, the cycle is not started immediately.
        /// 
        /// (3) Step - Manual, step-by-step processing of the list.
        /// 
        /// (4) External Single - Single cycle from the beginning to the end of the list as with Single, but started by an external trigger.
        /// 
        /// (5) External Step - Step-by-step cycle using the external trigger signal. Each trigger event starts a single step.
        /// 
        /// (6) Extern Start/Stop:
        /// The sweep is triggered externally via the INST TRIG connector. As soon as one sweep is finished, the next sweep is started. A second trigger event stops the sweep at the current frequency, a third trigger event starts the trigger at the start frequency, and so on
        /// </param>
        /// <param name="Start_Level">
        /// Sets the RF start level in Sweep mode.
        /// 
        /// Valid Range: Minimum level + OFFSet to Maximum level + OFFSet
        /// 
        /// Default Value: -30.0 dBm
        /// </param>
        /// <param name="Stop_Level">
        /// Sets the stop level in Sweep mode.
        /// 
        /// Valid Range: Minimum level + OFFSet to Maximum level + OFFSet
        /// 
        /// Default Value: -10.0 dBm
        /// 
        /// </param>
        /// <param name="Step_Lin">
        /// Sets the step width for the level setting if UP and DOWN are used as the level values and variation mode is selected.
        /// 
        /// Valid Range: 0.0 dB to 100.0 dB
        /// 
        /// Default Value: 1.0 dB
        /// 
        /// </param>
        /// <param name="Dwell_Time">
        /// Sets the time taken for each level step of the sweep. 
        /// 
        /// Valid Range: 2.0e-3 to 10.0 s
        /// 
        /// Default Value: 10.0e-3 s
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int confRFLevelSweep(int Level_Sweep_Mode, double Start_Level, double Stop_Level, double Step_Lin, double Dwell_Time)
        {
            int pInvokeResult = PInvoke.confRFLevelSweep(this._handle, Level_Sweep_Mode, Start_Level, Stop_Level, Step_Lin, Dwell_Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function triggers a sweep.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]SWEep:POWer:EXECute
        /// 
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int LevelSweepExecute()
        {
            int pInvokeResult = PInvoke.LevelSweepExecute(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the sweep mode.
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]SWEep:POWer:MODE AUTO | MANual | STEP
        /// [SOURce:]POWer:MODE CW|FIXed | SWEep | LIST
        /// TRIGger:PSWeep:SOURce AUTO | IMMediate | SINGle | EXTernal| BUS | EAUTo
        /// </summary>
        /// <param name="Mode">
        /// Sets the sweep mode.
        /// 
        /// Valid Values:
        /// RSSMA_SWEEP_MODE_AUTO      (0) - Auto
        /// RSSMA_SWEEP_MODE_SINGLE    (1) - Single
        /// RSSMA_SWEEP_MODE_STEP      (2) - Step
        /// RSSMA_SWEEP_MODE_EXT_SINGLE(3) - External Single
        /// RSSMA_SWEEP_MODE_EXT_STEP  (4) - External Step
        /// RSSMA_SWEEP_MODE_EXT_START (5) - Extern Start/Stop
        /// 
        /// Default Value: RSSMA_SWEEP_MODE_AUTO (0)
        /// 
        /// Notes:
        /// 
        /// (1) Auto - Cycle from the beginning to the end of the list with automatic restart at the beginning. If a different mode was activated prior to the Auto mode, the cycle continues from the current index. 
        /// 
        /// (2) Single - Single cycle from the beginning to the end of the list. If Single is selected, the cycle is not started immediately.
        /// 
        /// (3) Step - Manual, step-by-step processing of the list.
        /// 
        /// (4) External Single - Single cycle from the beginning to the end of the list as with Single, but started by an external trigger.
        /// 
        /// (5) External Step - Step-by-step cycle using the external trigger signal. Each trigger event starts a single step.
        /// 
        /// (6) Extern Start/Stop:
        /// The sweep is triggered externally via the INST TRIG connector. As soon as one sweep is finished, the next sweep is started. A second trigger event stops the sweep at the current frequency, a third trigger event starts the trigger at the start frequency, and so on
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetLevelSweepMode(int Mode)
        {
            int pInvokeResult = PInvoke.SetLevelSweepMode(this._handle, Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the RF start level in Sweep mode. 
        /// 
        /// As with the Level value entered in the RF Level menu, the OFFSet value is also taken into consideration with this function.
        /// 
        /// The specified value range is therefore only effective if :SOURce:POWer:OFFSet is set to 0. The value range for other OFFset values can be calculated using the following formula:
        /// 
        /// Minimum level + OFFSet ... Maximum level + OFFSet
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]POWer:STARt
        /// 
        /// </summary>
        /// <param name="Start_Level">
        /// Sets the RF start level in Sweep mode.
        /// 
        /// Valid Range: Minimum level + OFFSet to Maximum level + OFFSet
        /// 
        /// Default Value: -30.0 dBm
        /// 
        /// Note:
        /// 
        /// The value range for the level setting varies according to the instrument model. The values are given in the data sheet.
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetLevelSweepStartLevel(double Start_Level)
        {
            int pInvokeResult = PInvoke.SetLevelSweepStartLevel(this._handle, Start_Level);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the RF start level in Sweep mode. 
        /// 
        /// As with the Level value entered in the RF Level menu, the OFFSet value is also taken into consideration with this function.
        /// 
        /// The specified value range is therefore only effective if :SOURce:POWer:OFFSet is set to 0. The value range for other OFFset values can be calculated using the following formula:
        /// 
        /// Minimum level + OFFSet ... Maximum level + OFFSet
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]POWer:STARt?
        /// 
        /// </summary>
        /// <param name="Start_Level">
        /// Returns the RF start level in Sweep mode.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetLevelSweepStartLevel(out double Start_Level)
        {
            int pInvokeResult = PInvoke.GetLevelSweepStartLevel(this._handle, out Start_Level);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the stop level in Sweep mode. 
        /// 
        /// As with the Level value entered in the RF Level menu, the OFFSet value is also taken into consideration with this function.
        /// 
        /// The specified value range is therefore only effective if :SOURce:POWer:OFFSet is set to 0. The value range for other OFFset values can be calculated using the following formula:
        /// 
        /// Minimum level + OFFSet ... Maximum level + OFFSet
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]POWer:STOP
        /// 
        /// </summary>
        /// <param name="Stop_Level">
        /// Sets the stop level in Sweep mode.
        /// 
        /// Valid Range: Minimum level + OFFSet to Maximum level + OFFSet
        /// 
        /// Default Value: -10.0 dBm
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetLevelSweepStopLevel(double Stop_Level)
        {
            int pInvokeResult = PInvoke.SetLevelSweepStopLevel(this._handle, Stop_Level);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the stop level in Sweep mode. 
        /// 
        /// As with the Level value entered in the RF Level menu, the OFFSet value is also taken into consideration with this function.
        /// 
        /// The specified value range is therefore only effective if :SOURce:POWer:OFFSet is set to 0. The value range for other OFFset values can be calculated using the following formula:
        /// 
        /// Minimum level + OFFSet ... Maximum level + OFFSet
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]POWer:STOP?
        /// 
        /// </summary>
        /// <param name="Stop_Level">
        /// Returns the stop level in Sweep mode.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetLevelSweepStopLevel(out double Stop_Level)
        {
            int pInvokeResult = PInvoke.GetLevelSweepStopLevel(this._handle, out Stop_Level);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the step width factor for logarithmic sweeps. The next level value of a sweep is calculated (for STARt &lt; STOP) using the following formula:
        /// 
        /// New level = Old level + STEP:LOG x Old level
        /// 
        /// STEP:LOG therefore gives the fraction of the old level. The level is increased by this fraction for the next sweep step. Usually STEP:LOG is given in decibels, whereby the suffix dB must always be used.
        /// 
        /// This function is linked to the command :SWEep:POWer:POINts for STARt &lt; STOP as follows:
        /// 
        /// POINts = ((STOP - STARt) / STEP:LOG) + 1
        /// 
        /// If STEP:LOG changes, the value of POINTs is adjusted. The STARt and STOP value is retained.
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]SWEep:POWer:STEP[:LOGarithmic]
        /// </summary>
        /// <param name="Step">
        /// Sets the step width factor for logarithmic sweeps.
        /// 
        /// Valid Range: 0.01 to 165.0 dB
        /// 
        /// Default Value: 1.0 dB
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetLevelSweepStep(double Step)
        {
            int pInvokeResult = PInvoke.SetLevelSweepStep(this._handle, Step);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the step width factor for logarithmic sweeps. The next level value of a sweep is calculated (for STARt &lt; STOP) using the following formula:
        /// 
        /// New level = Old level + STEP:LOG x Old level
        /// 
        /// STEP:LOG therefore gives the fraction of the old level. The level is increased by this fraction for the next sweep step. Usually STEP:LOG is given in decibels, whereby the suffix dB must always be used.
        /// 
        /// This function is linked to the command :SWEep:POWer:POINts for STARt &lt; STOP as follows:
        /// 
        /// POINts = ((STOP - STARt) / STEP:LOG) + 1
        /// 
        /// If STEP:LOG changes, the value of POINTs is adjusted. The STARt and STOP value is retained.
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]SWEep:POWer:STEP[:LOGarithmic]?
        /// 
        /// </summary>
        /// <param name="Step">
        /// Returns the step width factor for logarithmic sweeps.
        /// 
        /// Valid Range: 0.01 to 165.0 dB
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetLevelSweepStep(out double Step)
        {
            int pInvokeResult = PInvoke.GetLevelSweepStep(this._handle, out Step);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the time taken for each level step of the sweep. 
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]SWEep:POWer:DWELl
        /// </summary>
        /// <param name="Dwell_Time">
        /// Sets the time taken for each level step of the sweep. 
        /// 
        /// Valid Range: 2.0e-3 to 10.0 s
        /// 
        /// Default Value: 10.0e-3 s
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetLevelSweepDwell(double Dwell_Time)
        {
            int pInvokeResult = PInvoke.SetLevelSweepDwell(this._handle, Dwell_Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the time taken for each level step of the sweep. 
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]SWEep:POWer:DWELl?
        /// </summary>
        /// <param name="Dwell_Time">
        /// Returns the time taken for each level step of the sweep. 
        /// 
        /// Valid Range: 2.0e-3 to 10.0 s
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetLevelSweepDwell(out double Dwell_Time)
        {
            int pInvokeResult = PInvoke.GetLevelSweepDwell(this._handle, out Dwell_Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// In Sweep mode (:SOUR:POW:MODE SWE) this function sets the level for the next sweep step in the Step sweep mode (:SOUR:SWE:POW:MODE MAN). Here only level values between the settings [SOUR]:POW:STAR and ...:STOP are permitted. Each sweep step is triggered by a separate :SOUR:POW:MAN command.
        /// 
        /// As with the Level value entered in the RF Level menu, the OFFSet value is also taken into consideration with this function.
        /// 
        /// The specified value range is therefore only effective if :SOURce:POWer:OFFSet is set to 0. The value range for other OFFset values can be calculated using the following formula (see also Chapter 4, section Level Offset - RF Signal):
        /// 
        /// Minimum level + OFFSet ... Maximum level + OFFSet
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]POWer:MANual
        /// 
        /// </summary>
        /// <param name="Manual_Step">
        /// Sets the level for the next sweep step in the Step sweep mode.
        /// 
        /// Valid Range: Minimum level + OFFSet to Maximum level + OFFSet
        /// 
        /// Default Value: -30.0 dBm
        /// 
        /// Note:
        /// 
        /// The value range for the level setting varies according to the instrument model. The values are given in the data sheet.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetLevelSweepManualStep(double Manual_Step)
        {
            int pInvokeResult = PInvoke.SetLevelSweepManualStep(this._handle, Manual_Step);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the level of the next sweep step in the Step sweep mode.
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]POWer:MANual?
        /// 
        /// </summary>
        /// <param name="Manual_Step">
        /// Returns the level of the next sweep step in the Step sweep mode.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetLevelSweepManualStep(out double Manual_Step)
        {
            int pInvokeResult = PInvoke.GetLevelSweepManualStep(this._handle, out Manual_Step);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the number of steps in a level sweep. This function is linked to the command :SWEep:POWer:STEP as follows:
        /// 
        /// POINts = ((STOP - STARt) / STEP:LOG) + 1
        /// 
        /// If POINTs changes, the value of STEP is adjusted. The STARt and STOP value is retained.
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]SWEep:POWer:POINts
        /// 
        /// </summary>
        /// <param name="Level_Sweep_Points">
        /// Sets the number of steps in a level sweep.
        /// 
        /// Valid Range: POINts = ((STOP - STARt) / STEP:LOG) + 1
        /// 
        /// Default Value: 20 dB
        /// 
        /// Notes:
        /// 
        /// If POINTs changes, the value of STEP is adjusted. The STARt and STOP value is retained.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetLevelSweepPoints(int Level_Sweep_Points)
        {
            int pInvokeResult = PInvoke.SetLevelSweepPoints(this._handle, Level_Sweep_Points);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the number of steps in a level sweep. This function is linked to the command :SWEep:POWer:STEP as follows:
        /// 
        /// POINts = ((STOP - STARt) / STEP:LOG) + 1
        /// 
        /// If POINTs changes, the value of STEP is adjusted. The STARt and STOP value is retained.
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]SWEep:POWer:POINts?
        /// </summary>
        /// <param name="Level_Sweep_Points">
        /// Returns the number of steps in a level sweep.
        /// 
        /// Valid Range: POINts = ((STOP - STARt) / STEP:LOG) + 1
        /// 
        /// Notes:
        /// 
        /// If POINTs changes, the value of STEP is adjusted. The STARt and STOP value is retained.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetLevelSweepPoints(out int Level_Sweep_Points)
        {
            int pInvokeResult = PInvoke.GetLevelSweepPoints(this._handle, out Level_Sweep_Points);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the ranges of level settings for the list mode. The level settings are either performed in the low level or in the high level ranges.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]SWEep:POWer:AMODe NORMal | HPOWer
        /// </summary>
        /// <param name="Attenuator_Mode">
        /// Selects the ranges of level settings for the list mode. The level settings are either performed in the low level or in the high level ranges.
        /// 
        /// Valid Values: 
        /// RSSMA_LIST_ATTEN_MODE_NORM (0) - Normal
        /// RSSMA_LIST_ATTEN_MODE_HPOW (1) - High Power
        /// 
        /// Default Value: RSSMA_LIST_ATTEN_MODE_NORM (0)
        /// 
        /// Note(s):
        /// 
        /// (1) NORMal: The level settings are made in the range of the electronically switching attenuator. The high level ranges are not available. 
        /// 
        /// (2) HPOWer: The level settings are made in the high level range.
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetLevelSweepAttenuatorMode(int Attenuator_Mode)
        {
            int pInvokeResult = PInvoke.SetLevelSweepAttenuatorMode(this._handle, Attenuator_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the ranges of level settings for the list mode. The level settings are either performed in the low level or in the high level ranges.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]SWEep:POWer:AMODe?
        /// </summary>
        /// <param name="Attenuator_Mode">
        /// Returns the ranges of level settings for the list mode. The level settings are either performed in the low level or in the high level ranges.
        /// 
        /// Valid Values: 
        /// RSSMA_LIST_ATTEN_MODE_NORM (0) - Normal
        /// RSSMA_LIST_ATTEN_MODE_HPOW (1) - High Power
        /// 
        /// Note(s):
        /// 
        /// (1) NORMal: The level settings are made in the range of the electronically switching attenuator. The high level ranges are not available. 
        /// 
        /// (2) HPOWer: The level settings are made in the high level range.
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetLevelSweepAttenuatorMode(out int Attenuator_Mode)
        {
            int pInvokeResult = PInvoke.GetLevelSweepAttenuatorMode(this._handle, out Attenuator_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the cycle mode for a sweep sequence (shape).
        /// 
        /// Remote-control command(s):
        /// [SOURce:]SWEep:POWer:SHAPe SAWTooth | TRIangle
        /// </summary>
        /// <param name="Shape">
        /// Sets the cycle mode for a sweep sequence (shape).
        /// 
        /// Valid Values:
        /// RSSMA_POW_SWEEP_SHAPE_SAWT (0) - Sawtooth
        /// RSSMA_POW_SWEEP_SHAPE_TRI  (1) - Triangle
        /// 
        /// Default Value: RSSMA_POW_SWEEP_SHAPE_SAWT (0)
        /// 
        /// Notes:
        /// (1) Sawtooth - One sweep runs from start to stop frequency. Each subsequent sweep starts at the start frequency, i.e. the shape of  the sweep sequence resembles a sawtooth.
        /// 
        /// (2) Triangle - One sweep runs from start to stop level and back, i.e. the shape of the sweep resembles a triangle. Each subsequent sweep starts at the start level again.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetLevelSweepShape(int Shape)
        {
            int pInvokeResult = PInvoke.SetLevelSweepShape(this._handle, Shape);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the cycle mode for a sweep sequence (shape).
        /// 
        /// Remote-control command(s):
        /// [SOURce:]SWEep:POWer:SHAPe SAWTooth?
        /// </summary>
        /// <param name="Shape">
        /// Returns the cycle mode for a sweep sequence (shape).
        /// 
        /// Valid Values:
        /// RSSMA_POW_SWEEP_SHAPE_SAWT (0) - Sawtooth
        /// RSSMA_POW_SWEEP_SHAPE_TRI  (1) - Triangle
        /// 
        /// Notes:
        /// (1) Sawtooth - One sweep runs from start to stop frequency. Each subsequent sweep starts at the start frequency, i.e. the shape of  the sweep sequence resembles a sawtooth.
        /// 
        /// (2) Triangle - One sweep runs from start to stop level and back, i.e. the shape of the sweep resembles a triangle. Each subsequent sweep starts at the start level again.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetLevelSweepShape(out int Shape)
        {
            int pInvokeResult = PInvoke.GetLevelSweepShape(this._handle, out Shape);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the sweep spacing. The sweep spacing for level sweeps is always linear.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]SWEep:POWer:SPACing:MODE?
        /// </summary>
        /// <param name="Spacing">
        /// Selects linear or logarithmic sweep spacing.
        /// 
        /// Valid Values:
        /// RSSMA_POW_SWEEP_SPACING_LIN (0) - Linear
        /// RSSMA_POW_SWEEP_SPACING_LOG (1) - Logarithmic
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetLevelSweepSpacing(out int Spacing)
        {
            int pInvokeResult = PInvoke.GetLevelSweepSpacing(this._handle, out Spacing);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function resets all active sweeps to the starting point.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]SWEep:RESet[:ALL]
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ResetLevelSweep()
        {
            int pInvokeResult = PInvoke.ResetLevelSweep(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets all parameters of selected list. If list with specified name does not exists it will be created.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LIST:SELect
        /// [SOURce:]LIST:MODE AUTO | STEP
        /// [SOURce:]LIST:TRIGger:SOURce AUTO | SINGle | EXTernal | HOP
        /// [SOURce:]LIST:FREQuency
        /// [SOURce:]LIST:POWer
        /// [SOURce:]LIST:DWELl
        /// </summary>
        /// <param name="List_Name">
        /// List name parameter.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: none
        /// 
        /// </param>
        /// <param name="List_Mode">
        /// Sets the sweep mode.
        /// 
        /// Valid Values:
        /// RSSMA_SWEEP_MODE_AUTO      (0) - Auto
        /// RSSMA_SWEEP_MODE_SINGLE    (1) - Single
        /// RSSMA_SWEEP_MODE_STEP      (2) - Step
        /// RSSMA_SWEEP_MODE_EXT_SINGLE(3) - External Single
        /// RSSMA_SWEEP_MODE_EXT_STEP  (4) - External Step
        /// RSSMA_SWEEP_MODE_EXT_HOP   (5) - External Hop
        /// RSSMA_SWEEP_MODE_EXT_DHOP  (6) - External Direct Hop
        /// 
        /// Default Value: RSSMA_SWEEP_MODE_AUTO (0)
        /// 
        /// Notes:
        /// 
        /// (1) Auto:
        /// Cycle from the beginning to the end of the list with automatic restart at the beginning. If a different mode was activated prior to the Auto mode, the cycle continues from the current index. 
        /// 
        /// (2) Single:
        /// Single cycle from the beginning to the end of the list. If Single is selected, the cycle is not started immediately.
        /// 
        /// (3) Step:
        /// Manual, step-by-step processing of the list.
        /// 
        /// (4) External Single:
        /// Single cycle from the beginning to the end of the list as with Single, but started by an external trigger.
        /// 
        /// (5) External Step:
        /// Step-by-step cycle using the external trigger signal. Each trigger event starts a single step.
        /// 
        /// (6) External Hop:
        /// Index-by-index cycle. The processed list index is determined by the external control signals provided via the serial FHOP bus on the AUX I/O interface at the rear of the instrument. Processing of the frequency and level settings associated with selected index is triggered externally via the INST TRIG connector.
        /// 
        /// (7) External Direct Hop:
        /// Index-by-index cycle. The processed list index is determined by the external control signals provided via the serial FHOP bus on the AUX I/O interface at the rear of the instrument. Processing of the frequency and level settings associated with selected index is automatically started at the end of data transmission.
        /// </param>
        /// <param name="Array_Size">
        /// Defines the number of elements in the 'Frequency Values' array.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: none
        /// 
        /// </param>
        /// <param name="Frequency_Values">
        /// Frequency list values. Number of values is defined by 'Array Size' parameter.
        /// 
        /// Valid Values:
        /// 300 kHz...RFmax {,300 kHz...RFmax}, ..., (RFmax depending on model)
        /// 
        /// Default Value: none
        /// 
        /// </param>
        /// <param name="Power_Values">
        /// Power list values. Number of values is defined by 'Array Size' parameter.
        /// 
        /// Valid Values:
        /// -145 ...30 dBm {, -145 ...30 dBm}
        /// 
        /// Default Value: none
        /// 
        /// </param>
        /// <param name="Dwell_Time">
        /// Sets the time for which the instrument retains a setting.
        /// 
        /// Valid Range: 1.0e-3 s to 1.0 s
        /// 
        /// Default Value: 10.0e-3 s
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int confList(string List_Name, int List_Mode, int Array_Size, double[] Frequency_Values, double[] Power_Values, double Dwell_Time)
        {
            int pInvokeResult = PInvoke.confList(this._handle, List_Name, List_Mode, Array_Size, Frequency_Values, Power_Values, Dwell_Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function requests a list of available lists. The individual lists are separated by commas. 
        /// 
        /// The lists are stored with the fixed file extensions *.lsw in a directory of the user's choice. The directory applicable to the commands is defined with the command MMEMory:CDIR. A path can also be specified in command :SOUR:LIST:CAT?, in which case the files in the specified folder are read.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LIST:CATalog?
        /// 
        /// </summary>
        /// <param name="Directory_Path">
        /// Directory path parameter.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: VI_NULL
        /// 
        /// Note:
        /// 
        /// If no directory is specified (VI_NULL), the default directory is used.
        /// 
        /// </param>
        /// <param name="Array_Size">
        /// Array size of the parameter labeled 'Catalog List'.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 256
        /// 
        /// </param>
        /// <param name="Catalog_List">
        /// Reads back catalog list. Size of the list is limited by the 'Array Size' parameter.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int LISTCatalog(string Directory_Path, int Array_Size, System.Text.StringBuilder Catalog_List)
        {
            int pInvokeResult = PInvoke.LISTCatalog(this._handle, Directory_Path, Array_Size, Catalog_List);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function deletes the specified list. 
        /// 
        /// The files are stored with the fixed file extensions *.lsw in a directory of the user's choice. The directory applicable to the command is defined with the command MMEMory:CDIR. To access the files in this directory, you only have to give the file name, without the path and the file extension. A path can also be specified in command :SOUR:LIST:CAT?, in which case the file in the specified folder is deleted.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LIST:DELete
        /// 
        /// </summary>
        /// <param name="List_Name">
        /// List name parameter.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int LISTDeleteList(string List_Name)
        {
            int pInvokeResult = PInvoke.LISTDeleteList(this._handle, List_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function deletes all lists in the set directory. The List mode must be deactivated beforehand to ensure that no lists are selected when this function is called (:SOUR:FREQ:MODE CW or SWE).
        /// 
        /// The files are stored with the fixed file extensions *.lsw in a directory of the user's choice. The directory applicable to the command is defined with the command MMEMory:CDIR. A path can also be specified in command :SOUR:LIST:CAT?, in which case all list mode files in the specified folder are deleted.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LIST:DELete:ALL
        /// 
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int LISTDeleteAll()
        {
            int pInvokeResult = PInvoke.LISTDeleteAll(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function resets the list to the starting point.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LIST:RESet
        /// 
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int LISTResetList()
        {
            int pInvokeResult = PInvoke.LISTResetList(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function immediately starts the processing of a list in list mode. It corresponds to the manual-control command Execute Single.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LIST:TRIGger:EXECute
        /// 
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int LISTTriggerExecute()
        {
            int pInvokeResult = PInvoke.LISTTriggerExecute(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the list mode.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LIST:MODE AUTO | STEP
        /// [SOURce:]FREQuency:MODE LIST
        /// [SOURce:]LIST:TRIGger:SOURce AUTO | SINGle | EXTernal | HOP
        /// </summary>
        /// <param name="List_Mode">
        /// Sets the sweep mode.
        /// 
        /// Valid Values:
        /// RSSMA_SWEEP_MODE_AUTO      (0) - Auto
        /// RSSMA_SWEEP_MODE_SINGLE    (1) - Single
        /// RSSMA_SWEEP_MODE_STEP      (2) - Step
        /// RSSMA_SWEEP_MODE_EXT_SINGLE(3) - External Single
        /// RSSMA_SWEEP_MODE_EXT_STEP  (4) - External Step
        /// RSSMA_SWEEP_MODE_EXT_HOP   (5) - External Hop
        /// RSSMA_SWEEP_MODE_EXT_DHOP  (6) - External Direct Hop
        /// 
        /// Default Value: RSSMA_SWEEP_MODE_AUTO (0)
        /// 
        /// Notes:
        /// 
        /// (1) Auto:
        /// Cycle from the beginning to the end of the list with automatic restart at the beginning. If a different mode was activated prior to the Auto mode, the cycle continues from the current index. 
        /// 
        /// (2) Single:
        /// Single cycle from the beginning to the end of the list. If Single is selected, the cycle is not started immediately.
        /// 
        /// (3) Step:
        /// Manual, step-by-step processing of the list.
        /// 
        /// (4) External Single:
        /// Single cycle from the beginning to the end of the list as with Single, but started by an external trigger.
        /// 
        /// (5) External Step:
        /// Step-by-step cycle using the external trigger signal. Each trigger event starts a single step.
        /// 
        /// (6) External Hop:
        /// Index-by-index cycle. The processed list index is determined by the external control signals provided via the serial FHOP bus on the AUX I/O interface at the rear of the instrument. Processing of the frequency and level settings associated with selected index is triggered externally via the INST TRIG connector.
        /// 
        /// (7) External Direct Hop:
        /// Index-by-index cycle. The processed list index is determined by the external control signals provided via the serial FHOP bus on the AUX I/O interface at the rear of the instrument. Processing of the frequency and level settings associated with selected index is automatically started at the end of data transmission.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetLISTMode(int List_Mode)
        {
            int pInvokeResult = PInvoke.SetLISTMode(this._handle, List_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the time for which the instrument retains a setting. 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LIST:DWELl
        /// 
        /// </summary>
        /// <param name="Dwell_Time">
        /// Sets the time for which the instrument retains a setting.
        /// 
        /// Valid Range: 1.0e-3 s to 1.0 s
        /// 
        /// Default Value: 10.0e-3 s
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetLISTDwellTime(double Dwell_Time)
        {
            int pInvokeResult = PInvoke.SetLISTDwellTime(this._handle, Dwell_Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the time for which the instrument retains a setting. 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LIST:DWELl?
        /// 
        /// </summary>
        /// <param name="Dwell_Time">
        /// Returns the time for which the instrument retains a setting.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetLISTDwellTime(out double Dwell_Time)
        {
            int pInvokeResult = PInvoke.GetLISTDwellTime(this._handle, out Dwell_Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the specified list. If a new list is to be created, the name can be entered here. The list is created if it does not yet exist. The list selected here is available for the further processing steps (editing) and is used in the instrument when the List mode is activated. 
        /// 
        /// The files are stored with the fixed file extensions *.lsw in a directory of the user's choice. The directory applicable to the command is defined with the command MMEMory:CDIR. A path can also be specified in command :SOUR:LIST:SEL in which case the list mode file in the specified folder is selected.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LIST:SELect
        /// 
        /// </summary>
        /// <param name="List_Name">
        /// List name parameter.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetLISTSelectList(string List_Name)
        {
            int pInvokeResult = PInvoke.SetLISTSelectList(this._handle, List_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries name of the selected list.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LIST:SELect?
        /// 
        /// </summary>
        /// <param name="List_Name">
        /// Returns name of the selected list.
        /// 
        /// Notes:
        /// 
        /// (1) The array must contain at least 128 elements ViChar[128].
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetLISTSelectList(System.Text.StringBuilder List_Name)
        {
            int pInvokeResult = PInvoke.GetLISTSelectList(this._handle, List_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function fills the FREQuency part of the selected list with frequency values.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LIST:FREQuency
        /// 
        /// </summary>
        /// <param name="Array_Size">
        /// Defines the number of elements in the 'Frequency Values' array.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: none
        /// 
        /// </param>
        /// <param name="Frequency_Values">
        /// Frequency list values. Number of values is defined by 'Array Size' parameter.
        /// 
        /// Valid Values: 300 kHz...RFmax {300 kHz...RFmax} ... up to Array Size (RFmax depending on model)
        /// 
        /// Default Value: none
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetLISTFrequencyValues(int Array_Size, double[] Frequency_Values)
        {
            int pInvokeResult = PInvoke.SetLISTFrequencyValues(this._handle, Array_Size, Frequency_Values);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the FREQuency part of the selected list.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LIST:FREQuency?
        /// 
        /// </summary>
        /// <param name="Array_Size">
        /// Defines the number of elements in the 'Frequency Values' array.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: none
        /// 
        /// </param>
        /// <param name="Frequency_Values">
        /// Returns frequency list values. Number of values is limited by 'Array Size' parameter.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetLISTFrequencyValues(int Array_Size, double[] Frequency_Values)
        {
            int pInvokeResult = PInvoke.GetLISTFrequencyValues(this._handle, Array_Size, Frequency_Values);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the length (in points) of the FREQuency component of the selected list.
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LIST:FREQuency:POINts?
        /// 
        /// </summary>
        /// <param name="Number_of_Frequency_Points">
        /// Returns the length (in points) of the FREQuency component of the selected list.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetLISTFrequencyPoints(out int Number_of_Frequency_Points)
        {
            int pInvokeResult = PInvoke.GetLISTFrequencyPoints(this._handle, out Number_of_Frequency_Points);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function fills the Level part of the selected list with data.
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LIST:POWer
        /// 
        /// </summary>
        /// <param name="Array_Size">
        /// Defines the number of elements in the 'Power Values' array.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: none
        /// 
        /// </param>
        /// <param name="Power_Values">
        /// Power list values. Number of values is defined by 'Array Size' parameter.
        /// 
        /// Valid Values: -145 ...30 dBm {-145 ...30 dBm} up to Array Size
        /// 
        /// Default Value: none
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetLISTPowerValues(int Array_Size, double[] Power_Values)
        {
            int pInvokeResult = PInvoke.SetLISTPowerValues(this._handle, Array_Size, Power_Values);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the Level part of the selected list.
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LIST:POWer?
        /// 
        /// </summary>
        /// <param name="Array_Size">
        /// Defines the number of elements in the 'Power Values' array.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: none
        /// 
        /// </param>
        /// <param name="Power_Values">
        /// Power list values. Number of values is defined by 'Array Size' parameter.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetLISTPowerValues(int Array_Size, double[] Power_Values)
        {
            int pInvokeResult = PInvoke.GetLISTPowerValues(this._handle, Array_Size, Power_Values);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the length (in points) of the LEVel part of the selected list.
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LIST:POWer:POINts?
        /// 
        /// </summary>
        /// <param name="Number_of_Power_Points">
        /// Returns the length (in points) of the LEVel part of the selected list.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetLISTPowerPoints(out int Number_of_Power_Points)
        {
            int pInvokeResult = PInvoke.GetLISTPowerPoints(this._handle, out Number_of_Power_Points);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the ranges of level settings for the list mode. The level settings are either performed in the low level or in the high level ranges.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LIST:POWer:AMODe NORMal | HPOWer
        /// </summary>
        /// <param name="Attenuator_Mode">
        /// Selects the ranges of level settings for the list mode. The level settings are either performed in the low level or in the high level ranges.
        /// 
        /// Valid Values: 
        /// RSSMA_LIST_ATTEN_MODE_NORM (0) - Normal
        /// RSSMA_LIST_ATTEN_MODE_HPOW (1) - High Power
        /// 
        /// Default Value: RSSMA_LIST_ATTEN_MODE_NORM (0)
        /// 
        /// Note(s):
        /// 
        /// (1) NORMal: The level settings are made in the range of the electronically switching attenuator. The high level ranges are not available. 
        /// 
        /// (2) HPOWer: The level settings are made in the high level range.
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetLISTAttenuatorMode(int Attenuator_Mode)
        {
            int pInvokeResult = PInvoke.SetLISTAttenuatorMode(this._handle, Attenuator_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the ranges of level settings for the list mode.
        /// Remote-control command(s):
        /// [SOURce:]LIST:POWer:AMODe?
        /// </summary>
        /// <param name="Attenuator_Mode">
        /// Returns the ranges of level settings for the list mode. 
        /// 
        /// Valid Values: 
        /// RSSMA_LIST_ATTEN_MODE_NORM (0) - Normal
        /// RSSMA_LIST_ATTEN_MODE_HPOW (1) - High Power
        /// 
        /// Note(s):
        /// 
        /// (1) NORMal: The level settings are made in the range of the electronically switching attenuator. The high level ranges are not available. 
        /// 
        /// (2) HPOWer: The level settings are made in the high level range.
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetLISTAttenuatorMode(out int Attenuator_Mode)
        {
            int pInvokeResult = PInvoke.GetLISTAttenuatorMode(this._handle, out Attenuator_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the index for step mode. After the trigger signal the frequency and level settings of the selected index are processed in List mode.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LIST:INDex
        /// 
        /// </summary>
        /// <param name="Step_Index">
        /// Sets the index for step mode. After the trigger signal the frequency and level settings of the selected index are processed in List mode.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 0
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetLISTStepIndex(int Step_Index)
        {
            int pInvokeResult = PInvoke.SetLISTStepIndex(this._handle, Step_Index);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the index for step mode. 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LIST:INDex?
        /// </summary>
        /// <param name="Step_Index">
        /// Returns the index for step mode. 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetLISTStepIndex(out int Step_Index)
        {
            int pInvokeResult = PInvoke.GetLISTStepIndex(this._handle, out Step_Index);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the start index of the index range which defines a subgroup of frequency/level value pairs in the current list. Only the values in the set index range (:LIST:INDex:STARt ... :LIST:INDex:STOP) are processed in List mode.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LIST:INDex:STARt
        /// 
        /// </summary>
        /// <param name="Start_Index">
        /// Sets the start index of the index range which defines a subgroup of frequency/level value pairs in the current list. 
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 0
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetLISTStartIndex(int Start_Index)
        {
            int pInvokeResult = PInvoke.SetLISTStartIndex(this._handle, Start_Index);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the start index of the index range which defines a subgroup of frequency/level value pairs in the current list.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LIST:INDex:STARt?
        /// 
        /// </summary>
        /// <param name="Start_Index">
        /// Returns the start index of the index range which defines a subgroup of frequency/level value pairs in the current list. 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetLISTStartIndex(out int Start_Index)
        {
            int pInvokeResult = PInvoke.GetLISTStartIndex(this._handle, out Start_Index);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the stop index of the index range which defines a subgroup of frequency/level value pairs in the current list. Only the values in the set index range (:LIST:INDex:STARt ... :LIST:INDex:STOP) are processed in List mode.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LIST:INDex:STOP
        /// </summary>
        /// <param name="Stop_Index">
        /// Sets the stop index of the index range which defines a subgroup of frequency/level value pairs in the current list. 
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 0
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetLISTStopIndex(int Stop_Index)
        {
            int pInvokeResult = PInvoke.SetLISTStopIndex(this._handle, Stop_Index);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the stop index of the index range which defines a subgroup of frequency/level value pairs in the current list.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LIST:INDex:STOP?
        /// </summary>
        /// <param name="Stop_Index">
        /// Returns the stop index of the index range which defines a subgroup of frequency/level value pairs in the current list. 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetLISTStopIndex(out int Stop_Index)
        {
            int pInvokeResult = PInvoke.GetLISTStopIndex(this._handle, out Stop_Index);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function learns the selected list, i.e. it determines the hardware setting for the entire list. The data determined in this way is stored together with the list. When the list is activated for the first time, these settings are calculated automatically.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LIST:LEARn
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int LearnLISTModeData()
        {
            int pInvokeResult = PInvoke.LearnLISTModeData(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries on the free storage space for list mode lists.
        /// 
        /// 
        /// Remote-control command(s):
        /// [:SOURce&lt;hw&gt;]:LIST:FREE?
        /// 
        /// </summary>
        /// <param name="Free_Space">
        /// Returns queries on the free storage space for list mode lists.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetLISTFree(out int Free_Space)
        {
            int pInvokeResult = PInvoke.GetLISTFree(this._handle, out Free_Space);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the dexchange list mode.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LIST:DEXChange:MODE IMPort | EXPort
        /// </summary>
        /// <param name="List_Mode">
        /// This control selects if list mode lists should be imported or exported. The settings offered below depend on the selected mode.
        /// 
        /// Valid Values:
        /// RSSMA_DEXC_MODE_IMPORT (0) - Import
        /// RSSMA_DEXC_MODE_EXPORT (1) - Export
        /// 
        /// Default Value: RSSMA_DEXC_MODE_IMPORT (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetLISTImportExportListMode(int List_Mode)
        {
            int pInvokeResult = PInvoke.SetLISTImportExportListMode(this._handle, List_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the dexchange list mode.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LIST:DEXChange:MODE?
        /// </summary>
        /// <param name="List_Mode">
        /// This control returns if list mode lists should be imported or exported. The settings offered below depend on the selected mode.
        /// 
        /// Valid Values:
        /// RSSMA_DEXC_MODE_IMPORT (0) - Import
        /// RSSMA_DEXC_MODE_EXPORT (1) - Export
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetLISTImportExportListMode(out int List_Mode)
        {
            int pInvokeResult = PInvoke.GetLISTImportExportListMode(this._handle, out List_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function calls the File Manager for selecting the list mode list to be exported (source) into an ASCII file or the destination for the ASCII file to be imported (destination) in. 
        /// 
        /// The list mode files are stored with the fixed file extensions *.lsw in a directory of the user's choice. The directory applicable to the commands is defined with the command MMEMory:CDIR. A path can also be specified in command SOUR:LIST:DEXC:SEL, in which case the files are stored or loaded in the specified directory.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LIST:DEXChange:SELect
        /// </summary>
        /// <param name="Source_File">
        /// This control sets the source file.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetLISTImportExportListFile(string Source_File)
        {
            int pInvokeResult = PInvoke.SetLISTImportExportListFile(this._handle, Source_File);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function calls the File Manager for querying the list mode list to be exported (source) into an ASCII file or the destination for the ASCII file to be imported (destination) in.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LIST:DEXChange:SELect?
        /// </summary>
        /// <param name="Source_File">
        /// This control querying the source file.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetLISTImportExportListFile(System.Text.StringBuilder Source_File)
        {
            int pInvokeResult = PInvoke.GetLISTImportExportListFile(this._handle, Source_File);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function starts the export or import of the selected file. 
        /// When import is selected, the ASCII file is imported as list mode list.
        /// 
        /// When export is selected, the list mode list is exported into the selected ASCII file.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LIST:DEXChange:EXECute
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ImportExportExecute()
        {
            int pInvokeResult = PInvoke.ImportExportExecute(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function calls the File Manager for selecting the ASCII file to be imported into a list mode list (source) or the ASCII file the list mode list is exported (destination) in.
        /// 
        /// The ASCII files are stored with the fixed file extensions *.txt or *.csv in a directory of the user's choice. The directory applicable to the commands is defined with the command MMEMory:CDIR.  A path can also be specified in command SOUR:LIST:DEXC:AFIL:SEL, in which case the files are stored or loaded in the specified directory.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LIST:DEXChange:AFILe:SELect
        /// </summary>
        /// <param name="ASCII_Source_File">
        /// This control sets the ASCII source file.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetLISTImportExportASCIIFile(string ASCII_Source_File)
        {
            int pInvokeResult = PInvoke.SetLISTImportExportASCIIFile(this._handle, ASCII_Source_File);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function calls the File Manager for querying the ASCII file to be imported into a list mode list (source) or the ASCII file the list mode list is exported (destination) in.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LIST:DEXChange:AFILe:SELect?
        /// </summary>
        /// <param name="ASCII_Source_File">
        /// This control querying the ASCII source file.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetLISTImportExportASCIIFile(System.Text.StringBuilder ASCII_Source_File)
        {
            int pInvokeResult = PInvoke.GetLISTImportExportASCIIFile(this._handle, ASCII_Source_File);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the file extension of the ASCII file to be imported or exported. Selection TXT (text file) or CSV (Excel file) is available. 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LIST:DEXChange:AFILe:EXTension TXT | CSV
        /// </summary>
        /// <param name="Extension">
        /// This control selects the file extension of the ASCII file to be imported or exported. Selection TXT (text file) or CSV (Excel file) is available.
        /// 
        /// Valid Values:
        /// RSSMA_DEXC_ASCII_SOURCE_FILE_EXT_TXT (0) - txt
        /// RSSMA_DEXC_ASCII_SOURCE_FILE_EXT_CSV (1) - csv
        /// 
        /// Default Value:
        /// RSSMA_DEXC_ASCII_SOURCE_FILE_EXT_TXT (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetLISTImportExportASCIIExtension(int Extension)
        {
            int pInvokeResult = PInvoke.SetLISTImportExportASCIIExtension(this._handle, Extension);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the selected file extension of the ASCII file to be imported or exported. Selection TXT (text file) or CSV (Excel file) is available. 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LIST:DEXChange:AFILe:EXTension?
        /// </summary>
        /// <param name="Extension">
        /// This control displays the file extension of the ASCII file to be imported or exported. Selection TXT (text file) or CSV (Excel file) is available.
        /// 
        /// Valid Values:
        /// RSSMA_DEXC_ASCII_SOURCE_FILE_EXT_TXT (0) - txt
        /// RSSMA_DEXC_ASCII_SOURCE_FILE_EXT_CSV (1) - csv
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetLISTImportExportASCIIExtension(out int Extension)
        {
            int pInvokeResult = PInvoke.GetLISTImportExportASCIIExtension(this._handle, out Extension);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the separator between the frequency and level column of the ASCII table. 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LIST:DEXChange:AFILe:SEParator:COLumn TABulator | SEMicolon | COMMa | SPACe
        /// </summary>
        /// <param name="Separator">
        /// This control selects the separator between the frequency and level column of the ASCII table. 
        /// 
        /// Valid Values:
        /// RSSMA_DEXC_ASCII_SOURCE_FILE_COLUMN_SEP_TAB   (0) - Tabulator
        /// RSSMA_DEXC_ASCII_SOURCE_FILE_COLUMN_SEP_SEM   (1) - Semicolon
        /// RSSMA_DEXC_ASCII_SOURCE_FILE_COLUMN_SEP_COMMA (2) - Comma
        /// RSSMA_DEXC_ASCII_SOURCE_FILE_COLUMN_SEP_SPACE (3) - Space
        /// 
        /// Default Value:
        /// RSSMA_DEXC_ASCII_SOURCE_FILE_COLUMN_SEP_TAB (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetLISTImportExportASCIIColumnSeparator(int Separator)
        {
            int pInvokeResult = PInvoke.SetLISTImportExportASCIIColumnSeparator(this._handle, Separator);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the selected separator between the frequency and level column of the ASCII table. 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LIST:DEXChange:AFILe:SEParator:COLumn?
        /// </summary>
        /// <param name="Separator">
        /// This control displays the separator between the frequency and level column of the ASCII table. 
        /// 
        /// Valid Values:
        /// RSSMA_DEXC_ASCII_SOURCE_FILE_COLUMN_SEP_TAB   (0) - Tabulator
        /// RSSMA_DEXC_ASCII_SOURCE_FILE_COLUMN_SEP_SEM   (1) - Semicolon
        /// RSSMA_DEXC_ASCII_SOURCE_FILE_COLUMN_SEP_COMMA (2) - Comma
        /// RSSMA_DEXC_ASCII_SOURCE_FILE_COLUMN_SEP_SPACE (3) - Space
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetLISTImportExportASCIIColumnSeparator(out int Separator)
        {
            int pInvokeResult = PInvoke.GetLISTImportExportASCIIColumnSeparator(this._handle, out Separator);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the decimal separator used in the ASCII data between '.' (decimal point) and ',' (comma) with floating-point numerals.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LIST:DEXChange:AFILe:SEParator:DECimal  DOT | COMMa
        /// </summary>
        /// <param name="Decimal_Separator">
        /// This control selects the decimal separator used in the ASCII data between '.' (decimal point) and ',' (comma) with floating-point numerals.  
        /// 
        /// Valid Values:
        /// RSSMA_DEXC_ASCII_SOURCE_FILE_COLUMN_DEC_SEP_DOT   (0) - Dot
        /// RSSMA_DEXC_ASCII_SOURCE_FILE_COLUMN_DEC_SEP_COMMA (1) - Comma
        /// 
        /// Default Value:
        /// RSSMA_DEXC_ASCII_SOURCE_FILE_COLUMN_DEC_SEP_DOT (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetLISTImportExportASCIIColumnDecimalSeparator(int Decimal_Separator)
        {
            int pInvokeResult = PInvoke.SetLISTImportExportASCIIColumnDecimalSeparator(this._handle, Decimal_Separator);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function displays the selected decimal separator used in the ASCII data - '.' (decimal point) and ',' (comma) with floating-point numerals.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LIST:DEXChange:AFILe:SEParator:DECimal?
        /// </summary>
        /// <param name="Decimal_Separator">
        /// This control displays the decimal separator used in the ASCII data between '.' (decimal point) and ',' (comma) with floating-point numerals.  
        /// 
        /// Valid Values:
        /// RSSMA_DEXC_ASCII_SOURCE_FILE_COLUMN_DEC_SEP_DOT   (0) - Dot
        /// RSSMA_DEXC_ASCII_SOURCE_FILE_COLUMN_DEC_SEP_COMMA (1) - Comma
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetLISTImportExportASCIIColumnDecimalSeparator(out int Decimal_Separator)
        {
            int pInvokeResult = PInvoke.GetLISTImportExportASCIIColumnDecimalSeparator(this._handle, out Decimal_Separator);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function requests a list of available ASCII files for export/import of list mode data. The individual files are separated by commas.
        ///  
        /// The ASCII files are stored with the fixed file extensions *.txt or *.csv in a directory of the user's choice. The directory applicable to the commands is defined with the command MMEMory:CDIR.  A path can also be specified in command SOUR:LIST:DEXC:AFIL:CAT?, in which case the files in the specified directory are read.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]LIST:DEXChange:AFILe:CATalog?
        /// 
        /// </summary>
        /// <param name="Array_Size">
        /// Array size of the parameter labeled 'Catalog List'.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 256
        /// 
        /// </param>
        /// <param name="Catalog_List">
        /// Reads back catalog list. Size of the list is limited by the 'Array Size' parameter.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int LISTImportExportCatalog(int Array_Size, System.Text.StringBuilder Catalog_List)
        {
            int pInvokeResult = PInvoke.LISTImportExportCatalog(this._handle, Array_Size, Catalog_List);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets parameters of Clock Synthesis.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-B29
        /// 
        /// Remote-control command(s):
        /// CSYNthesis:STATe ON | OFF
        /// CSYNthesis:FREQuency
        /// CSYNthesis:FREQuency:STEP:MODE USER | DECimal
        /// CSYNthesis:FREQuency:STEP
        /// </summary>
        /// <param name="CSYN_State">
        /// Activates/deactivates generation of a system clock for differential outputs CLK SYN and CLK SYN N at the rear of the instrument.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <param name="Frequency">
        /// Sets the frequency of the clock synthesis output signal.
        /// 
        /// Valid Range: 100.0e3 Hz to 1.5e9 Hz
        /// 
        /// Default Value: 1.0e6 Hz
        /// 
        /// </param>
        /// <param name="Variation_Active">
        /// Activates or deactivates the user-defined step width used when varying the clock synthesis frequency value with the frequency values UP/DOWN.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// Notes:
        /// 
        /// (1) On:
        /// The frequency value set with the rotary knob is varied using the user-defined step width which is entered under Variation Step.
        /// 
        /// (2) Off:
        /// The frequency value set with the rotary knob is varied in steps of one unit at the cursor position 
        /// (standard operating mode).
        /// 
        /// </param>
        /// <param name="Variation_Step">
        /// Sets the step width for the clock synthesis frequency
        /// 
        /// Valid Range: 0.0 Hz to 9999.99e6 Hz
        /// 
        /// Default Value: 1.0e6 Hz
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureClockSynthesis(bool CSYN_State, double Frequency, bool Variation_Active, double Variation_Step)
        {
            int pInvokeResult = PInvoke.ConfigureClockSynthesis(this._handle, System.Convert.ToUInt16(CSYN_State), Frequency, System.Convert.ToUInt16(Variation_Active), Variation_Step);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates/deactivates generation of a system clock for differential outputs CLK SYN and CLK SYN N at the rear of the instrument.   
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-B29
        /// 
        /// Remote-control command(s):
        /// CSYNthesis:STATe ON | OFF
        /// 
        /// </summary>
        /// <param name="CSYN_State">
        /// Activates/deactivates generation of a system clock for differential outputs CLK SYN and CLK SYN N at the rear of the instrument.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetCSYNState(bool CSYN_State)
        {
            int pInvokeResult = PInvoke.SetCSYNState(this._handle, System.Convert.ToUInt16(CSYN_State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the state of the generation of a system clock
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-B29
        /// 
        /// Remote-control command(s):
        /// CSYNthesis:STATe?
        /// 
        /// </summary>
        /// <param name="CSYN_State">
        /// Returns the state of the generation of a system clock.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetCSYNState(out bool CSYN_State)
        {
            ushort CSYN_StateAsUShort;
            int pInvokeResult = PInvoke.GetCSYNState(this._handle, out CSYN_StateAsUShort);
            CSYN_State = System.Convert.ToBoolean(CSYN_StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the frequency of the clock synthesis output signal.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-B29
        /// 
        /// Remote-control command(s):
        /// CSYNthesis:FREQuency
        /// </summary>
        /// <param name="Frequency">
        /// Sets the frequency of the clock synthesis output signal.
        /// 
        /// Valid Range: 100.0e3 Hz to 1.5e9 Hz
        /// 
        /// Default Value: 10.0e6 Hz
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetCSYNFrequency(double Frequency)
        {
            int pInvokeResult = PInvoke.SetCSYNFrequency(this._handle, Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the frequency of the clock synthesis output signal.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-B29
        /// 
        /// Remote-control command(s):
        /// CSYNthesis:FREQuency?
        /// </summary>
        /// <param name="Frequency">
        /// Returns the frequency of the clock synthesis output signal.
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetCSYNFrequency(out double Frequency)
        {
            int pInvokeResult = PInvoke.GetCSYNFrequency(this._handle, out Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the step width for the clock synthesis frequency setting if the frequency values UP/DOWN are used and variation mode SOUR:FREQ:STEP:MODE USER is selected. The command
        /// is linked to Variation Step for manual control, i.e. the command also sets the step width of the rotary knob for Variation Active on.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-B29
        /// 
        /// Remote-control command(s):
        /// CSYNthesis:FREQuency:STEP
        /// 
        /// </summary>
        /// <param name="Variation_Step">
        /// Sets the step width for the clock synthesis frequency
        /// 
        /// Valid Range: 0.0 Hz to 9999.99e6 Hz
        /// 
        /// Default Value: 1.0e6 Hz
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetCSYNVariationStep(double Variation_Step)
        {
            int pInvokeResult = PInvoke.SetCSYNVariationStep(this._handle, Variation_Step);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the step width for the clock synthesis frequency.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-B29
        /// 
        /// Remote-control command(s):
        /// CSYNthesis:FREQuency:STEP?
        /// </summary>
        /// <param name="Variation_Step">
        /// Returns the step width for the clock synthesis frequency.
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetCSYNVariationStep(out double Variation_Step)
        {
            int pInvokeResult = PInvoke.GetCSYNVariationStep(this._handle, out Variation_Step);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates (USER) or deactivates (DECimal) the user-defined step width used when varying the clock synthesis frequency value with the frequency values UP/DOWN. The command is linked to the command Variation Active for manual control, i.e. the command also activates/deactivates the user-defined step width used when varying the frequency value with the
        /// rotary knob
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-B29
        /// 
        /// Remote-control command(s):
        /// CSYNthesis:FREQuency:STEP:MODE USER | DECimal
        /// </summary>
        /// <param name="Variation_Active">
        /// Activates or deactivates the user-defined step width used when varying the clock synthesis frequency value with the frequency values UP/DOWN.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// Notes:
        /// 
        /// (1) On:
        /// The frequency value set with the rotary knob is varied using the user-defined step width which is entered under Variation Step.
        /// 
        /// (2) Off:
        /// The frequency value set with the rotary knob is varied in steps of one unit at the cursor position 
        /// (standard operating mode).
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetCSYNVariationActive(bool Variation_Active)
        {
            int pInvokeResult = PInvoke.SetCSYNVariationActive(this._handle, System.Convert.ToUInt16(Variation_Active));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the frequency step mode.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-B29
        /// 
        /// Remote-control command(s):
        /// CSYNthesis:FREQuency:STEP:MODE?
        /// </summary>
        /// <param name="Variation_Active">
        /// Returns the status of activation of the user-defined step width.
        /// 
        /// Valid Values:
        /// VI_TRUE  (1) - On
        /// VI_FALSE (0) - Off
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetCSYNVariationActive(out bool Variation_Active)
        {
            ushort Variation_ActiveAsUShort;
            int pInvokeResult = PInvoke.GetCSYNVariationActive(this._handle, out Variation_ActiveAsUShort);
            Variation_Active = System.Convert.ToBoolean(Variation_ActiveAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the phase of the clock synthesis output signal.
        /// 
        /// Remote-control command(s):
        /// CSYNthesis:PHASe
        /// </summary>
        /// <param name="Phase">
        /// Sets the phase of the clock synthesis output signal.
        /// 
        /// Valid Range: -359.9 to 359.9 DEG
        /// 
        /// Default Value: 0.0 DEG
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetCSYNPhase(double Phase)
        {
            int pInvokeResult = PInvoke.SetCSYNPhase(this._handle, Phase);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the phase of the clock synthesis output signal.
        /// 
        /// 
        /// Remote-control command(s):
        /// CSYNthesis:PHASe?
        /// </summary>
        /// <param name="Phase">
        /// Returns the phase of the clock synthesis output signal.
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetCSYNPhase(out double Phase)
        {
            int pInvokeResult = PInvoke.GetCSYNPhase(this._handle, out Phase);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function adopts the phase set as the current phase.
        /// 
        /// 
        /// Remote-control command(s):
        /// CSYNthesis:PHASe:REFerence
        /// 
        /// 
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetCSYNPhaseReference()
        {
            int pInvokeResult = PInvoke.SetCSYNPhaseReference(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates/deactivates the addition of  the DC offset to both clock synthesis output signals.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-B29
        /// 
        /// Remote-control command(s):
        /// CSYNthesis:OFFSet:STATe ON | OFF
        /// 
        /// </summary>
        /// <param name="DC_Offset_State">
        /// Activates/deactivates the addition of the DC offset to both clock synthesis output signals 
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetCSYNDCOffsetState(bool DC_Offset_State)
        {
            int pInvokeResult = PInvoke.SetCSYNDCOffsetState(this._handle, System.Convert.ToUInt16(DC_Offset_State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the state of the addition of the DC offset to both clock synthesis output signals. 
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-B29
        /// 
        /// Remote-control command(s):
        /// CSYNthesis:OFFSet:STATe?
        /// 
        /// </summary>
        /// <param name="DC_Offset_State">
        /// Returns the state of the addition of the DC offset.
        /// 
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetCSYNDCOffsetState(out bool DC_Offset_State)
        {
            ushort DC_Offset_StateAsUShort;
            int pInvokeResult = PInvoke.GetCSYNDCOffsetState(this._handle, out DC_Offset_StateAsUShort);
            DC_Offset_State = System.Convert.ToBoolean(DC_Offset_StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets DC offset added to both clock synthesis output signals. 
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-B29
        /// 
        /// Remote-control command(s):
        /// CSYNthesis:OFFSet
        /// </summary>
        /// <param name="DC_Offset">
        /// Sets the DC offset added to both clock synthesis output signals. 
        /// 
        /// Valid Range: -5.00 to 5.00 V
        /// 
        /// Default Value: 0.00 V
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetCSYNDCOffset(double DC_Offset)
        {
            int pInvokeResult = PInvoke.SetCSYNDCOffset(this._handle, DC_Offset);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the DC offset added to both clock synthesis output signals. 
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-B29
        /// 
        /// Remote-control command(s):
        /// CSYNthesis:OFFSet?
        /// </summary>
        /// <param name="DC_Offset">
        /// Returns the DC offset added to both clock synthesis output signals. 
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetCSYNDCOffset(out double DC_Offset)
        {
            int pInvokeResult = PInvoke.GetCSYNDCOffset(this._handle, out DC_Offset);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets all parameters of noise modulation.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K24
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]NOISe:BWIDth:STATe ON | OFF
        /// [SOURce:]NOISe:BWIDth
        /// [SOURce:]NOISe:DISTribution GAUSs | EQUal
        /// 
        /// </summary>
        /// <param name="Bandwidth_State">
        /// Enabled/disables bandwidth limitation of noise.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <param name="Bandwidth">
        /// Sets the noise level in the system bandwidth for enabled bandwidth limitation.
        /// 
        /// Valid Range: 100.0e3 to 10.0e6 Hz
        /// 
        /// Default Value: 3.84 MHz
        /// 
        /// </param>
        /// <param name="Distribution">
        /// Selects the noise power densitiy distribution of the noise.
        /// 
        /// Valid Values:
        /// RSSMA_NOISE_DISTRIBUTION_GAUSS (0) - Gauss
        /// RSSMA_NOISE_DISTRIBUTION_EQUAL (1) - Equal
        /// 
        /// Default Value: RSSMA_NOISE_DISTRIBUTION_GAUSS (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int confNoise(bool Bandwidth_State, double Bandwidth, int Distribution)
        {
            int pInvokeResult = PInvoke.confNoise(this._handle, System.Convert.ToUInt16(Bandwidth_State), Bandwidth, Distribution);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function enabled/disables bandwidth limitation of noise.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K24
        /// 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]NOISe:BWIDth:STATe ON | OFF
        /// </summary>
        /// <param name="Bandwidth_State">
        /// Enabled/disables bandwidth limitation of noise.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetNOISEBandwidthState(bool Bandwidth_State)
        {
            int pInvokeResult = PInvoke.SetNOISEBandwidthState(this._handle, System.Convert.ToUInt16(Bandwidth_State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the bandwidth limitation of noise.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K24
        /// 
        /// Remote-control command(s):
        /// [SOURce:]NOISe:BWIDth:STATe?
        /// </summary>
        /// <param name="Bandwidth_State">
        /// Returns the bandwidth limitation of noise.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetNOISEBandwidthState(out bool Bandwidth_State)
        {
            ushort Bandwidth_StateAsUShort;
            int pInvokeResult = PInvoke.GetNOISEBandwidthState(this._handle, out Bandwidth_StateAsUShort);
            Bandwidth_State = System.Convert.ToBoolean(Bandwidth_StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the noise level in the system bandwidth for enabled bandwidth limitation. Distinct bandwidth settings between 10 kHz and 10 MHz in 100 kHz steps (range 100 .. 1 MHz), 1 MHz (range 1 MHz .. 5 MHz) and 5 MHz (5 MHz ? 10 MHz) are possible.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K24
        /// 
        /// Remote-control command(s):
        /// [SOURce:]NOISe:BWIDth
        /// </summary>
        /// <param name="Bandwidth">
        /// Sets the noise level in the system bandwidth for enabled bandwidth limitation.
        /// 
        /// Valid Range: 100.0e3 to 10.0e6 Hz
        /// 
        /// Default Value: 100.0e3 Hz
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetNOISEBandwidth(double Bandwidth)
        {
            int pInvokeResult = PInvoke.SetNOISEBandwidth(this._handle, Bandwidth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the noise level in the system bandwidth for enabled bandwidth limitation.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K24
        /// 
        /// Remote-control command(s):
        /// [SOURce:]NOISe:BWIDth?
        /// 
        /// 
        /// 
        /// </summary>
        /// <param name="Bandwidth">
        /// Returns the noise level in the system bandwidth for enabled bandwidth limitation.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetNOISEBandwidth(out double Bandwidth)
        {
            int pInvokeResult = PInvoke.GetNOISEBandwidth(this._handle, out Bandwidth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the noise power densitiy distribution of the noise.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K24
        /// 
        /// Remote-control command(s):
        /// [SOURce:]NOISe:DISTribution GAUSs | EQUal
        /// 
        /// </summary>
        /// <param name="Distribution">
        /// Selects the noise power densitiy distribution of the noise.
        /// 
        /// Valid Values:
        /// RSSMA_NOISE_DISTRIBUTION_GAUSS (0) - Gauss
        /// RSSMA_NOISE_DISTRIBUTION_EQUAL (1) - Equal
        /// 
        /// Default Value: RSSMA_NOISE_DISTRIBUTION_GAUSS (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetNOISEDistribution(int Distribution)
        {
            int pInvokeResult = PInvoke.SetNOISEDistribution(this._handle, Distribution);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the noise power densitiy distribution of the noise.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K24
        /// 
        /// Remote-control command(s):
        /// [SOURce:]NOISe:DISTribution?
        /// </summary>
        /// <param name="Distribution">
        /// Returns the noise power densitiy distribution of the noise.
        /// 
        /// Returned Values:
        /// RSSMA_NOISE_DISTRIBUTION_GAUSS (0) - Gauss
        /// RSSMA_NOISE_DISTRIBUTION_EQUAL (1) - Equal
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetNOISEDistribution(out int Distribution)
        {
            int pInvokeResult = PInvoke.GetNOISEDistribution(this._handle, out Distribution);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the level of the noise signal per Hz in the total bandwidth.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K24
        /// 
        /// Remote-control command(s):
        /// [SOURce:]NOISe:LEVel:RELative?
        /// 
        /// </summary>
        /// <param name="Relative_Level">
        /// Returns the level of the noise signal per Hz in the total bandwidth.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetNOISERelativeLevel(out double Relative_Level)
        {
            int pInvokeResult = PInvoke.GetNOISERelativeLevel(this._handle, out Relative_Level);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the level of the noise signal in the system bandwidth for enabled bandwidth limitation.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K24
        /// 
        /// Remote-control command(s):
        /// [SOURce:]NOISe:LEVel[:ABSolute]?
        /// 
        /// 
        /// 
        /// 
        /// 
        /// 
        /// </summary>
        /// <param name="Absolute_Level">
        /// Returns the level of the noise signal in the system bandwidth for enabled bandwidth limitation.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetNOISEAbsoluteLevel(out double Absolute_Level)
        {
            int pInvokeResult = PInvoke.GetNOISEAbsoluteLevel(this._handle, out Absolute_Level);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function resets the protective circuit after it has been tripped. The state of the output is again determined by OUTPut:STATe. 
        /// 
        /// Remote-control command(s):
        /// OUTPut:PROTection:CLEar
        /// 
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int OvervoltageProtectionClear()
        {
            int pInvokeResult = PInvoke.OvervoltageProtectionClear(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the state of the protective circuit.
        /// 
        /// Remote-control command(s):
        /// OUTPut:PROTection:TRIPped?
        /// 
        /// </summary>
        /// <param name="Protective_Circuit_State">
        /// Returns the state of the protective circuit.
        /// 
        /// Valid Values:
        /// 0 - 'the protective circuit has not tripped.
        /// 1 - 'the protective circuit has tripped.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int OvervoltageProtectionTripped(out int Protective_Circuit_State)
        {
            int pInvokeResult = PInvoke.OvervoltageProtectionTripped(this._handle, out Protective_Circuit_State);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function starts all internal adjustments for which no external measuring equipment is needed. 
        /// 
        /// Note:
        /// 
        /// If the calibration fails, this function returns an error code.
        /// 
        /// Remote-control command(s):
        /// CALibration:ALL?
        /// 
        /// </summary>
        /// <param name="Timeout">
        /// Sets the timeout for the calibration routine to be finished and have obtained calibration result. If the length of time required for calibration exceeds the timeout value, then the function will return with a timeout error and the instrument will continue with calibration.
        /// 
        /// Valid Range: 0 ms to 600000 ms
        /// 
        /// Default Value: 180000 ms
        /// 
        /// </param>
        /// <param name="Response">
        /// Returns result of the adjustment. The response "0" indicates error-free adjustment, and the response "1" means that an error occurred during adjustment.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int CALibrationAll(int Timeout, out int Response)
        {
            int pInvokeResult = PInvoke.CALibrationAll(this._handle, Timeout, out Response);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function performs all adjustments which affect the clock synthesis.
        /// 
        /// Note:
        /// 
        /// If the calibration fails, this function returns an error code.
        /// 
        /// Remote-control command(s):
        /// CALibration:CSYNthesis[:MEASure]?
        /// </summary>
        /// <param name="Timeout">
        /// Sets the timeout for the calibration routine to be finished and have obtained calibration result. If the length of time required for calibration exceeds the timeout value, then the function will return with a timeout error and the instrument will continue with calibration.
        /// 
        /// Valid Range: 0 ms to 600000 ms
        /// 
        /// Default Value: 180000 ms
        /// 
        /// </param>
        /// <param name="Response">
        /// Returns result of the adjustment. The response "0" indicates error-free adjustment, and the response "1" means that an error occurred during adjustment.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int CALibrationClockSynthesis(int Timeout, out int Response)
        {
            int pInvokeResult = PInvoke.CALibrationClockSynthesis(this._handle, Timeout, out Response);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function starts all adjustments which affect the frequency. 
        /// 
        /// Note:
        /// 
        /// If the calibration fails, this function returns an error code.
        /// 
        /// Remote-control command(s):
        /// CALibration:FREQuency:MEASure?
        /// 
        /// </summary>
        /// <param name="Timeout">
        /// Sets the timeout for the calibration routine to be finished and have obtained calibration result. If the length of time required for calibration exceeds the timeout value, then the function will return with a timeout error and the instrument will continue with calibration.
        /// 
        /// Valid Range: 0 ms to 600000 ms
        /// 
        /// Default Value: 180000 ms
        /// 
        /// </param>
        /// <param name="Response">
        /// Returns result of the adjustment. The response "0" indicates error-free adjustment, and the response "1" means that an error occurred during adjustment.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int CALibrationFrequency(int Timeout, out int Response)
        {
            int pInvokeResult = PInvoke.CALibrationFrequency(this._handle, Timeout, out Response);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function performs all adjustments which affect the internal modulation generators.
        /// 
        /// Note:
        /// 
        /// If the calibration fails, this function returns an error code.
        /// 
        /// Remote-control command(s):
        /// CALibration:LFOutput[:MEASure]?
        /// </summary>
        /// <param name="Timeout">
        /// Sets the timeout for the calibration routine to be finished and have obtained calibration result. If the length of time required for calibration exceeds the timeout value, then the function will return with a timeout error and the instrument will continue with calibration.
        /// 
        /// Valid Range: 0 ms to 600000 ms
        /// 
        /// Default Value: 180000 ms
        /// 
        /// </param>
        /// <param name="Response">
        /// Returns result of the adjustment. The response "0" indicates error-free adjustment, and the response "1" means that an error occurred during adjustment.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int CALibrationModulationGenerators(int Timeout, out int Response)
        {
            int pInvokeResult = PInvoke.CALibrationModulationGenerators(this._handle, Timeout, out Response);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function starts all adjustments which affect the level.
        /// 
        /// Note:
        /// 
        /// If the calibration fails, this function returns an error code.
        /// 
        /// 
        /// Remote-control command(s):
        /// CALibration:LEVel[:MEASure]?
        /// 
        /// </summary>
        /// <param name="Timeout">
        /// Sets the timeout for the calibration routine to be finished and have obtained calibration result. If the length of time required for calibration exceeds the timeout value, then the function will return with a timeout error and the instrument will continue with calibration.
        /// 
        /// Valid Range: 0 ms to 600000 ms
        /// 
        /// Default Value: 180000 ms
        /// 
        /// </param>
        /// <param name="Response">
        /// Returns result of the adjustment. The response "0" indicates error-free adjustment, and the response "1" means that an error occurred during adjustment.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int CALibrationLevel(int Timeout, out int Response)
        {
            int pInvokeResult = PInvoke.CALibrationLevel(this._handle, Timeout, out Response);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function switches on or off use of external level correction data. This switch can be used in case of corrupt external level correction data.
        /// 
        /// 
        /// Remote-control command(s):
        /// CALibration:LEVel:STATe ON | OFF
        /// 
        /// </summary>
        /// <param name="Level_State">
        /// Switches on or off use of external level correction data.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_TRUE (1)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetCALibrationLevelState(bool Level_State)
        {
            int pInvokeResult = PInvoke.SetCALibrationLevelState(this._handle, System.Convert.ToUInt16(Level_State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns state of external level correction data.
        /// 
        /// 
        /// Remote-control command(s):
        /// CALibration:LEVel:STATe?
        /// 
        /// </summary>
        /// <param name="Level_State">
        /// Returns state of external level correction data.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetCALibrationLevelState(out bool Level_State)
        {
            ushort Level_StateAsUShort;
            int pInvokeResult = PInvoke.GetCALibrationLevelState(this._handle, out Level_StateAsUShort);
            Level_State = System.Convert.ToBoolean(Level_StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the data used for external level correction. By default the instrument uses correction data obtained in the factory before delivery. In addition, customer data can be used for external level correction. The customer data is obtained using an R&amp;S NRP power sensor.
        /// 
        /// Remote-control command(s):
        /// CALibration:LEVel:EXTern:DATA FACT | CUST
        /// 
        /// </summary>
        /// <param name="Adjustment_Data">
        /// Selects the data used for external level correction. 
        /// 
        /// Valid Values:
        /// RSSMA_CAL_DATA_FACT (0) - Factory
        /// RSSMA_CAL_DATA_CUST (1) - Customer
        /// 
        /// Default Value: RSSMA_CAL_DATA_FACT (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetCALibrationLevelAdjustmentData(int Adjustment_Data)
        {
            int pInvokeResult = PInvoke.SetCALibrationLevelAdjustmentData(this._handle, Adjustment_Data);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the data used for external level correction.
        /// 
        /// Remote-control command(s):
        /// CALibration:LEVel:EXTern:DATA?
        /// 
        /// </summary>
        /// <param name="Adjustment_Data">
        /// Returns the data used for external level correction. 
        /// 
        /// Valid Values:
        /// RSSMA_CAL_DATA_FACT (0) - Factory
        /// RSSMA_CAL_DATA_CUST (1) - Customer
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetCALibrationLevelAdjustmentData(out int Adjustment_Data)
        {
            int pInvokeResult = PInvoke.GetCALibrationLevelAdjustmentData(this._handle, out Adjustment_Data);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function starts all adjustment for the FM/PhiM modulator.
        /// 
        /// Note:
        /// 
        /// If the calibration fails, this function returns an error code.
        /// 
        /// Remote-control command(s):
        /// CALibration:FMOFfset[:MEASure]?
        /// </summary>
        /// <param name="Timeout">
        /// Sets the timeout for the calibration routine to be finished and have obtained calibration result. If the length of time required for calibration exceeds the timeout value, then the function will return with a timeout error and the instrument will continue with calibration.
        /// 
        /// Valid Range: 0 ms to 600000 ms
        /// 
        /// Default Value: 180000 ms
        /// 
        /// </param>
        /// <param name="Response">
        /// Returns result of the adjustment. The response "0" indicates error-free adjustment, and the response "1" means that an error occurred during adjustment.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int CALibrationFMOffset(int Timeout, out int Response)
        {
            int pInvokeResult = PInvoke.CALibrationFMOffset(this._handle, Timeout, out Response);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function starts all adjustment of the DME pulse slope for best linearity.
        /// 
        /// Note:
        /// 
        /// If the calibration fails, this function returns an error code.
        /// 
        /// Required Option(s):
        /// R&amp;S SMA-K26
        /// 
        /// Remote-control command(s):
        /// CALibration:DME[:MEASure]?
        /// </summary>
        /// <param name="Timeout">
        /// Sets the timeout for the calibration routine to be finished and have obtained calibration result. If the length of time required for calibration exceeds the timeout value, then the function will return with a timeout error and the instrument will continue with calibration.
        /// 
        /// Valid Range: 0 ms to 600000 ms
        /// 
        /// Default Value: 180000 ms
        /// 
        /// </param>
        /// <param name="Response">
        /// Returns result of the adjustment. The response "0" indicates error-free adjustment, and the response "1" means that an error occurred during adjustment.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int CALibrationDMEMPulseSlope(int Timeout, out int Response)
        {
            int pInvokeResult = PInvoke.CALibrationDMEMPulseSlope(this._handle, Timeout, out Response);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the impedance of the EXT MOD input. 
        /// 
        /// Note(s):
        /// 
        /// (1) This setting affects all analog modulations which use the external modulation source. 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]INPut:MODext:IMPedance HIGH | G50
        /// </summary>
        /// <param name="PULM_External_Input_Impedance">
        /// Sets the impedance of the EXT MOD input.
        /// 
        /// Valid Values:
        /// RSSMA_EXT_INPUT_IMPEDANCE_G50   (0) - 50 Ohm to ground
        /// RSSMA_EXT_INPUT_IMPEDANCE_G1K   (1) - High
        /// 
        /// Default Value: RSSMA_EXT_INPUT_IMPEDANCE_G50 (0)
        /// 
        /// Note(s):
        /// (1) High - &gt; 1 kOhm to ground 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPULMExtInpImpedance(int PULM_External_Input_Impedance)
        {
            int pInvokeResult = PInvoke.SetPULMExtInpImpedance(this._handle, PULM_External_Input_Impedance);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the impedance of the EXT MOD input. 
        /// 
        /// Note(s):
        /// 
        /// (1) This setting affects all analog modulations which use the external modulation source. 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]INPut:MODext:IMPedance HIGH | G50
        /// </summary>
        /// <param name="PULM_External_Input_Impedance">
        /// Returns the impedance of the EXT MOD input.
        /// 
        /// Returned Values:
        /// RSSMA_EXT_INPUT_IMPEDANCE_G50   (0) - 50 Ohm to ground
        /// RSSMA_EXT_INPUT_IMPEDANCE_G1K   (1) - High
        /// 
        /// Note(s):
        /// (1) High - &gt; 1 kOhm to ground 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPULMExtInpImpedance(out int PULM_External_Input_Impedance)
        {
            int pInvokeResult = PInvoke.GetPULMExtInpImpedance(this._handle, out PULM_External_Input_Impedance);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the impedance for external feed via the PULSE EXT input 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]INPut:PULM:IMPedance G50 | 1G0
        /// </summary>
        /// <param name="Pulse_External_Input_Impedance">
        /// Set the impedance for external feed via the PULSE EXT input
        /// 
        /// Valid Values:
        /// RSSMA_EXT_INPUT_IMPEDANCE_G50   (0) - 50 Ohm to ground
        /// RSSMA_EXT_INPUT_IMPEDANCE_1G0   (1) - 10 kOhm to ground
        /// 
        /// Default Value: RSSMA_EXT_INPUT_IMPEDANCE_G50 (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPulseExtInpImpedance(int Pulse_External_Input_Impedance)
        {
            int pInvokeResult = PInvoke.SetPulseExtInpImpedance(this._handle, Pulse_External_Input_Impedance);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the impedance for external feed via the PULSE EXT input 
        /// 
        /// Remote-control command(s):
        /// [SOURce:]INPut:PULM:IMPedance?
        /// </summary>
        /// <param name="Pulse_External_Input_Impedance">
        /// Returns the impedance for external feed via the PULSE EXT input
        /// 
        /// Valid Values:
        /// RSSMA_EXT_INPUT_IMPEDANCE_G50   (0) - 50 Ohm to ground
        /// RSSMA_EXT_INPUT_IMPEDANCE_1G0   (1) - 10 kOhm to ground
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPulseExtInpImpedance(out int Pulse_External_Input_Impedance)
        {
            int pInvokeResult = PInvoke.GetPulseExtInpImpedance(this._handle, out Pulse_External_Input_Impedance);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function creates/selects a file into which the hardcopy will be stored after the HCOP:EXEC command is sent. The directory is either defined with the command MMEMory:CDIR or the path is specified together with the file name. Access via remote control is possible using the commands of the MMEM-Subsystem.
        /// 
        /// Remote-control command(s):
        /// HCOPy:FILE[:NAME]   &lt;name&gt;
        /// </summary>
        /// <param name="File_Name">
        /// File name of the hardcopy file.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetImageFileName(string File_Name)
        {
            int pInvokeResult = PInvoke.SetImageFileName(this._handle, File_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns a file name where the hardcopy will be stored after the HCOP:EXEC command is sent. The directory is either defined with the command MMEMory:CDIR or the path is specified together with the file name. Access via remote control is possible using the commands of the MMEM-Subsystem.
        /// 
        /// Remote-control command(s):
        /// HCOPy:FILE[:NAME]?
        /// </summary>
        /// <param name="File_Name">
        /// File name of the hardcopy file.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetImageFileName(string File_Name)
        {
            int pInvokeResult = PInvoke.GetImageFileName(this._handle, File_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the image format in which the hard copy should be stored.
        /// 
        /// Example(s):
        /// HCOP:DEV:LANG BMP
        ///   - 'selects bmp as imge format.
        /// HCOP:FILE 'C:/TEMP/snapshot001'
        ///   - 'defines directory, path and file for storing the hard copy.
        /// HCOP
        ///   - 'executees the hard copy procedure.
        /// 
        /// 
        /// Remote-control command(s):
        /// HCOPy:DEVice:LANGuage   
        /// </summary>
        /// <param name="Image_Format">
        /// Sets the image format in which the hard copy should be stored.
        /// 
        /// Valid Values:
        /// RSSMA_HCOPY_LANG_BMP (0)
        /// RSSMA_HCOPY_LANG_JPG (1)
        /// RSSMA_HCOPY_LANG_XPM (2)
        /// RSSMA_HCOPY_LANG_PNG (3)
        /// 
        /// 
        /// Default Value: RSSMA_HCOPY_LANG_BMP (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetImageFormat(int Image_Format)
        {
            int pInvokeResult = PInvoke.SetImageFormat(this._handle, Image_Format);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the image format in which the hard copy should be stored.
        /// 
        /// Remote-control command(s):
        /// HCOPy:DEVice:LANGuage?
        /// </summary>
        /// <param name="Image_Format">
        /// Displays the image format in which the hard copy should be stored.
        /// 
        /// Valid Values:
        /// RSSMA_HCOPY_LANG_BMP (0)
        /// RSSMA_HCOPY_LANG_JPG (1)
        /// RSSMA_HCOPY_LANG_XPM (2)
        /// RSSMA_HCOPY_LANG_PNG (3)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetImageFormat(out int Image_Format)
        {
            int pInvokeResult = PInvoke.GetImageFormat(this._handle, out Image_Format);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function transfers the hardcopy (snapshot) as a NByte stream to the remote client. 
        /// 
        /// Remote-control command(s):
        /// HCOPy:DATA?
        /// </summary>
        /// <param name="Destination">
        /// This control defines destination file to which the data transfer from instrument to control computer applies.
        /// 
        /// Valid Range: not tested
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetImageSnapshot(string Destination)
        {
            int pInvokeResult = PInvoke.GetImageSnapshot(this._handle, Destination);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the size of the hardcopy in number of pixels. The first value of the size setting defines the width, the second value the height of the image.
        /// 
        /// 
        /// Example:
        ///  HCOP:DEV:LANG BMP
        /// 'selects output format *.bmp.
        /// 
        /// HCOP:IMAG:SIZE 320,240
        /// 'the size of the bitmap is 320 pixels by 240 pixels.
        ///  
        /// 
        /// Remote-control command(s):
        /// HCOPy:IMAGe:SIZE  320,240 | 640,480 | 800,600| 1024,768
        /// 
        ///  
        /// </summary>
        /// <param name="Image_Size">
        /// Sets the the size of the hardcopy in number of pixels.
        /// 
        /// Valid Values:
        /// RSSMA_HCOPY_SIZE_320_240  (0) - 320x240
        /// RSSMA_HCOPY_SIZE_640_480  (1) - 640x480
        /// RSSMA_HCOPY_SIZE_800_600  (2) - 800x600
        /// RSSMA_HCOPY_SIZE_1024_768 (3) - 1024x768
        /// 
        /// 
        /// Default Value: RSSMA_HCOPY_SIZE_320_240 (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetImageSize(int Image_Size)
        {
            int pInvokeResult = PInvoke.SetImageSize(this._handle, Image_Size);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the size of the hardcopy in number of pixels. The first value of the size setting defines the width, the second value the height of the image.
        /// 
        /// Remote-control command(s):
        /// HCOPy:IMAGe:SIZE?
        /// </summary>
        /// <param name="Image_Size">
        /// Returns the  size of the hardcopy in number of pixels. 
        /// 
        /// Valid Values:
        /// RSSMA_HCOPY_SIZE_320_240  (0) 
        /// RSSMA_HCOPY_SIZE_640_480  (1)
        /// RSSMA_HCOPY_SIZE_800_600  (2)
        /// RSSMA_HCOPY_SIZE_1024_768 (3)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetImageSize(out int Image_Size)
        {
            int pInvokeResult = PInvoke.GetImageSize(this._handle, out Image_Size);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the output device. 
        /// 
        /// Remote-control command(s):
        /// HCOPy:DEVice FILE
        /// 
        ///   
        /// </summary>
        /// <param name="Output_Device">
        /// Sets the output device. 
        /// 
        /// Valid Values:
        /// RSSMA_HCOPY_DEV_FILE (0)
        /// 
        /// Default Value: RSSMA_HCOPY_DEV_FILE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetOutputDevice(int Output_Device)
        {
            int pInvokeResult = PInvoke.SetOutputDevice(this._handle, Output_Device);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the output device.
        /// 
        /// Remote-control command(s):
        /// HCOPy:DEVice?
        /// </summary>
        /// <param name="Output_Device">
        /// Returns the output device in which the hard copy should be outputed.
        /// 
        /// Valid Values:
        /// RSSMA_HCOPY_DEV_FILE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetOutputDevice(out int Output_Device)
        {
            int pInvokeResult = PInvoke.GetOutputDevice(this._handle, out Output_Device);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function triggers the generation of a hardcopy of the display.. The data is written into the file selected/created with the HCOP:FILE commands. 
        /// 
        /// Remote-control command(s):
        /// HCOPy[:EXECute]
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SaveHardCopy()
        {
            int pInvokeResult = PInvoke.SaveHardCopy(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates/deactivates automatic naming of the hardcopy files. 
        /// 
        /// 
        /// Remote-control command(s):
        /// HCOPy:FILE[:NAME]:AUTO:STATe  ON | OFF
        /// 
        /// 
        /// 
        /// </summary>
        /// <param name="State">
        /// Switches on or off automatic naming of the hardcopy files. 
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_TRUE (1)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAutomaticNamingState(bool State)
        {
            int pInvokeResult = PInvoke.SetAutomaticNamingState(this._handle, System.Convert.ToUInt16(State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns state of automatic naming of the hardcopy files. 
        /// 
        /// Remote-control command(s):
        /// HCOPy:FILE[:NAME]:AUTO:STATe?
        /// 
        /// </summary>
        /// <param name="State">
        /// Returns state of automatic naming of the hardcopy files. 
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAutomaticNamingState(out bool State)
        {
            ushort StateAsUShort;
            int pInvokeResult = PInvoke.GetAutomaticNamingState(this._handle, out StateAsUShort);
            State = System.Convert.ToBoolean(StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the file name generated using the automatic naming settings. As default the automatically generated file name is composed of: 
        /// "&lt;Path&gt;/&lt;Prefix&gt;&lt;YYYY&gt;&lt;MM&gt;&lt;DD&gt;&lt;Number&gt;.&lt;Format&gt;".
        /// Each component can be deactivated/activated separately to individually design the file name.
        /// 
        /// Remote-control command(s):
        /// HCOPy:FILE[:NAME]:AUTO?
        /// </summary>
        /// <param name="Array_Size">
        /// Defines size of array in argument 'File Path'.
        /// 
        /// Valid Values:
        /// &gt; 0
        /// 
        /// Default Value: 256
        /// </param>
        /// <param name="File_Path">
        /// Returns the file path with file name generated using the automatic naming settings. 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssmb_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAutomaticFilePath(int Array_Size, string File_Path)
        {
            int pInvokeResult = PInvoke.GetAutomaticFilePath(this._handle, Array_Size, File_Path);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the file name generated using the automatic naming settings. As default the automatically generated file name is composed of: 
        /// "&lt;Path&gt;/&lt;Prefix&gt;&lt;YYYY&gt;&lt;MM&gt;&lt;DD&gt;&lt;Number&gt;.&lt;Format&gt;".
        /// Each component can be deactivated/activated separately to individually design the file name.
        /// 
        /// Remote-control command(s):
        /// :KBOard:LANGuage
        /// </summary>
        /// <param name="File_Name">
        /// Returns the file name generated using the automatic naming settings. 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAutomaticFileName(string File_Name)
        {
            int pInvokeResult = PInvoke.GetAutomaticFileName(this._handle, File_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the directory into which the hardcopy files will be stored if auto naming is activated (HCOP:FILE:AUTO:STAT ON). 
        /// 
        /// Remote-control command(s):
        /// HCOPy:FILE[:NAME]:AUTO:DIRectory &lt;directory&gt;
        /// 
        /// </summary>
        /// <param name="Directory_Name">
        /// Defines the directory into which the hardcopy files will be stored
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAutomaticDirectory(string Directory_Name)
        {
            int pInvokeResult = PInvoke.SetAutomaticDirectory(this._handle, Directory_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the directory into which the hardcopy files will be stored if auto naming is activated (HCOP:FILE:AUTO:STAT ON). 
        /// 
        /// Remote-control command(s):
        /// HCOPy:FILE[:NAME]:AUTO:DIRectory?
        /// </summary>
        /// <param name="Directory">
        /// Directory into which the hardcopy files will be stored if auto naming is activated.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAutomaticDirectory(string Directory)
        {
            int pInvokeResult = PInvoke.GetAutomaticDirectory(this._handle, Directory);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function deletes all files with extensions "bmp", "img", "png" and "xpm" in the directory set for automatic naming.
        /// 
        /// Remote-control command(s):
        /// HCOPy:FILE[:NAME]:AUTO:DIRectory:CLEar
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int DeleteImageFiles()
        {
            int pInvokeResult = PInvoke.DeleteImageFiles(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates/deactivates the usage of the day/month/year in the automatic file name. 
        /// 
        /// Remote-control command(s):
        /// HCOPy:FILE[:NAME]:AUTO[:FILE]:DAY:STATe   ON | OFF
        /// HCOPy:FILE[:NAME]:AUTO[:FILE]:MONTh:STATe   ON | OFF
        /// HCOPy:FILE[:NAME]:AUTO[:FILE]:YEAR:STATe   ON | OFF
        /// 
        /// 
        /// 
        /// 
        /// 
        /// 
        /// 
        /// 
        /// </summary>
        /// <param name="File_Name_Part">
        /// Specifies the part of automatic generated file name should be set.
        /// 
        /// Valid Values:
        /// RSSMA_HCOPY_AUTO_FILE_DAY    (0) - Day
        /// RSSMA_HCOPY_AUTO_FILE_MONTH  (1) - Month
        /// RSSMA_HCOPY_AUTO_FILE_YEAR   (2) - Year
        /// 
        /// Default Value: RSSMA_HCOPY_AUTO_FILE_DAY (0)
        /// </param>
        /// <param name="State">
        /// Switches on or off the usage of the day/month/year in the automatic file name.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_TRUE (1)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAutomaticFileDateState(int File_Name_Part, bool State)
        {
            int pInvokeResult = PInvoke.SetAutomaticFileDateState(this._handle, File_Name_Part, System.Convert.ToUInt16(State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the state of usage of the day/month/year in the automatic file name. 
        /// 
        /// Remote-control command(s):
        /// HCOPy:FILE[:NAME]:AUTO[:FILE]:DAY:STATe?
        /// HCOPy:FILE[:NAME]:AUTO[:FILE]:MONTh:STATe?
        /// HCOPy:FILE[:NAME]:AUTO[:FILE]:YEAR:STATe?
        /// </summary>
        /// <param name="File_Name_Part">
        /// Specifies the part of automatic generated file name should be set.
        /// 
        /// Valid Values:
        /// RSSMA_HCOPY_AUTO_FILE_DAY    (0) - Day
        /// RSSMA_HCOPY_AUTO_FILE_MONTH  (1) - Month
        /// RSSMA_HCOPY_AUTO_FILE_YEAR   (2) - Year
        /// 
        /// Default Value: RSSMA_HCOPY_AUTO_FILE_DAY (0)
        /// </param>
        /// <param name="State">
        /// Returns the usage of the day/month/year in the automatic file name. 
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAutomaticFileDateState(int File_Name_Part, out bool State)
        {
            ushort StateAsUShort;
            int pInvokeResult = PInvoke.GetAutomaticFileDateState(this._handle, File_Name_Part, out StateAsUShort);
            State = System.Convert.ToBoolean(StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the day/month/year part in the automatic file name. 
        /// 
        /// Remote-control command(s):
        /// HCOPy:FILE[:NAME]:AUTO[:FILE]:DAY?
        /// HCOPy:FILE[:NAME]:AUTO[:FILE]:MONTh?
        /// HCOPy:FILE[:NAME]:AUTO[:FILE]:YEAR?
        /// 
        /// 
        /// 
        /// 
        /// 
        /// 
        /// 
        /// </summary>
        /// <param name="File_Name_Part">
        /// Specifies the part of automatic generated file name should be set.
        /// 
        /// Valid Values:
        /// RSSMA_HCOPY_AUTO_FILE_DAY    (0) - Day
        /// RSSMA_HCOPY_AUTO_FILE_MONTH  (1) - Month
        /// RSSMA_HCOPY_AUTO_FILE_YEAR   (2) - Year
        /// 
        /// Default Value: RSSMA_HCOPY_AUTO_FILE_DAY (0)
        /// </param>
        /// <param name="Part">
        /// Returns the day/month/year of the date part in the automatic file name. 
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAutomaticFileDate(int File_Name_Part, string Part)
        {
            int pInvokeResult = PInvoke.GetAutomaticFileDate(this._handle, File_Name_Part, Part);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates/deactivates the usage of the prefix in the automatic file name. 
        /// 
        /// Remote-control command(s):
        /// HCOPy:FILE[:NAME]:AUTO[:FILE]:PREFix:STATe   ON | OFF
        /// 
        /// 
        /// 
        /// 
        /// 
        /// 
        /// 
        /// 
        /// 
        /// 
        /// </summary>
        /// <param name="State">
        /// Switches on or off the usage of the prefix in the automatic file name.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_TRUE (1)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAutomaticFilePrefixState(bool State)
        {
            int pInvokeResult = PInvoke.SetAutomaticFilePrefixState(this._handle, System.Convert.ToUInt16(State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the state of the usage of the prefix in the automatic file name.
        /// 
        /// Remote-control command(s):
        /// HCOPy:FILE[:NAME]:AUTO[:FILE]:PREFix:STATe?
        /// 
        /// </summary>
        /// <param name="State">
        /// Returns the usage of the prefix in the automatic file name. 
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAutomaticFilePrefixState(out bool State)
        {
            ushort StateAsUShort;
            int pInvokeResult = PInvoke.GetAutomaticFilePrefixState(this._handle, out StateAsUShort);
            State = System.Convert.ToBoolean(StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the prefix part in the automatic file name. 
        /// 
        /// Remote-control command(s):
        /// HCOPy:FILE[:NAME]:AUTO[:FILE]:PREFix
        /// 
        /// 
        /// </summary>
        /// <param name="Prefix">
        /// Prefix of the automatic file name
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAutomaticFilePrefix(string Prefix)
        {
            int pInvokeResult = PInvoke.SetAutomaticFilePrefix(this._handle, Prefix);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the prefix part in the automatic file name. 
        /// 
        /// 
        /// Remote-control command(s):
        /// HCOPy:FILE[:NAME]:AUTO[:FILE]:PREFix?
        /// </summary>
        /// <param name="File_Name">
        /// Prefix of the automatic file name.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAutomaticFilePrefix(string File_Name)
        {
            int pInvokeResult = PInvoke.GetAutomaticFilePrefix(this._handle, File_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the generated number in the automatic file name. 
        /// 
        /// Note:
        /// On initially switching on the device the number will be reset to the lowest possible value. Starting with number 0 the output directory will be scanned for already existing files. As long as files with the same name are existing the number will be incremented by 1. The number will be automatically set to a number so that the resulting file name will be unique within the selected path. The current number will not be saved in the save recall file but will be temporarily stored within the database. On subsequent saves the number will be incremented. 
        /// 
        /// Remote-control command(s):
        /// HCOPy:FILE[:NAME]:AUTO[:FILE]:NUMBer?
        /// 
        /// 
        /// 
        /// 
        /// 
        /// 
        /// 
        /// 
        /// 
        /// </summary>
        /// <param name="Number">
        /// Returns the generated number in the automatic file name. 
        /// 
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAutomaticFileNumber(out int Number)
        {
            int pInvokeResult = PInvoke.GetAutomaticFileNumber(this._handle, out Number);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// CLEAR STATUS sets the status byte (STB), the standard event register (ESR), and the EVENt part of the QUEStionable and OPERation register to zero. The function does not change the enable and transition parts of the registers. It deletes the output buffer.
        /// 
        /// Remote-control command(s):
        /// *CLS
        /// 
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ClearStatus()
        {
            int pInvokeResult = PInvoke.ClearStatus(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// EVENT STATUS ENABLE sets the event status enable register to the specified value. The *ESE? query command returns the content of the event status enable register in decimal form.
        /// 
        /// Remote-control command(s):
        /// *ESE
        /// 
        /// </summary>
        /// <param name="Register_Value">
        /// EVENT STATUS ENABLE sets the event status enable register to the specified value.
        /// 
        /// Valid Range: 0 to 255
        /// 
        /// Default Value: 0
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int EventStatusEnable(int Register_Value)
        {
            int pInvokeResult = PInvoke.EventStatusEnable(this._handle, Register_Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// STANDARD EVENT STATUS QUERY returns the content of the event status register in decimal form (0...255) and then sets the register to zero.
        /// 
        /// Remote-control command(s):
        /// *ESR?
        /// 
        /// </summary>
        /// <param name="Register_Value">
        /// Returns the content of the event status register in decimal form (0...255).
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int EventStatusQuery(out int Register_Value)
        {
            int pInvokeResult = PInvoke.EventStatusQuery(this._handle, out Register_Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// IDENTIFICATION QUERY queries the instrument identification. The instrument type, serial number and firmware version are returned.
        /// 
        /// Example:
        /// 
        /// "Rohde&amp;Schwarz,SMA100A,1141.2005k02/123456,1.00.0.0 (Release)"
        /// 
        /// Remote-control command(s):
        /// *IDN?
        /// 
        /// </summary>
        /// <param name="Instrument_Identification">
        /// Returns the instrument identification string.
        /// 
        /// Notes:
        /// 
        /// (1) The array must contain at least 256 elements ViChar[256].
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int IdentificationQuery(System.Text.StringBuilder Instrument_Identification)
        {
            int pInvokeResult = PInvoke.IdentificationQuery(this._handle, Instrument_Identification);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// INDIVIDUAL STATUS QUERY returns the content of the IST flag in decimal form (0 | 1). The IST flag is the status bit which is sent during a parallel poll.
        /// 
        /// Remote-control command(s):
        /// *IST?
        /// 
        /// </summary>
        /// <param name="IST_Flag">
        /// Returns the content of the IST flag in decimal form (0 | 1).
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int IndividualStatusQuery(out int IST_Flag)
        {
            int pInvokeResult = PInvoke.IndividualStatusQuery(this._handle, out IST_Flag);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// OPERATION COMPLETE sets bit 0 in the event status register when all previous commands have been processed. This bit can be used to trigger a service request.
        /// 
        /// Remote-control command(s):
        /// *OPC
        /// 
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int OperationComplete()
        {
            int pInvokeResult = PInvoke.OperationComplete(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// OPERATION COMPLETE QUERY returns a 1 when all previous commands have been processed. It is important to ensure that the timeout set at the IEC/IEEE bus is long enough.
        /// 
        /// Remote-control command(s):
        /// *OPC?
        /// 
        /// </summary>
        /// <param name="OPC_State">
        /// Returns a 1 when all previous commands have been processed.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int OperationCompleteQuery(out int OPC_State)
        {
            int pInvokeResult = PInvoke.OperationCompleteQuery(this._handle, out OPC_State);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// OPTION IDENTIFICATION QUERY queries the options configured in the instrument and returns a list of the installed options. The options are separated by commas. 
        /// 
        /// Remote-control command(s):
        /// *OPT?
        /// 
        /// </summary>
        /// <param name="Option_Identification">
        /// Returns a list of the installed options.
        /// 
        /// Notes:
        /// 
        /// (1) The array must contain at least 1024 elements ViChar[1024].
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int OptionIdentificationQuery(System.Text.StringBuilder Option_Identification)
        {
            int pInvokeResult = PInvoke.OptionIdentificationQuery(this._handle, Option_Identification);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// PARALLEL POLL REGISTER ENABLE sets the parallel poll enable register to the specified value. The *PRE? query command returns the content of the parallel poll enable register in decimal form.
        /// 
        /// Remote-control command(s):
        /// *PRE
        /// 
        /// </summary>
        /// <param name="Register_Value">
        /// Sets the parallel poll enable register to the specified value.
        /// 
        /// Valid Range: 0 to 655
        /// 
        /// Default Value: 0
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ParallelPollRegisterEnable(int Register_Value)
        {
            int pInvokeResult = PInvoke.ParallelPollRegisterEnable(this._handle, Register_Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// PARALLEL POLL REGISTER QUERY returns the content of the parallel poll enable register in decimal form.
        /// 
        /// Remote-control command(s):
        /// *PRE?
        /// 
        /// </summary>
        /// <param name="Register_Value">
        /// Returns the content of the parallel poll enable register in decimal form.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ParallelPollRegisterQuery(out int Register_Value)
        {
            int pInvokeResult = PInvoke.ParallelPollRegisterQuery(this._handle, out Register_Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// POWER ON STATUS CLEAR determines whether the content of the ENABle registers are retained or reset at power on.
        /// 
        /// The query *PSC? retrieves the contents of the Power-on-Status-Clear flag. The answer is either 0 or 1.
        /// 
        /// Remote-control command(s):
        /// *PSC 0 | 1
        /// 
        /// </summary>
        /// <param name="Register_Value">
        /// Determines whether the content of the ENABle registers are retained or reset at power on.
        /// 
        /// Valid Values: 0 | 1
        /// 
        /// Default Value: 0
        /// 
        /// Notes:
        /// 
        /// 0: The content of the status registers is retained at power on. If the status registers ESE and SRE are configured accordingly, this may cause a service request to be triggered at power on.
        /// 
        /// 1: The content of the status registers is reset at power on.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int PowerOnStatusClear(int Register_Value)
        {
            int pInvokeResult = PInvoke.PowerOnStatusClear(this._handle, Register_Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// POWER ON STATUS CLEAR QUERY retrieves the contents of the Power-on-Status-Clear flag. The answer is either 0 or 1.
        /// 
        /// Remote-control command(s):
        /// *PSC?
        /// 
        /// </summary>
        /// <param name="Register_Value">
        /// Returns the contents of the Power-on-Status-Clear flag. The answer is either 0 or 1.
        /// 
        /// Values:
        /// 
        /// 0: The content of the status registers is retained at power on. If the status registers ESE and SRE are configured accordingly, this may cause a service request to be triggered at power on.
        /// 
        /// 1: The content of the status registers is reset at power on.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int PowerOnStatusClearQuery(out int Register_Value)
        {
            int pInvokeResult = PInvoke.PowerOnStatusClearQuery(this._handle, out Register_Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// RECALL calls up the instrument status which was stored under the specified number using the *SAV command or using the MMEMory:STORe:STATe command. "0" corresponds to the power-on state, unless a new instrument setting was stored under this number in the meantime using the MMEMory:STORe:STATe command. This function can also be used to call up the 3 intermediate instrument states which are stored with *SAV.
        /// 
        /// Remote-control command(s):
        /// *RCL
        /// 
        /// </summary>
        /// <param name="Instrument_Status">
        /// Number under which is stored instrument setting.
        /// 
        /// Valid Range: 0 to 10
        /// 
        /// Default Value: 0
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int Recall(int Instrument_Status)
        {
            int pInvokeResult = PInvoke.Recall(this._handle, Instrument_Status);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// SAVE stores the current device state under the specified number (see also *RCL). This function is used to store the 3 intermediate instrument states and to store the current instrument state internally when the instrument is switched off. This state is then restored at power on.
        /// 
        /// Remote-control command(s):
        /// *SAV
        /// 
        /// </summary>
        /// <param name="Instrument_Status">
        /// Number under which will be stored instrument setting.
        /// 
        /// Valid Range: 0 to 10
        /// 
        /// Default Value: 0
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int Save(int Instrument_Status)
        {
            int pInvokeResult = PInvoke.Save(this._handle, Instrument_Status);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// SERVICE REQUEST ENABLE sets the service request enable register to the specified value. Bit 6 (MSS enable bit) remains 0. This function determines the conditions under which a service request is triggered. The *SRE? query command reads out the content of the service request enable register in decimal form. Bit 6 is always 0.
        /// 
        /// Remote-control command(s):
        /// *SRE
        /// 
        /// </summary>
        /// <param name="Register_Value">
        /// Ssets the service request enable register to the specified value.
        /// 
        /// Valid Range: 0 to 255
        /// 
        /// Default Value: 0
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ServiceRequestEnable(int Register_Value)
        {
            int pInvokeResult = PInvoke.ServiceRequestEnable(this._handle, Register_Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// SERVICE REQUEST ENABLE reads out the content of the service request enable register in decimal form. Bit 6 is always 0.
        /// 
        /// Remote-control command(s):
        /// *SRE?
        /// 
        /// </summary>
        /// <param name="Register_Value">
        /// Returns the content of the service request enable register in decimal form.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ServiceRequestEnableQuery(out int Register_Value)
        {
            int pInvokeResult = PInvoke.ServiceRequestEnableQuery(this._handle, out Register_Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// READ STATUS BYTE QUERY reads out the content of the status byte in decimal form.
        /// 
        /// Remote-control command(s):
        /// *STB?
        /// 
        /// </summary>
        /// <param name="Status_Byte">
        /// Returns the content of the status byte in decimal form.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int StatusByteQuery(out int Status_Byte)
        {
            int pInvokeResult = PInvoke.StatusByteQuery(this._handle, out Status_Byte);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// TRIGGER triggers all actions which are waiting for a trigger event. Specific trigger events can be triggered by means of the "TRIGger" command system (sweep and lists) or the SOURce subsystems (baseband).
        /// 
        /// Remote-control command(s):
        /// *TRG
        /// 
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int Trigger()
        {
            int pInvokeResult = PInvoke.Trigger(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function triggers all actions waiting for a trigger event in the currently active window and waits for operation completed (OPC) before returning the status code.
        /// 
        /// </summary>
        /// <param name="Timeout">
        /// Sets the timeout for the triggering routine to be finished. If the length of time required for triggering exceeds the timeout value, then the function will return with a timeout error.
        /// 
        /// Valid Range: 0 ms to 600000 ms
        /// 
        /// Default Value: 15000 ms
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int TriggerWaitOPC(int Timeout)
        {
            int pInvokeResult = PInvoke.TriggerWaitOPC(this._handle, Timeout);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// SELF TEST QUERY triggers all self tests of the instrument and outputs an error code in decimal form (see Service Manual supplied with the instrument).
        /// 
        /// Remote-control command(s):
        /// *TST?
        /// 
        /// </summary>
        /// <param name="Error_Code">
        /// Returns an error code of the self tests.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SelfTestQuery(out int Error_Code)
        {
            int pInvokeResult = PInvoke.SelfTestQuery(this._handle, out Error_Code);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// WAIT-to-CONTINUE does not allow subsequent commands to be processed until all previous commands have been executed and all signals are in their transient condition.
        /// 
        /// Remote-control command(s):
        /// *WAI
        /// 
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int WaittoContinue()
        {
            int pInvokeResult = PInvoke.WaittoContinue(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function presets all parameters which are related to the signal path.
        /// 
        /// Remote-control command(s):
        /// SOURce:PRESet
        /// 
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int PresetSignalPath()
        {
            int pInvokeResult = PInvoke.PresetSignalPath(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function checks the assemblies available in the instrument using the variant and revision state. 
        /// 
        /// If the function is sent without parameters being specified (empty string at the 'Module Name' parameter), a complete list of all assemblies is returned (the various entries are separated by commas). The length of the list is variable, depends on the instrument equipment configuration and is limited to the size defined by the 'Array Size' parameter. 
        /// 
        /// If the function is sent with parameters ('Module Name' parameter is not empty string), a list of the specified assemblies is returned (the various entries are separated by commas). The length of the list is variable, depends on the instrument equipment configuration and is limited to the size defined by the 'Array Size' parameter. A list of assembly names can be called up using the :DIAG:BGIN:CATalog? command.
        /// 
        /// Each entry consists of three parts which are separated by space characters:
        /// 
        /// Assembly name  Assembly variant VarXX Assembly revision RevX.X.X.
        /// 
        /// 
        /// Remote-control command(s):
        /// DIAGnostic:BGINfo? &lt;module name&gt;
        /// 
        /// </summary>
        /// <param name="Module_Name">
        /// Module name parameter.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: VI_NULL
        /// 
        /// Note:
        /// 
        /// If the function is sent without parameters being specified (empty string at the 'Module Name' parameter), a complete list of all assemblies is returned (the various entries are separated by commas).
        /// 
        /// </param>
        /// <param name="Array_Size">
        /// Array size of the parameter labeled 'Module Configuration'.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 256
        /// 
        /// </param>
        /// <param name="Module_Configuration">
        /// Returns list of the assemblies specified by the 'Module Name' parameter. If the function is sent with empty string (VI_NULL) at the 'Module Name' parameter, a complete list of all assemblies is returned (the various entries are separated by commas).
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int DIAGnosticModules(string Module_Name, int Array_Size, System.Text.StringBuilder Module_Configuration)
        {
            int pInvokeResult = PInvoke.DIAGnosticModules(this._handle, Module_Name, Array_Size, Module_Configuration);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the names of the assemblies available in the instrument. 
        /// 
        /// A complete list of all assemblies is returned (the various entries are separated by commas). The length of the list is variable and depends on the instrument equipment configuration. 
        /// 
        /// 
        /// Remote-control command(s):
        /// DIAGnostic:BGINfo:CATalog?
        /// 
        /// </summary>
        /// <param name="Array_Size">
        /// Array size of the parameter labeled 'Module Names'.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 256
        /// 
        /// </param>
        /// <param name="Module_Names">
        /// Returns complete list of all assemblies (the various entries are separated by commas). The length of the list is variable, depends on the instrument equipment configuration and is limited to the size defined by 'Array Size' parameter.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int DIAGnosticModuleNames(int Array_Size, System.Text.StringBuilder Module_Names)
        {
            int pInvokeResult = PInvoke.DIAGnosticModuleNames(this._handle, Array_Size, Module_Names);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the test points available in the instrument. A detailed description of the test points can be found in Chapter 3 of the Service Manual (supplied with the instrument).  
        /// 
        /// 
        /// Remote-control command(s):
        /// DIAGnostic:POINt:CATalog?
        /// 
        /// </summary>
        /// <param name="Array_Size">
        /// Array size of the parameter labeled 'Test Points'.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 256
        /// 
        /// </param>
        /// <param name="Test_Points">
        /// Returns the test points available in the instrument (the various entries are separated by commas).
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int DIAGnosticTestPoints(int Array_Size, System.Text.StringBuilder Test_Points)
        {
            int pInvokeResult = PInvoke.DIAGnosticTestPoints(this._handle, Array_Size, Test_Points);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function triggers voltage measurement at the specified test point and returns the measured voltage. A detailed description of the test points can be found in Chapter 3 of the Service Manual (supplied with the instrument). 
        /// 
        /// A list of the available test points can be queried using the DIAG:POIN:CAT? command .   
        /// 
        /// 
        /// Remote-control command(s):
        /// DIAGnostic[:MEASure:]POINt? &lt;test point name&gt;
        /// 
        /// </summary>
        /// <param name="Test_Point_Name">
        /// Test point name.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: not defined
        /// 
        /// </param>
        /// <param name="Measured_Voltage">
        /// Returns the voltage measured at the specified test point.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int DIAGnosticTestPointVoltages(string Test_Point_Name, out double Measured_Voltage)
        {
            int pInvokeResult = PInvoke.DIAGnosticTestPointVoltages(this._handle, Test_Point_Name, out Measured_Voltage);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the number of operation hours.
        /// 
        /// Remote-control command(s):
        /// DIAGnostic:INFO:OTIMe?
        /// </summary>
        /// <param name="Operation_Time">
        /// Returns the number of operation hours.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssmf_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int DIAGnosticOperationTime(out uint Operation_Time)
        {
            int pInvokeResult = PInvoke.DIAGnosticOperationTime(this._handle, out Operation_Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the number of power-on events.
        /// 
        /// Remote-control command(s):
        /// DIAGnostic:INFO:PCOunter?
        /// </summary>
        /// <param name="Power_On_Events">
        /// Returns the number of power-on events.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssmf_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int DIAGnosticPowerOnEvents(out uint Power_On_Events)
        {
            int pInvokeResult = PInvoke.DIAGnosticPowerOnEvents(this._handle, out Power_On_Events);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The respective hardware assembly responds directly to this function; any safety mechanisms are bypassed. 
        /// 
        /// 
        /// Remote-control command(s):
        /// TEST:DIRect? 'SSYN' | 'SSYNEX' | 'IQOP3' | 'IQOP6' | 'SATT3' | 'SATT6' | 'BBINS' | 'DIRECTLAST'
        /// 
        /// </summary>
        /// <param name="Command">
        /// Selects the command.
        ///  
        /// Valid Values:
        /// RSSMA_TEST_COMMAND_SSYN       (0)  - SSYN
        /// RSSMA_TEST_COMMAND_SSYNEX     (1)  - SSYNEX
        /// RSSMA_TEST_COMMAND_IQOP3      (2)  - IQOP3
        /// RSSMA_TEST_COMMAND_IQOP6      (3)  - IQOP6
        /// RSSMA_TEST_COMMAND_SATT3      (4)  - SATT3
        /// RSSMA_TEST_COMMAND_SATT6      (5)  - SATT6
        /// RSSMA_TEST_COMMAND_BBINS      (6)  - BBINS
        /// RSSMA_TEST_COMMAND_DIRECTLAST (7)  - DIRECTLAST
        ///  
        /// Default Value: RSSMA_TEST_COMMAND_SSYN  (0)
        /// 
        /// </param>
        /// <param name="Assembly_Response">
        /// Response of the respective hardware assembly.
        /// 
        /// Notes:
        /// 
        /// (1) The array must contain at least 256 elements ViChar[256].
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int TESTDirect(int Command, System.Text.StringBuilder Assembly_Response)
        {
            int pInvokeResult = PInvoke.TESTDirect(this._handle, Command, Assembly_Response);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function performs a selftest on all installed hardware options.
        /// 
        /// Remote-control command(s):
        /// TEST&lt;hw&gt;:ALL:STARt
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int TESTAllStart()
        {
            int pInvokeResult = PInvoke.TESTAllStart(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the result of the performed selftest.
        /// 
        /// Remote-control command(s):
        /// TEST&lt;hw&gt;:ALL:RESult?
        /// </summary>
        /// <param name="Result">
        /// This control displays the result of the performed selftest.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int TESTAllResult(System.Text.StringBuilder Result)
        {
            int pInvokeResult = PInvoke.TESTAllResult(this._handle, Result);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the display power save state. With the screen-save mode activated the display including backlight is completely switched off after the elapse of the wait time (see command DISPlay:PSAVe:HOLDoff) when no entries via front panel, external mouse or external keyboard are made.
        /// 
        /// Remote-control command(s):
        /// DISPlay:PSAVe:STATe ON | OFF
        /// </summary>
        /// <param name="State">
        /// This control sets the display power save state.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value:
        /// VI_FALSE (0) - Off
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayPowerSaveState(bool State)
        {
            int pInvokeResult = PInvoke.SetDisplayPowerSaveState(this._handle, System.Convert.ToUInt16(State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the state of display power save.
        /// 
        /// Remote-control command(s):
        /// DISPlay:PSAVe:STATe?
        /// </summary>
        /// <param name="State">
        /// This control returns the display power save state.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplayPowerSaveState(out bool State)
        {
            ushort StateAsUShort;
            int pInvokeResult = PInvoke.GetDisplayPowerSaveState(this._handle, out StateAsUShort);
            State = System.Convert.ToBoolean(StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the display power save holdoff.
        /// 
        /// Remote-control command(s):
        /// DISPlay:PSAVe:HOLDoff
        /// </summary>
        /// <param name="Holdoff">
        /// This control sets the display power save holdoff.
        /// 
        /// Valid Values:
        /// 1 to 60 min
        /// 
        /// Default Value: 1 min
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayPowerSaveHoldoff(int Holdoff)
        {
            int pInvokeResult = PInvoke.SetDisplayPowerSaveHoldoff(this._handle, Holdoff);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the state of display power save holdoff.
        /// 
        /// Remote-control command(s):
        /// DISPlay:PSAVe:HOLDoff?
        /// </summary>
        /// <param name="Holdoff">
        /// This control returns the display power save holdoff.
        /// 
        /// Valid Values:
        /// 1 to 60 min
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplayPowerSaveHoldoff(out int Holdoff)
        {
            int pInvokeResult = PInvoke.GetDisplayPowerSaveHoldoff(this._handle, out Holdoff);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function switches the update of the display on/off. A switchover from remote control to manual control always sets the status of the update of the display to ON.
        /// 
        /// Remote-control command(s):
        /// SYSTem:DISPlay:UPDate ON | OFF
        /// </summary>
        /// <param name="State">
        /// This control switches the update of the display on/off.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value:
        /// VI_FALSE (0) - Off
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssmb_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayUpdateState(bool State)
        {
            int pInvokeResult = PInvoke.SetDisplayUpdateState(this._handle, System.Convert.ToUInt16(State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the state of update of the display on/off. 
        /// 
        /// Remote-control command(s):
        /// SYSTem:DISPlay:UPDate?
        /// </summary>
        /// <param name="State">
        /// This control returns the state of update of the display.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssmb_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplayUpdateState(out bool State)
        {
            ushort StateAsUShort;
            int pInvokeResult = PInvoke.GetDisplayUpdateState(this._handle, out StateAsUShort);
            State = System.Convert.ToBoolean(StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function opens the specified dialog. To determine the dialog identifier, use function rssma_getDisplayDialogID.
        /// 
        /// Remote-control command(s):
        /// :DISPlay:DIALog:OPEN &lt;dialog ID&gt;
        /// </summary>
        /// <param name="Dialog">
        /// Sets the dialog name.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int diplayDialogOpen(string Dialog)
        {
            int pInvokeResult = PInvoke.diplayDialogOpen(this._handle, Dialog);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function closes the specified dialog. To determine the dialog identifier, use function getDisplayDialogID.
        /// 
        /// Remote-control command(s):
        /// :DISPlay:DIALog:CLOSe &lt;DialogId&gt;
        /// </summary>
        /// <param name="Dialog">
        /// Sets the dialog name.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int diplayDialogClose(string Dialog)
        {
            int pInvokeResult = PInvoke.diplayDialogClose(this._handle, Dialog);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the array of the open dialogs identifiers
        /// 
        /// Remote-control command(s):
        /// DISPlay:DIALog:ID?
        /// </summary>
        /// <param name="Array_Size">
        /// Array size of the parameter labeled 'Dialog IDs'.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 256
        /// 
        /// </param>
        /// <param name="Dialog_IDs">
        /// Returns the array of dialog identifiers.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssmf_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int getDisplayDialogID(int Array_Size, System.Text.StringBuilder Dialog_IDs)
        {
            int pInvokeResult = PInvoke.getDisplayDialogID(this._handle, Array_Size, Dialog_IDs);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function reads out the subdirectories and files in the specified directory. If no directory is specified, the default directory selected with the MMEM:CDIR command is read out on the default drive selected with the MMEM:MSIS command. 
        /// 
        /// The response has the following format:
        /// 
        /// &lt;used_bytes_in_this_directory&gt;,&lt;free_bytes_on_this_disk&gt;,"&lt;file_name&gt;,&lt;file_type&gt;,&lt;filesize_in_bytes&gt;","&lt;file_name&gt;,&lt;file_type&gt;,&lt;filesize_in_bytes&gt;", ...
        /// 
        /// Where:
        /// 
        /// &lt;file_name&gt; ... File or directory name
        /// 
        /// &lt;file_type&gt; ... File type. There are the following file types: DIR (directory), ASCii (ASCII file), BINary (Binary file), and STATe (file with instrument settings).
        /// 
        /// &lt;filesize_in_bytes&gt; ... File size. The size "0" is returned for a directory. 
        /// 
        /// 
        /// Remote-control command(s):
        /// MMEMory:CATalog? &lt;path&gt;
        /// </summary>
        /// <param name="Directory_Path">
        /// Directory path parameter.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: VI_NULL
        /// 
        /// Note:
        /// 
        /// If no directory is specified (VI_NULL), the default directory is used.
        /// 
        /// </param>
        /// <param name="Array_Size">
        /// Array size of the parameter labeled 'Catalog List'.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 256
        /// 
        /// </param>
        /// <param name="Catalog_List">
        /// Reads back catalog list. Size of the list is limited by the 'Array Size' parameter.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int MMEMoryCatalog(string Directory_Path, int Array_Size, System.Text.StringBuilder Catalog_List)
        {
            int pInvokeResult = PInvoke.MMEMoryCatalog(this._handle, Directory_Path, Array_Size, Catalog_List);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function reads out the number of files in the specified directory. If no directory is specified, the default directory selected with the MMEM:CDIR command is read out on the default drive selected with the MMEM:MSIS command. 
        /// 
        /// 
        /// Remote-control command(s):
        /// MMEMory:CATalog:LENGth? &lt;path&gt;
        /// </summary>
        /// <param name="Directory_Path">
        /// Directory path parameter.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: VI_NULL
        /// 
        /// Note:
        /// 
        /// If no directory is specified (VI_NULL), the default directory is used.
        /// 
        /// </param>
        /// <param name="Catalog_Length">
        /// Returns the number of files in the specified directory. If no directory is specified, the default directory is used.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int MMEMoryCatalogLength(string Directory_Path, out int Catalog_Length)
        {
            int pInvokeResult = PInvoke.MMEMoryCatalogLength(this._handle, Directory_Path, out Catalog_Length);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function changes the default directory. This directory is used for all subsequent MMEM commands if no path is specified with them. It is also possible to change to a higher directory using two dots '..'.
        /// 
        /// 
        /// Remote-control command(s):
        /// MMEMory:CDIRectory &lt;directory_name&gt;
        /// </summary>
        /// <param name="Directory_Name">
        /// Directory name parameter.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: ".."
        /// 
        /// Note:
        /// 
        /// It is also possible to change to a higher directory using two dots '..'.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int MMEMoryChangeDirectory(string Directory_Name)
        {
            int pInvokeResult = PInvoke.MMEMoryChangeDirectory(this._handle, Directory_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function copies the first specified file to the second specified file. Instead of just a file, this function can also be used to copy a complete directory together with all its files. 
        /// 
        /// If &lt;destination&gt; is not specified, &lt;source&gt; is copied to the MMEM:MSIS drive and the MMEM:CDIR directory. Files which already exist with the same name in the destination directory are overwritten without an error message.
        /// 
        /// 
        /// Remote-control command(s):
        /// MMEMory:COPY &lt;source&gt;[,&lt;destination&gt;]
        /// 
        /// </summary>
        /// <param name="Source_Path">
        /// Source path of the file or a complete directory together with all its files.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "D:"
        /// 
        /// </param>
        /// <param name="Destination_Path">
        /// Destination path of the file or a directory. If 'Destination Path' is not specified, 'Source Path' is copied to the MMEM:MSIS drive and the MMEM:CDIR directory.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: VI_NULL
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int MMEMoryCopy(string Source_Path, string Destination_Path)
        {
            int pInvokeResult = PInvoke.MMEMoryCopy(this._handle, Source_Path, Destination_Path);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function writes the block data &lt;binary block data&gt; to the file identified by &lt;file_name&gt;. The IEC/IEEE-bus terminator should be set to EOI in order to ensure correct data transfer.
        /// 
        /// This function can be used to transfer stored instrument settings or waveforms directly to the instrument.
        /// 
        /// 
        /// Remote-control command(s):
        /// MMEMory:DATA &lt;file_name&gt;[,&lt;binary block data&gt;]
        /// 
        /// </summary>
        /// <param name="File_Name">
        /// File name of the binary block data.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "TEST1.WV"
        /// 
        /// </param>
        /// <param name="Binary_Block_Length">
        /// Defines the number of bytes in the 'Binary Block Data' array.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: none
        /// 
        /// </param>
        /// <param name="Binary_Block_Data">
        /// Binary block data array to be writen to the file defined by 'File Name' parameter with the size limited with 'Binary Block Length' parameter.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: none
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int MMEMoryBlockDataWrite(string File_Name, int Binary_Block_Length, string Binary_Block_Data)
        {
            int pInvokeResult = PInvoke.MMEMoryBlockDataWrite(this._handle, File_Name, Binary_Block_Length, Binary_Block_Data);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function transfers the specified file from the R&amp;S SMA to the IEC/IEEE bus and then on to the control computer. It is important to ensure that the intermediate memory on the control computer is large enough to take the file. In this case, the setting for the IEC/IEEE-bus terminator is irrelevant.
        /// 
        /// This function can be used to read stored instrument settings or waveforms directly from the instrument.
        /// 
        /// 
        /// Remote-control command(s):
        /// MMEMory:DATA? &lt;file_name&gt;
        /// 
        /// </summary>
        /// <param name="File_Name">
        /// File name of the binary block data.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "wave1.wv"
        /// 
        /// </param>
        /// <param name="Binary_Block_Length">
        /// Length of the binary block data array.
        /// 
        /// </param>
        /// <param name="Binary_Block_Data">
        /// Binary block data to be retrieved from the file defined by the 'File Name' parameter. Array size of this parameter must be large enough to store all the retrieved data.
        /// 
        /// Note:
        /// 
        /// To check length of the binary block data, pass VI_NULL as the value of this parameter.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int MMEMoryBlockDataRead(string File_Name, int Binary_Block_Length, System.Text.StringBuilder Binary_Block_Data)
        {
            int pInvokeResult = PInvoke.MMEMoryBlockDataRead(this._handle, File_Name, Binary_Block_Length, Binary_Block_Data);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function reads out the subdirectories of the specified directory. If no directory is specified, the default directory selected with the MMEM:CDIR command is read out. The directories are output in a list (the list entries are separated by commas). 
        /// 
        /// 
        /// Remote-control command(s):
        /// MMEMory:DCATalog? &lt;path&gt;
        /// 
        /// </summary>
        /// <param name="Directory_Path">
        /// Directory path parameter.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: VI_NULL
        /// 
        /// Note:
        /// 
        /// If no directory is specified (VI_NULL), the default directory is used.
        /// 
        /// </param>
        /// <param name="Array_Size">
        /// Array size of the parameter labeled 'Catalog List'.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 256
        /// 
        /// </param>
        /// <param name="Catalog_List">
        /// Reads back catalog list. Size of the list is limited by the 'Array Size' parameter.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int MMEMoryDirectoryCatalog(string Directory_Path, int Array_Size, System.Text.StringBuilder Catalog_List)
        {
            int pInvokeResult = PInvoke.MMEMoryDirectoryCatalog(this._handle, Directory_Path, Array_Size, Catalog_List);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function reads out the number of subdirectories in the specified directory. If no directory is specified, the directory selected with the MMEM:CDIR command is read out.  
        /// 
        /// 
        /// Remote-control command(s):
        /// MMEMory:DCATalog:LENGth? &lt;path&gt;
        /// 
        /// </summary>
        /// <param name="Directory_Path">
        /// Directory path parameter.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: VI_NULL
        /// 
        /// Note:
        /// 
        /// If no directory is specified (VI_NULL), the default directory is used.
        /// 
        /// </param>
        /// <param name="Catalog_Length">
        /// Returns the number of subdirectories in the specified directory. If no directory is specified, the default directory is used.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int MMEMoryDirectoryCatalogLength(string Directory_Path, out int Catalog_Length)
        {
            int pInvokeResult = PInvoke.MMEMoryDirectoryCatalogLength(this._handle, Directory_Path, out Catalog_Length);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function deletes the specified file.
        /// 
        /// 
        /// Remote-control command(s):
        /// MMEMory:DELete &lt;file_name&gt;
        /// 
        /// </summary>
        /// <param name="File_Name">
        /// File name parameter.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int MMEMoryDelete(string File_Name)
        {
            int pInvokeResult = PInvoke.MMEMoryDelete(this._handle, File_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function loads the specified file stored under the specified name in an internal memory. If 0 is used, the instrument setting of the selected file is set directly in the R&amp;S SMA. The *RCL command is used to load the intermediate instrument setting (see the section Common Functions (Commands)).
        /// 
        /// If a number other than 0 is used when storing, the instrument setting must be activated using an *RCL command with this number after the file has been loaded.
        /// 
        /// 
        /// Remote-control command(s):
        /// MMEMory:LOAD:STATe 0,&lt;file_name&gt;
        /// 
        /// </summary>
        /// <param name="Instrument_Setting">
        /// Instrument setting number.
        /// 
        /// Valid Range: 0 to 10
        /// 
        /// Default Value: 0
        /// 
        /// </param>
        /// <param name="File_Name">
        /// File name parameter.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int MMEMoryLoad(int Instrument_Setting, string File_Name)
        {
            int pInvokeResult = PInvoke.MMEMoryLoad(this._handle, Instrument_Setting, File_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function creates a new subdirectory in the specified directory. If no directory is specified, a subdirectory is created in the default directory. This function can also be used to create a directory tree.
        /// 
        /// 
        /// Remote-control command(s):
        /// MMEMory:MDIRectory &lt;directory_name&gt;
        /// 
        /// </summary>
        /// <param name="Directory_Name">
        /// Directory name parameter.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "New_Folder"
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int MMEMoryMakeDirectory(string Directory_Name)
        {
            int pInvokeResult = PInvoke.MMEMoryMakeDirectory(this._handle, Directory_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function renames an existing file ('File Source') if no path is specified for 'File Destination'. Otherwise the file is moved to the specified path and stored under the original file name or, if specified, a new file name.
        /// 
        /// 
        /// Remote-control command(s):
        /// MMEMory:MOVE &lt;file_source&gt;,&lt;file_destination&gt;
        /// 
        /// </summary>
        /// <param name="File_Source">
        /// Define file source.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <param name="File_Destination">
        /// Define file destination.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int MMEMoryMove(string File_Source, string File_Destination)
        {
            int pInvokeResult = PInvoke.MMEMoryMove(this._handle, File_Source, File_Destination);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function deletes the specified subdirectory in the specified directory. If no directory is specified, the subdirectory with the specified name is deleted in the default directory.
        /// 
        /// 
        /// Remote-control command(s):
        /// MMEMory:RDIRectory &lt;directory_name&gt;
        /// 
        /// </summary>
        /// <param name="Directory_Name">
        /// Directory name parameter.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: ""
        /// 
        /// Note:
        /// 
        /// If no directory is specified, the subdirectory with the specified name is deleted in the default directory.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int MMEMoryRemoveDirectory(string Directory_Name)
        {
            int pInvokeResult = PInvoke.MMEMoryRemoveDirectory(this._handle, Directory_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function stores the current instrument setting in the specified file. If 0 is specified, the current instrument setting is stored directly in the specified file. The intermediate instrument settings can be stored using the *SAV command (see the section Common Functions (Commands)).
        /// 
        /// If a number other than 0 is specified, the instrument setting must first be stored in an internal memory with the same number using the common command *SAV.
        /// 
        /// 
        /// Remote-control command(s):
        /// MMEMory:STORe:STATe 0,&lt;file_name&gt;
        /// 
        /// </summary>
        /// <param name="Instrument_Setting">
        /// Instrument setting number.
        /// 
        /// Valid Range: 0 to 10
        /// 
        /// Default Value: 0
        /// 
        /// </param>
        /// <param name="File_Name">
        /// File name parameter.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int MMEMoryStore(int Instrument_Setting, string File_Name)
        {
            int pInvokeResult = PInvoke.MMEMoryStore(this._handle, Instrument_Setting, File_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the value of selected status register.
        /// 
        /// Remote-control command(s):
        /// STATus:OPERation:PTRansition
        /// STATus:OPERation:NTRansition
        /// STATus:OPERation:ENABle
        /// STATus:QUEStionable:PTRansition
        /// STATus:QUEStionable:NTRansition
        /// STATus:QUEStionable:ENABle
        /// </summary>
        /// <param name="Register_Group">
        /// Selects the status register group.
        /// 
        /// Valid Values:
        /// RSSMA_REGISTER_OPERATION    (0) - Operation
        /// RSSMA_REGISTER_QUESTIONABLE (1) - Questionable
        /// 
        /// Default Value: RSSMA_REGISTER_OPERATION (0)
        /// 
        /// </param>
        /// <param name="Register_Type">
        /// Selects the type of status register.
        /// 
        /// Valid Values:
        /// RSSMA_REGISTER_ENABLE (2) - Enable
        /// RSSMA_REGISTER_NTR    (3) - Negative Transition
        /// RSSMA_REGISTER_PTR    (4) - Positive Transition
        /// 
        /// Default Value: RSSMA_REGISTER_ENABLE (2)
        /// 
        /// </param>
        /// <param name="Value">
        /// Sets the value to be set to selected register.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 32767
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int setRegister(int Register_Group, int Register_Type, int Value)
        {
            int pInvokeResult = PInvoke.setRegister(this._handle, Register_Group, Register_Type, Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the value of selected status register.
        /// 
        /// Remote-control command(s):
        /// STATus:OPERation:EVENt?
        /// STATus:OPERation:CONDition?
        /// STATus:OPERation:PTRansition?
        /// STATus:OPERation:NTRansition?
        /// STATus:QUEStionable:EVENt?
        /// STATus:QUEStionable:CONDition?
        /// STATus:QUEStionable:PTRansition?
        /// STATus:QUEStionable:NTRansition?
        /// </summary>
        /// <param name="Register_Group">
        /// Selects the status register group.
        /// 
        /// Valid Values:
        /// RSSMA_REGISTER_OPERATION    (0) - Operation
        /// RSSMA_REGISTER_QUESTIONABLE (1) - Questionable
        /// 
        /// Default Value: RSSMA_REGISTER_OPERATION (0)
        /// 
        /// </param>
        /// <param name="Register_Type">
        /// Selects the type of status register.
        /// 
        /// Valid Values:
        /// RSSMA_REGISTER_COND   (0) - Condition
        /// RSSMA_REGISTER_EVENT  (1) - Event
        /// RSSMA_REGISTER_ENABLE (2) - Enable
        /// RSSMA_REGISTER_NTR    (3) - Negative Transition
        /// RSSMA_REGISTER_PTR    (4) - Positive Transition
        /// 
        /// Default Value: RSSMA_REGISTER_EVENT (1)
        /// </param>
        /// <param name="Value">
        /// Returns the value of selected register.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int getRegister(int Register_Group, int Register_Type, out int Value)
        {
            int pInvokeResult = PInvoke.getRegister(this._handle, Register_Group, Register_Type, out Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function resets the status registers. All PTRansition parts are set to FFFFh (32767), i.e. all transitions from 0 to 1 are detected. All NTRansition parts are set to 0, i.e. a transition from 1 to 0 in a CONDition bit is not detected. The ENABle parts of STATus:OPERation and STATus:QUEStionable are set to 0, i.e. all events in these registers are not passed on.
        /// 
        /// 
        /// Remote-control command(s):
        /// STATus:PRESet
        /// 
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int STATusPRESet()
        {
            int pInvokeResult = PInvoke.STATusPRESet(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function switches the key beep on or off.
        /// 
        /// 
        /// Remote-control command(s):
        /// SYSTem:BEEPer:STATe ON | OFF
        /// 
        /// </summary>
        /// <param name="System_Beeper">
        /// Switches the key beep on or off.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetSYSTemBeeper(bool System_Beeper)
        {
            int pInvokeResult = PInvoke.SetSYSTemBeeper(this._handle, System.Convert.ToUInt16(System_Beeper));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns status of the key beep on or off.
        /// 
        /// 
        /// Remote-control command(s):
        /// SYSTem:BEEPer:STATe?
        /// 
        /// </summary>
        /// <param name="System_Beeper">
        /// Returns status of the key beep on or off.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSYSTemBeeper(out bool System_Beeper)
        {
            ushort System_BeeperAsUShort;
            int pInvokeResult = PInvoke.GetSYSTemBeeper(this._handle, out System_BeeperAsUShort);
            System_Beeper = System.Convert.ToBoolean(System_BeeperAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries all entries in the error queue and then deletes them. Positive error numbers denote instrument-specific errors, and negative error numbers denote error messages defined by SCPI (see Chapter 9). If the error queue is empty, 0 ("No error") is returned. 
        /// 
        /// 
        /// Remote-control command(s):
        /// SYSTem:ERRor:ALL?
        /// 
        /// </summary>
        /// <param name="Array_Size">
        /// Array size of the parameter labeled 'Error Queue'.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 256
        /// 
        /// </param>
        /// <param name="Error_Queue">
        /// Returns all entries in the error queue. Buffer length is limited by the 'Array Size' parameter.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SYSTemErrorQueueAll(int Array_Size, System.Text.StringBuilder Error_Queue)
        {
            int pInvokeResult = PInvoke.SYSTemErrorQueueAll(this._handle, Array_Size, Error_Queue);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries all entries in the error queue and then deletes them. Only the error numbers are returned and not the entire error text. Positive error numbers denote instrument-specific errors, and negative error numbers denote error messages defined by SCPI (see Chapter 9). If the error queue is empty, 0 ("No error") is returned. 
        /// 
        /// 
        /// Remote-control command(s):
        /// SYSTem:ERRor:CODE:ALL?
        /// 
        /// </summary>
        /// <param name="Array_Size">
        /// Array size of the parameter labeled 'Error Queue Code'.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 256
        /// 
        /// </param>
        /// <param name="Error_Queue_Code">
        /// Returns all entries in the error queue. Only the error numbers are returned and not the entire error text. Buffer length is limited by the 'Array Size' parameter.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SYSTemErrorQueueCodeAll(int Array_Size, System.Text.StringBuilder Error_Queue_Code)
        {
            int pInvokeResult = PInvoke.SYSTemErrorQueueCodeAll(this._handle, Array_Size, Error_Queue_Code);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the oldest entry in the error queue and then deletes it. Only the error number is returned and not the entire error text. Positive error numbers denote instrument-specific errors, and negative error numbers denote error messages defined by SCPI (see Chapter 9). If the error queue is empty, 0 is returned. 
        /// 
        /// 
        /// Remote-control command(s):
        /// SYSTem:ERRor:CODE[:NEXT]?
        /// 
        /// </summary>
        /// <param name="Error_Queue_Code_Next">
        /// Returns the oldest entry in the error queue. Only the error number is returned and not the entire error text.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SYSTemErrorQueueCodeNext(out int Error_Queue_Code_Next)
        {
            int pInvokeResult = PInvoke.SYSTemErrorQueueCodeNext(this._handle, out Error_Queue_Code_Next);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the number of entries in the error queue. If the error queue is empty, '0' is returned.
        /// 
        /// 
        /// Remote-control command(s):
        /// SYSTem:ERRor:COUNt?
        /// 
        /// </summary>
        /// <param name="Error_Queue_Count">
        /// Returns the number of entries in the error queue.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SYSTemErrorQueueCount(out int Error_Queue_Count)
        {
            int pInvokeResult = PInvoke.SYSTemErrorQueueCount(this._handle, out Error_Queue_Count);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns a list of all errors existing at the time when the query is started.
        /// This list corresponds to the display on the info page under manual control.
        /// 
        /// Remote-control command(s):
        /// SYSTem:SERRor?
        /// 
        /// </summary>
        /// <param name="Array_Size">
        /// Array size of the parameter labeled 'Error Queue'.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 256
        /// 
        /// </param>
        /// <param name="Error_Queue">
        /// Returns all entries in the error queue. Buffer length is limited by the 'Array Size' parameter.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SYSTemErrorAll(int Array_Size, System.Text.StringBuilder Error_Queue)
        {
            int pInvokeResult = PInvoke.SYSTemErrorAll(this._handle, Array_Size, Error_Queue);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the USB resource.
        /// 
        /// Remote-control command(s):
        /// SYSTem:COMMunicate:USB:RESource?
        /// </summary>
        /// <param name="Array_Size">
        /// Array size of the parameter labeled 'Error Queue'.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 256
        /// 
        /// </param>
        /// <param name="USB_Resource">
        /// This control display USB resource.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SYSTemUSBResource(int Array_Size, System.Text.StringBuilder USB_Resource)
        {
            int pInvokeResult = PInvoke.SYSTemUSBResource(this._handle, Array_Size, USB_Resource);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the visa resource string for the GPIB remote control interface. This string is used for remote control of the instrument.
        /// 
        /// Remote-control command(s):
        /// SYSTem:COMMunicate:GPIB:RESource?
        /// </summary>
        /// <param name="Array_Size">
        /// Array size of the parameter labeled 'Error Queue'.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 256
        /// 
        /// </param>
        /// <param name="GPIB_Resource">
        /// This control display the visa resource string for the GPIB remote control interface. This string is used for remote control of the instrument.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssmf_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SYSTemGPIBResource(int Array_Size, System.Text.StringBuilder GPIB_Resource)
        {
            int pInvokeResult = PInvoke.SYSTemGPIBResource(this._handle, Array_Size, GPIB_Resource);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the visa resource string for the serial remote control interface. This string is used for remote control of the instrument.
        /// 
        /// Remote-control command(s):
        /// SYSTem:COMMunicate:SERial:RESource?
        /// </summary>
        /// <param name="Array_Size">
        /// Array size of the parameter labeled 'Error Queue'.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 256
        /// 
        /// </param>
        /// <param name="Serial_Resource">
        /// This control display the visa resource string for the serial remote control interface. This string is used for remote control of the instrument.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssmf_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SYSTemSerialResource(int Array_Size, System.Text.StringBuilder Serial_Resource)
        {
            int pInvokeResult = PInvoke.SYSTemSerialResource(this._handle, Array_Size, Serial_Resource);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the VISA resource string. This string is used for remote control of the instrument with HiSLIP protocol.
        /// 
        /// Remote-control command(s):
        /// :SYSTem:COMMunicate:HISLip:RESource?
        /// </summary>
        /// <param name="Array_Size">
        /// Array size of the parameter labeled 'Error Queue'.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 256
        /// 
        /// </param>
        /// <param name="HiSLIP_Resource">
        /// This control display the visa resource string for the HISLIP communication protocol.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssmf_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SYSTemHISLIPResource(int Array_Size, System.Text.StringBuilder HiSLIP_Resource)
        {
            int pInvokeResult = PInvoke.SYSTemHISLIPResource(this._handle, Array_Size, HiSLIP_Resource);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the visa resource string for remote control via the Socket interface.
        /// 
        /// Remote-control command(s):
        /// :SYSTem:COMMunicate:SOCKet:RESource?
        /// </summary>
        /// <param name="Array_Size">
        /// Array size of the parameter labeled 'Error Queue'.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 256
        /// 
        /// </param>
        /// <param name="Socket_Resource">
        /// This control display the visa resource string for the socket resource.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssmf_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SYSTemSocketResource(int Array_Size, System.Text.StringBuilder Socket_Resource)
        {
            int pInvokeResult = PInvoke.SYSTemSocketResource(this._handle, Array_Size, Socket_Resource);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the OPT string for selection user defined (SYST:IDEN USER).
        /// 
        /// Remote-control command(s):
        /// SYSTem:ORESponse
        /// </summary>
        /// <param name="User_Defined_Identification">
        /// Sets the OPT string for selection user defined (SYST:IDEN USER).
        /// 
        /// Valid Values:
        /// Not Checked
        /// 
        /// Default Value: ""
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssmf_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SYSTemOptionUserDefined(string User_Defined_Identification)
        {
            int pInvokeResult = PInvoke.SYSTemOptionUserDefined(this._handle, User_Defined_Identification);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the identification string for selection user defined (SYST:IDEN USER).
        /// 
        /// Remote-control command(s):
        /// SYSTem:IRESponse
        /// </summary>
        /// <param name="User_Defined_Identification">
        /// Sets the IDN string for selection user defined (SYST:IDEN USER).
        /// 
        /// Valid Values:
        /// Not Checked
        /// 
        /// Default Value: ""
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssmf_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SYSTemIdentificationUserDefined(string User_Defined_Identification)
        {
            int pInvokeResult = PInvoke.SYSTemIdentificationUserDefined(this._handle, User_Defined_Identification);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the displaing of currently selected level in the header of the instrument.
        /// 
        /// Remote-control command(s):
        /// :DISPlay:ANNotation:AMPLitude
        /// </summary>
        /// <param name="Amplitude">
        /// Enables/disables the display of the currently selected level in the header of the instrument.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssmf_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetSYSTemAnnotationAmplitude(bool Amplitude)
        {
            int pInvokeResult = PInvoke.SetSYSTemAnnotationAmplitude(this._handle, System.Convert.ToUInt16(Amplitude));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the state of displaying currently selected level in the header of the instrument.
        /// 
        /// Remote-control command(s):
        /// :DISPlay:ANNotation:AMPLitude?
        /// </summary>
        /// <param name="Amplitude">
        /// Returns the state of displaying of the currently selected level in the header of the instrument.
        /// 
        /// Returned Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssmf_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSYSTemAnnotationAmplitude(out bool Amplitude)
        {
            ushort AmplitudeAsUShort;
            int pInvokeResult = PInvoke.GetSYSTemAnnotationAmplitude(this._handle, out AmplitudeAsUShort);
            Amplitude = System.Convert.ToBoolean(AmplitudeAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the displaing of currently selected frequency in the header of the instrument.
        /// 
        /// Remote-control command(s):
        /// :DISPlay:ANNotation:FREQuency
        /// 
        /// </summary>
        /// <param name="Frequency">
        /// Enables/disables the display of the currently used frequency in the header of the instrument.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssmf_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetSystemAnnotationFrequency(bool Frequency)
        {
            int pInvokeResult = PInvoke.SetSystemAnnotationFrequency(this._handle, System.Convert.ToUInt16(Frequency));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function the state of displaying currently selected level in the header of the instrument.
        /// 
        /// Remote-control command(s):
        /// :DISPlay:ANNotation:FREQuency?
        /// 
        /// </summary>
        /// <param name="Frequency">
        /// Returns the state of displaying currently selected frequency in the header of the instrument..
        /// 
        /// Returned Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssmf_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSystemAnnotationFrequency(out bool Frequency)
        {
            ushort FrequencyAsUShort;
            int pInvokeResult = PInvoke.GetSystemAnnotationFrequency(this._handle, out FrequencyAsUShort);
            Frequency = System.Convert.ToBoolean(FrequencyAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the displaing of currently selected level and frequency in the header of the instrument.
        /// 
        /// Remote-control command(s):
        /// :DISPlay:ANNotation[:ALL]
        /// 
        /// </summary>
        /// <param name="State">
        /// Enables/disables the display of the currently selected level and frequency in the header of the instrument.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssmf_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetSYSTemAnnotationAll(bool State)
        {
            int pInvokeResult = PInvoke.SetSYSTemAnnotationAll(this._handle, System.Convert.ToUInt16(State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the state of displaying currently selected level and frequency in the header of the instrument.
        /// 
        /// Remote-control command(s):
        /// :DISPlay:ANNotation[:ALL]?
        /// 
        /// </summary>
        /// <param name="State">
        /// Returns the state of displaying currently selected level and frequency in the header of the instrument.
        /// 
        /// Returned Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssmf_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSYSTemAnnotationAll(out bool State)
        {
            ushort StateAsUShort;
            int pInvokeResult = PInvoke.GetSYSTemAnnotationAll(this._handle, out StateAsUShort);
            State = System.Convert.ToBoolean(StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function (Keyboard LOCk) disables the front panel keyboard of the R&amp;S Signal Generator including the  LOCAL  key, or enables it again (OFF).
        /// 
        /// 
        /// Remote-control command(s):
        /// SYSTem:KLOCk ON | OFF
        /// 
        /// </summary>
        /// <param name="Keyboard_Lock">
        /// Disables the front panel keyboard of the R&amp;S Signal Generator including the LOCAL key, or enables it again (OFF).
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetSYSTemKeyboardLock(bool Keyboard_Lock)
        {
            int pInvokeResult = PInvoke.SetSYSTemKeyboardLock(this._handle, System.Convert.ToUInt16(Keyboard_Lock));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns if the front panel keyboard of the R&amp;S Signal Generator including the LOCAL key is disabled or enabled.
        /// 
        /// 
        /// Remote-control command(s):
        /// SYSTem:KLOCk?
        /// 
        /// </summary>
        /// <param name="Keyboard_Lock">
        /// Returns if the front panel keyboard of the R&amp;S Signal Generator including the LOCAL key is disabled or enabled.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSYSTemKeyboardLock(out bool Keyboard_Lock)
        {
            ushort Keyboard_LockAsUShort;
            int pInvokeResult = PInvoke.GetSYSTemKeyboardLock(this._handle, out Keyboard_LockAsUShort);
            Keyboard_Lock = System.Convert.ToBoolean(Keyboard_LockAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function (Display LOCk) disables the manual operation via the display, or enables it again (OFF).
        /// 
        /// 
        /// Remote-control command(s):
        /// SYSTem:DLOCk ON | OFF
        /// </summary>
        /// <param name="Display_Lock">
        /// Disables the front panel keyboard of the R&amp;S Signal Generator including the LOCAL key, or enables it again (OFF).
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetSYSTemDisplayLock(bool Display_Lock)
        {
            int pInvokeResult = PInvoke.SetSYSTemDisplayLock(this._handle, System.Convert.ToUInt16(Display_Lock));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns if the front panel keyboard of the R&amp;S Signal Generator including the LOCAL key is disabled or enabled.
        /// 
        /// 
        /// Remote-control command(s):
        /// SYSTem:DLOCk?
        /// </summary>
        /// <param name="Display_Lock">
        /// Returns if the front dispaly of the R&amp;S Signal Generator including the LOCAL key is disabled or enabled.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSYSTemDisplayLock(out bool Display_Lock)
        {
            ushort Display_LockAsUShort;
            int pInvokeResult = PInvoke.GetSYSTemDisplayLock(this._handle, out Display_LockAsUShort);
            Display_Lock = System.Convert.ToBoolean(Display_LockAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates and deactivates the specified protection level. There are several protection levels which disable specific service functions (authorized personnel of R&amp;S Service Deparments only). These levels are identified by the suffix under PROTect.
        /// 
        /// The respective functions are disabled when the protection level is activated. No password is required for activation. A password must be entered to deactivate the protection level.  The password for the first level is 123456. This protection level can be used to lock-out internal adjustments.
        /// 
        /// 
        /// Remote-control command(s):
        /// SYSTem:PROTect&lt;n&gt;[:STATe] ON | OFF, password
        /// 
        /// </summary>
        /// <param name="Protection_Level">
        /// Specify protection level. There are several protection levels which disable specific service functions (authorized personnel of R&amp;S Service Deparments only).
        /// 
        /// Valid Range: 1 to 5
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Protection">
        /// Activates and deactivates the specified protection level.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <param name="Password">
        /// The password for the specified protection level.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "123456"
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetSYSTemProtect(int Protection_Level, bool Protection, string Password)
        {
            int pInvokeResult = PInvoke.SetSYSTemProtect(this._handle, Protection_Level, System.Convert.ToUInt16(Protection), Password);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the SCPI version with which the instrument complies.
        /// 
        /// 
        /// Remote-control command(s):
        /// SYSTem:VERSion?
        /// 
        /// </summary>
        /// <param name="SCPI_Version">
        /// Returns the SCPI version with which the instrument complies.
        /// 
        /// Notes:
        /// 
        /// (1) The array must contain at least 32 elements ViChar[32].
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSYSTemVersion(System.Text.StringBuilder SCPI_Version)
        {
            int pInvokeResult = PInvoke.GetSYSTemVersion(this._handle, SCPI_Version);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the BIOS version with which the instrument complies.
        /// 
        /// Remote-control command(s):
        /// SYSTem:BIOS:VERSion?
        /// </summary>
        /// <param name="BIOS_Version">
        /// Returns the BIOS version with which the instrument complies.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSYSTemBIOSVersion(System.Text.StringBuilder BIOS_Version)
        {
            int pInvokeResult = PInvoke.GetSYSTemBIOSVersion(this._handle, BIOS_Version);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the system identification.
        /// 
        /// Remote-control command(s):
        /// SYSTem:IDENtification AUTO | USER
        /// </summary>
        /// <param name="Identification">
        /// This control set the system identification.
        /// 
        /// Valid Values:
        /// RSSMA_SYSTEM_IDENTIFICATION_AUTO   (0) - Automatic
        /// RSSMA_SYSTEM_IDENTIFICATION_USER   (1) - User Defined
        /// 
        /// Default Value:
        /// RSSMA_SYSTEM_IDENTIFICATION_AUTO (0)
        /// 
        /// Note(s):
        /// 
        /// (1) Automatic  - the "IDN String" and the "OPT String" are set automatically for the
        /// instrument select with the parameter ":SYSTem:LANGuage".
        /// 
        /// (2) User Defined - Enables the selection of user definable "IDN String" and "OPT String" for the instrument selected with the parameter ":SYSTem:LANGuage".
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetSYSTemIdentification(int Identification)
        {
            int pInvokeResult = PInvoke.SetSYSTemIdentification(this._handle, Identification);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns system identification.
        /// 
        /// Remote-control command(s):
        /// SYSTem:IDENtification?
        /// </summary>
        /// <param name="Identification">
        /// This control displays the system identification.
        /// 
        /// Valid Values:
        /// RSSMA_SYSTEM_IDENTIFICATION_AUTO   (0) - Automatic
        /// RSSMA_SYSTEM_IDENTIFICATION_USER   (1) - User Defined
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSYSTemIdentification(out int Identification)
        {
            int pInvokeResult = PInvoke.GetSYSTemIdentification(this._handle, out Identification);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns if the startup of the instrument is completed.
        /// 
        /// Remote-control command(s):
        /// SYSTem:STARtup:COMPlete?
        /// </summary>
        /// <param name="Startup_Complete">
        /// This control displays the startup of the instrument is completed.
        /// 
        /// Valid Values:
        /// RSSMA_SYSTEM_INCOMPELTE (0) - Startup Incomplete
        /// RSSMA_SYSTEM_COMPLETE   (1) - Startup Complete
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSYSTemStartupStatus(out int Startup_Complete)
        {
            int pInvokeResult = PInvoke.GetSYSTemStartupStatus(this._handle, out Startup_Complete);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the ip address.
        /// 
        /// Remote-control command(s):
        /// SYSTem:COMMunicate:NETWork:IPADdress
        /// </summary>
        /// <param name="IP_Address">
        /// This control sets the IP adress.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: "192.168.0.1"
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetSYSTemNetworkIPAddress(string IP_Address)
        {
            int pInvokeResult = PInvoke.SetSYSTemNetworkIPAddress(this._handle, IP_Address);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the IP address.
        /// 
        /// Remote-control command(s):
        /// SYSTem:COMMunicate:NETWork:IPADdress?
        /// </summary>
        /// <param name="Array_Size">
        /// Array size of the parameter labeled 'IP Address'.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 256
        /// 
        /// </param>
        /// <param name="IP_Address">
        /// This control displays the IP address.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSYSTemNetworkIPAddress(int Array_Size, System.Text.StringBuilder IP_Address)
        {
            int pInvokeResult = PInvoke.GetSYSTemNetworkIPAddress(this._handle, Array_Size, IP_Address);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the subnet mask.
        /// 
        /// Remote-control command(s):
        /// SYSTem:COMMunicate:NETWork:IPADdress:SUBNet:MASK
        /// </summary>
        /// <param name="IP_Address_Subnet_Mask">
        /// This control sets the IP address subnet mask.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: "255.255.255.0"
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetSYSTemNetworkIPAddressSubnetMask(string IP_Address_Subnet_Mask)
        {
            int pInvokeResult = PInvoke.SetSYSTemNetworkIPAddressSubnetMask(this._handle, IP_Address_Subnet_Mask);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the IP address subnet mask.
        /// 
        /// Remote-control command(s):
        /// SYSTem:COMMunicate:NETWork:IPADdress:SUBNet:MASK?
        /// </summary>
        /// <param name="Array_Size">
        /// Array size of the parameter labeled 'IP Address Subnet Mask'.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 256
        /// 
        /// </param>
        /// <param name="IP_Address_Subnet_Mask">
        /// This control displays the IP address subnet mask.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSYSTemNetworkIPAddressSubnetMask(int Array_Size, System.Text.StringBuilder IP_Address_Subnet_Mask)
        {
            int pInvokeResult = PInvoke.GetSYSTemNetworkIPAddressSubnetMask(this._handle, Array_Size, IP_Address_Subnet_Mask);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the ip adress gateway.
        /// 
        /// Remote-control command(s):
        /// SYSTem:COMMunicate:NETWork:IPADdress:GATeway
        /// </summary>
        /// <param name="IP_Address_Gateway">
        /// This control sets the IP adress gateway.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: "192.168.0.1"
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetSYSTemNetworkIPAddressGateway(string IP_Address_Gateway)
        {
            int pInvokeResult = PInvoke.SetSYSTemNetworkIPAddressGateway(this._handle, IP_Address_Gateway);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the gateway.
        /// 
        /// Remote-control command(s):
        /// SYSTem:COMMunicate:NETWork:IPADdress:GATeway?
        /// </summary>
        /// <param name="Array_Size">
        /// Array size of the parameter labeled 'IP Address Gateway'.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 256
        /// 
        /// </param>
        /// <param name="IP_Address_Gateway">
        /// This control displays the IP adress gateway.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSYSTemNetworkIPAddressGateway(int Array_Size, System.Text.StringBuilder IP_Address_Gateway)
        {
            int pInvokeResult = PInvoke.GetSYSTemNetworkIPAddressGateway(this._handle, Array_Size, IP_Address_Gateway);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the IP address mode.
        /// 
        /// Remote-control command(s):
        /// SYSTem:COMMunicate:NETWork:IPADdress:MODE STATic | P2P | AUTO
        /// </summary>
        /// <param name="IP_Address_Mode">
        /// This control set the IP address mode.
        /// 
        /// Valid Values:
        /// RSSMA_SYSTEM_COMMUNICATE_IP_MODE_STATIC (0) - Static
        /// RSSMA_SYSTEM_COMMUNICATE_IP_MODE_P2P    (1) - Reserved
        /// RSSMA_SYSTEM_COMMUNICATE_IP_MODE_AUTO   (2) - Auto
        /// 
        /// Default Value:
        /// RSSMA_SYSTEM_COMMUNICATE_IP_MODE_AUTO (2)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetSYSTemNetworkIPAddressMode(int IP_Address_Mode)
        {
            int pInvokeResult = PInvoke.SetSYSTemNetworkIPAddressMode(this._handle, IP_Address_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the IP address mode.
        /// 
        /// Remote-control command(s):
        /// SYSTem:COMMunicate:NETWork:IPADdress:MODE?
        /// </summary>
        /// <param name="IP_Address_Mode">
        /// This control displays the IP address mode.
        /// 
        /// Valid Values:
        /// RSSMA_SYSTEM_COMMUNICATE_IP_MODE_STATIC (0) - Static
        /// RSSMA_SYSTEM_COMMUNICATE_IP_MODE_P2P    (1) - Reserved
        /// RSSMA_SYSTEM_COMMUNICATE_IP_MODE_AUTO   (2) - Auto
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSYSTemNetworkIPAddressMode(out int IP_Address_Mode)
        {
            int pInvokeResult = PInvoke.GetSYSTemNetworkIPAddressMode(this._handle, out IP_Address_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the common domain.
        /// 
        /// Remote-control command(s):
        /// SYSTem:COMMunicate:NETWork:COMMon:DOMain
        /// </summary>
        /// <param name="Common_Domain">
        /// This control sets the common domain.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: "local"
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetSYSTemNetworkCommonDomain(string Common_Domain)
        {
            int pInvokeResult = PInvoke.SetSYSTemNetworkCommonDomain(this._handle, Common_Domain);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the common domain.
        /// 
        /// Remote-control command(s):
        /// SYSTem:COMMunicate:NETWork:COMMon:DOMain?
        /// </summary>
        /// <param name="Array_Size">
        /// Array size of the parameter labeled 'Common Domain'.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 256
        /// 
        /// </param>
        /// <param name="Common_Domain">
        /// This control displays the common domain.
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSYSTemNetworkCommonDomain(int Array_Size, System.Text.StringBuilder Common_Domain)
        {
            int pInvokeResult = PInvoke.GetSYSTemNetworkCommonDomain(this._handle, Array_Size, Common_Domain);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the individual computer name of the R&amp;S SMA.
        /// 
        /// Note(s):
        /// 
        /// (1) The entry is only activated after sending command SYST:COMM:NETW:COMM:SET 
        /// 
        /// (2) The hostname can only be changed after deactivating protection level 1 (command SYSTem:PROTect&lt;n&gt;:STATe OFF, password) - function rssma_SetSYSTemProtect.
        /// 
        /// Remote-control command(s):
        /// SYSTem:COMMunicate:NETWork[:COMMon]:HOSTname 'string'
        /// </summary>
        /// <param name="Common_Hostname">
        /// This control sets the individual computer name of the R&amp;S SMA.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: "SMA"
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetSYSTemNetworkCommonHostname(string Common_Hostname)
        {
            int pInvokeResult = PInvoke.SetSYSTemNetworkCommonHostname(this._handle, Common_Hostname);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the individual computer name of the R&amp;S SMA.
        /// 
        /// Remote-control command(s):
        /// SYSTem:COMMunicate:NETWork[:COMMon]:HOSTname?
        /// </summary>
        /// <param name="Array_Size">
        /// Array size of the parameter labeled 'Common Hostname'.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 256
        /// 
        /// </param>
        /// <param name="Common_Hostname">
        /// This control gets the individual computer name of the R&amp;S SMA.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSYSTemNetworkCommonHostname(int Array_Size, System.Text.StringBuilder Common_Hostname)
        {
            int pInvokeResult = PInvoke.GetSYSTemNetworkCommonHostname(this._handle, Array_Size, Common_Hostname);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the domain.
        /// 
        /// Remote-control command(s):
        /// SYSTem:COMMunicate:NETWork:DOMain
        /// </summary>
        /// <param name="Domain">
        /// This control sets the domain.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: "local"
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetSYSTemNetworkDomain(string Domain)
        {
            int pInvokeResult = PInvoke.SetSYSTemNetworkDomain(this._handle, Domain);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the domain.
        /// 
        /// Remote-control command(s):
        /// SYSTem:COMMunicate:NETWork:DOMain?
        /// </summary>
        /// <param name="Array_Size">
        /// Array size of the parameter labeled 'Domain'.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 256
        /// 
        /// </param>
        /// <param name="Domain">
        /// This control displays the domain.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSYSTemNetworkDomain(int Array_Size, System.Text.StringBuilder Domain)
        {
            int pInvokeResult = PInvoke.GetSYSTemNetworkDomain(this._handle, Array_Size, Domain);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the workgroup name.
        /// 
        /// Remote-control command(s):
        /// :SYSTem:COMMunicate:NETWork[:COMMon]:WORKgroup?
        /// </summary>
        /// <param name="Array_Size">
        /// Array size of the parameter labeled 'Common Domain'.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 256
        /// 
        /// </param>
        /// <param name="Workgroup_Name">
        /// This control displays the workgroup name.
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSYSTemNetworkWorkgroup(int Array_Size, System.Text.StringBuilder Workgroup_Name)
        {
            int pInvokeResult = PInvoke.GetSYSTemNetworkWorkgroup(this._handle, Array_Size, Workgroup_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the gateway.
        /// 
        /// Remote-control command(s):
        /// SYSTem:COMMunicate:NETWork:GATeway
        /// </summary>
        /// <param name="Gateway">
        /// This control sets the gateway.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: "192.168.0.1"
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetSYSTemNetworkGateway(string Gateway)
        {
            int pInvokeResult = PInvoke.SetSYSTemNetworkGateway(this._handle, Gateway);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the gateway.
        /// 
        /// Remote-control command(s):
        /// SYSTem:COMMunicate:NETWork:GATeway?
        /// </summary>
        /// <param name="Array_Size">
        /// Array size of the parameter labeled 'Gateway'.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 256
        /// 
        /// </param>
        /// <param name="Gateway">
        /// This control displays the gateway.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSYSTemNetworkGateway(int Array_Size, System.Text.StringBuilder Gateway)
        {
            int pInvokeResult = PInvoke.GetSYSTemNetworkGateway(this._handle, Array_Size, Gateway);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the resource string.
        /// 
        /// Remote-control command(s):
        /// SYSTem:COMMunicate:NETWork:RESource?
        /// </summary>
        /// <param name="Array_Size">
        /// Array size of the parameter labeled 'Resource'.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 256
        /// 
        /// </param>
        /// <param name="Resource">
        /// This control displays the resource string.
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSYSTemNetworkResource(int Array_Size, System.Text.StringBuilder Resource)
        {
            int pInvokeResult = PInvoke.GetSYSTemNetworkResource(this._handle, Array_Size, Resource);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the subnet mask.
        /// 
        /// Remote-control command(s):
        /// SYSTem:COMMunicate:NETWork:SUBNet:MASK
        /// </summary>
        /// <param name="Subnet_Mask">
        /// This control sets the subnet mask.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: "255.255.255.0"
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetSYSTemNetworkSubnetMask(string Subnet_Mask)
        {
            int pInvokeResult = PInvoke.SetSYSTemNetworkSubnetMask(this._handle, Subnet_Mask);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the subnet mask.
        /// 
        /// Remote-control command(s):
        /// SYSTem:COMMunicate:NETWork:SUBNet:MASK?
        /// </summary>
        /// <param name="Array_Size">
        /// Array size of the parameter labeled 'Subnet Mask'.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 256
        /// 
        /// </param>
        /// <param name="Subnet_Mask">
        /// This control displays the subnet mask.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSYSTemNetworkSubnetMask(int Array_Size, System.Text.StringBuilder Subnet_Mask)
        {
            int pInvokeResult = PInvoke.GetSYSTemNetworkSubnetMask(this._handle, Array_Size, Subnet_Mask);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the MAC Address.
        /// 
        /// Remote-control command(s):
        /// SYSTem:COMMunicate:NETWork:MACaddress?
        /// </summary>
        /// <param name="Array_Size">
        /// Array size of the parameter labeled 'MAC Address'.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 256
        /// 
        /// </param>
        /// <param name="MAC_Address">
        /// This control displays the Mac address.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSYSTemNetworkMACAddress(int Array_Size, System.Text.StringBuilder MAC_Address)
        {
            int pInvokeResult = PInvoke.GetSYSTemNetworkMACAddress(this._handle, Array_Size, MAC_Address);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function retrieves the current network settings. They can be queried with the corresponding functions.
        /// 
        /// Remote-control command(s):
        /// SYSTem:COMMunicate:NETWork:GET
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSYSTemNetwork()
        {
            int pInvokeResult = PInvoke.GetSYSTemNetwork(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the active slope of an externally applied trigger signal at the INST TRIG inputs (BNC connector at the rear of the instrument). The setting is effective for both inputs at the same time.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]INPut:TRIGger:SLOPe POSitive | NEGative
        /// 
        /// </summary>
        /// <param name="Input_Trigger_Slope">
        /// Sets the active slope of an externally applied trigger signal at the INST TRIG inputs (BNC connector at the rear of the instrument). The setting is effective for both inputs at the same time.
        /// 
        /// Valid Values:
        /// RSSMA_INPUT_TRIGGER_SLOPE_NEGATIVE (0) - Negative
        /// RSSMA_INPUT_TRIGGER_SLOPE_POSITIVE (1) - Positive
        /// 
        /// Default Value: RSSMA_INPUT_TRIGGER_SLOPE_POSITIVE (1)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetInstrumentTriggerInputSlope(int Input_Trigger_Slope)
        {
            int pInvokeResult = PInvoke.SetInstrumentTriggerInputSlope(this._handle, Input_Trigger_Slope);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the active slope of an externally applied trigger signal at the INST TRIG inputs (BNC connector at the rear of the instrument). The setting is effective for both inputs at the same time.
        /// 
        /// Remote-control command(s):
        /// [SOURce:]INPut:TRIGger:SLOPe?
        /// 
        /// </summary>
        /// <param name="Input_Trigger_Slope">
        /// Returns the active slope of an externally applied trigger signal at the INST TRIG inputs (BNC connector at the rear of the instrument). The setting is effective for both inputs at the same time.
        /// 
        /// Valid Values:
        /// RSSMA_INPUT_TRIGGER_SLOPE_NEGATIVE (0) - Negative
        /// RSSMA_INPUT_TRIGGER_SLOPE_POSITIVE (1) - Positive
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetInstrumentTriggerInputSlope(out int Input_Trigger_Slope)
        {
            int pInvokeResult = PInvoke.GetInstrumentTriggerInputSlope(this._handle, out Input_Trigger_Slope);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the trigger source for all sweeps. 
        /// 
        /// The names of the parameters correspond directly to the various settings under manual control. SCPI uses other names for the parameters; these names are also accepted by the instrument. The SCPI names should be used if compatibility is an important consideration.
        /// 
        /// Remote-control command(s):
        /// TRIGger:SWEep:SOURce AUTO | IMMediate | SINGle | EXTernal | BUS
        /// </summary>
        /// <param name="Trigger_Source_All_Sweeps">
        /// Sets the trigger source for all sweeps. 
        /// 
        /// Valid Values:
        /// RSSMA_TRIG_SOURCE_SWEEP_AUTO      (0) - Auto
        /// RSSMA_TRIG_SOURCE_SWEEP_IMMEDIATE (1) - Immediate
        /// RSSMA_TRIG_SOURCE_SWEEP_SINGLE    (2) - Single
        /// RSSMA_TRIG_SOURCE_SWEEP_EXTERNAL  (3) - External
        /// RSSMA_TRIG_SOURCE_SWEEP_BUS       (4) - Bus
        /// RSSMA_TRIG_SOURCE_SWEEP_EAUTO     (5) - External Auto
        /// 
        /// Default Value: RSSMA_TRIG_SOURCE_SWEEP_SINGLE (2)
        /// 
        /// Notes:
        /// 
        /// (1) Auto | Immediate:
        /// The trigger is free-running, i.e. the trigger condition is fulfilled continuously. As soon as one sweep is finished, the next sweep is started. 
        /// 
        /// (2) Single:
        /// The sweep is triggered by the IEC/IEEE-bus commands :SOURce:SWEep:POWer|FREQuency:EXEC or *TRG or TRIGger:PSWeep|FSWeep:IMMediate. If :SOURce:SWEep:POWer:MODE is set to STEP, one step is executed. If :SOURce:SWEep:POWer:MODE is set to AUTO, one complete sweep is executed.
        /// 
        /// (3) External:
        /// The sweep is triggered externally via the TRIGGER connectors.
        /// 
        /// (4) External Auto:
        /// The sweep is triggered externally via the INST TRIG connector.
        /// As soon as one sweep is finished, the next sweep is started. A
        /// second trigger event stops the sweep at the current frequency, a
        /// third trigger event starts the trigger at the start frequency, and so on.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int TriggerSourceAllSweeps(int Trigger_Source_All_Sweeps)
        {
            int pInvokeResult = PInvoke.TriggerSourceAllSweeps(this._handle, Trigger_Source_All_Sweeps);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function starts the sweeps which is activated. The sweep to be executed depends on the respective MODE setting (:SOUR:SWEep:POW|FREQ:MODE and :SOUR:LFO:SWEep[:FREQ]:MODE). This function corresponds to the manual-control command
        /// Execute Trigger.
        /// 
        /// 
        /// Remote-control command(s):
        /// TRIGger[:SWEep][:IMMediate]
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int TriggerAllSweeps()
        {
            int pInvokeResult = PInvoke.TriggerAllSweeps(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function immediately starts an RF frequency sweep. The sweep to be executed depends on the respective MODE setting (:SOURce:SWEep:FREQuency:MODE SING). This function corresponds to the manual-control command Execute Trigger. 
        /// 
        /// Remote-control command(s):
        /// TRIGger:FSWeep[:IMMediate]
        /// 
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int TriggerRFFrequencySweep()
        {
            int pInvokeResult = PInvoke.TriggerRFFrequencySweep(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function immediately starts an RF level sweep. The sweep to be executed depends on the set sweep mode (:SOURce:SWEep:POWer:MODE). This function corresponds to the manual-control command Execute Trigger. 
        /// 
        /// 
        /// Remote-control command(s):
        /// TRIGger:PSWeep[:IMMediate]
        /// 
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int TriggerRFLevelSweep()
        {
            int pInvokeResult = PInvoke.TriggerRFLevelSweep(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function immediately starts the processing of a list in LIST mode. It corresponds to the manual-control command Execute Trigger.
        /// 
        /// 
        /// Remote-control command(s):
        /// TRIGger:LIST[:IMMediate]
        /// 
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int TriggerListMode()
        {
            int pInvokeResult = PInvoke.TriggerListMode(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the default unit for angles. It is valid for all commands which determine angle values. It does not influence the manual control parameter unit and the display.
        /// 
        /// Remote-control command(s):
        /// UNIT:ANGle DEG | RAD
        /// </summary>
        /// <param name="Angle_Units">
        /// Sets the default unit for angles. It is valid for all commands which determine angle values. It does not influence the manual control parameter unit and the display.
        /// 
        /// Valid Values:
        /// RSSMA_UNIT_ANGLE_DEG (0) - Degrees
        /// RSSMA_UNIT_ANGLE_RAD (1) - Radius
        /// 
        /// Default Value: RSSMA_UNIT_ANGLE_RAD (1)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAngleUnits(int Angle_Units)
        {
            int pInvokeResult = PInvoke.SetAngleUnits(this._handle, Angle_Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the unit for angles. 
        /// 
        /// Remote-control command(s):
        /// UNIT:ANGle?
        /// </summary>
        /// <param name="Angle_Units">
        /// Gets the unit for angles. 
        /// 
        /// Valid Values:
        /// RSSMA_UNIT_ANGLE_DEG (0) - Degrees
        /// RSSMA_UNIT_ANGLE_RAD (1) - Radius
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAngleUnits(out int Angle_Units)
        {
            int pInvokeResult = PInvoke.GetAngleUnits(this._handle, out Angle_Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the default unit for power. It is valid for all commands which determine power values. It does not influence the manual control parameter unit and the display.
        /// 
        /// Remote-control command(s):
        /// UNIT:POWer V | DBM
        /// </summary>
        /// <param name="Power_Units">
        /// Sets the default unit for power. It is valid for all commands which determine power values. It does not influence the manual control parameter unit and the display.
        /// 
        /// Valid Values:
        /// RSSMA_UNIT_POWER_V   (0) - V
        /// RSSMA_UNIT_POWER_DBM (1) - dBm
        /// 
        /// Default Value: RSSMA_UNIT_POWER_DBM (1)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerUnits(int Power_Units)
        {
            int pInvokeResult = PInvoke.SetPowerUnits(this._handle, Power_Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the unit for power.
        /// 
        /// Remote-control command(s):
        /// UNIT:POWer?
        /// </summary>
        /// <param name="Power_Units">
        /// Gets the unit for power.
        /// 
        /// Valid Values:
        /// RSSMA_UNIT_POWER_V   (0) - V
        /// RSSMA_UNIT_POWER_DBM (1) - dBm
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerUnits(out int Power_Units)
        {
            int pInvokeResult = PInvoke.GetPowerUnits(this._handle, out Power_Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the default unit for velocity. It is valid for all commands which determine velocity values. It does not influence the manual control parameter unit and the display.
        /// 
        /// Remote-control command(s):
        /// UNIT:VELocity  
        /// </summary>
        /// <param name="Velocity_Units">
        /// Sets the default unit for velocity. It is valid for all commands which determine velocity values. It does not influence the manual control parameter unit and the display.
        /// 
        /// Valid Values:
        /// RSSMA_UNIT_VELOCITY_MPS (0) - MPS
        /// RSSMA_UNIT_VELOCITY_KMH (1) - KMH
        /// RSSMA_UNIT_VELOCITY_MPH (2) - MPH
        /// 
        /// Default Value: RSSMA_UNIT_VELOCITY_MPS (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetVelocityUnits(int Velocity_Units)
        {
            int pInvokeResult = PInvoke.SetVelocityUnits(this._handle, Velocity_Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the default unit for velocity. It is valid for all commands which determine velocity values. It does not influence the manual control parameter unit and the display.
        /// 
        /// Remote-control command(s):
        /// UNIT:VELocity?
        /// </summary>
        /// <param name="Velocity_Units">
        /// Displays the default unit for velocity. 
        /// 
        /// Valid Values:
        /// RSSMA_UNIT_VELOCITY_MPS (0) - MPS
        /// RSSMA_UNIT_VELOCITY_KMH (1) - KMH
        /// RSSMA_UNIT_VELOCITY_MPH (2) - MPH
        /// 
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetVelocityUnits(out int Velocity_Units)
        {
            int pInvokeResult = PInvoke.GetVelocityUnits(this._handle, out Velocity_Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function is used to read data from the instrument and write it to a user specified file on the host computer.
        /// 
        /// Remote-control command(s):
        /// MMEMory:DATA? &lt;file_name&gt;
        /// 
        /// </summary>
        /// <param name="Source">
        /// This control selects file for the data transfer from instrument to control computer.
        /// 
        /// Valid Range: not tested
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <param name="Destination">
        /// This control defines destination file to which the data transfer from instrument to control computer applies.
        /// 
        /// Valid Range: not tested
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int readToFile(string Source, string Destination)
        {
            int pInvokeResult = PInvoke.readToFile(this._handle, Source, Destination);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function is used to read data from the host computer and write it to a user specified file in the instrument.
        /// 
        /// 
        /// Remote-control command(s):
        /// MMEMory:DATA &lt;file_name&gt;
        /// 
        /// </summary>
        /// <param name="Source">
        /// This control selects file for the data transfer from control computer to instrument.
        /// 
        /// Valid Range: not tested
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <param name="Destination">
        /// This control defines destination file to which the data transfer from control computer to instrument applies.
        /// 
        /// Valid Range: not tested
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int writeFromFile(string Source, string Destination)
        {
            int pInvokeResult = PInvoke.writeFromFile(this._handle, Source, Destination);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function switches state checking of the instrument (reading of the Standard Event Register and checking it for error) status subsystem. Driver functions are using state checking which is by default enabled.
        /// 
        /// Note:
        /// 
        /// (1) In debug mode enable state checking.
        /// 
        /// (2) For better bus throughput and instruments performance disable state checking.
        /// 
        /// (3) When state checking is disabled driver does not check if correct instrument model or option is used with each of the functions. This might cause unexpected behaviour of the instrument.
        /// 
        /// </summary>
        /// <param name="State_Checking">
        /// This control switches instrument state checking On or Off.
        /// 
        /// Valid Range:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On (Default Value)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// BFFC0002  Parameter 2 (State Checking) out of range.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int errorCheckState(bool State_Checking)
        {
            int pInvokeResult = PInvoke.errorCheckState(this._handle, System.Convert.ToUInt16(State_Checking));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function switches option checking of the instrument.
        /// </summary>
        /// <param name="State_Checking">
        /// This control switches instrument and option checking On or Off.
        /// 
        /// Valid Range:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On (Default Value)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// BFFC0002  Parameter 2 (State Checking) out of range.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int optionCheckState(bool State_Checking)
        {
            int pInvokeResult = PInvoke.optionCheckState(this._handle, System.Convert.ToUInt16(State_Checking));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function switches range checking of the instrument.
        /// </summary>
        /// <param name="Range_Checking">
        /// This control switches range checking On or Off.
        /// 
        /// Valid Range:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On (Default Value)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// BFFC0002  Parameter 2 (State Checking) out of range.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int rangeCheckState(bool Range_Checking)
        {
            int pInvokeResult = PInvoke.rangeCheckState(this._handle, System.Convert.ToUInt16(Range_Checking));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function writes commands and queries to the instrument to modify parameters and query device settings.
        /// </summary>
        /// <param name="Write_Buffer">
        /// The user can use this control to send common commands and queries to the instrument. This control can also be used to write any valid command to the instrument.
        /// 
        /// Default Value:  "*RST"
        /// 
        /// Notes:
        /// 
        /// (1) This function or query to be sent to the instrument may be a literal enclosed in double quotes i.e. "*RST" or may be contained in a variable of type string.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int writeInstrData(string Write_Buffer)
        {
            int pInvokeResult = PInvoke.writeInstrData(this._handle, Write_Buffer);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function reads data from the instrument's output buffer and returns it to the specified variable in memory.
        /// 
        /// Notes:
        /// 
        /// (1) Because the instrument may return both numeric and text data in response to queries this function returns the data in string format.
        /// 
        /// (2) If valid data is not available at the instrument's output buffer when this function is called the instrument will hang up and the function will not return until it times out.  If the time-out is disabled this function will hang indefinitely and it may be necessary to reboot the computer to break out.
        /// </summary>
        /// <param name="Number_Bytes_To_Read">
        /// The number of bytes specified by this control should be greater than or equal to the number of bytes which are to be read from the instrument. If the actual number of bytes to be read is greater than the number this control specifies then multiple reads will be required to empty the instrument's output buffer.
        /// 
        /// If the instrument's output buffer is not emptied the instrument may return invalid data when future reads are performed.
        /// 
        /// Default Value:  50 (See NOTE 2)
        /// 
        /// Notes:
        /// 
        /// (1) If NO DATA is available at the instrument's output buffer when this function is called the instrument will hang up and the function will not return until it times out.  If the time-out is disabled, this function will hang indefinitely and it may be necessary to reboot the computer.
        /// 
        /// (2) If the number of bytes expected is greater than 50 the value of this control may be increased. If the actual number of bytes read is larger than the declared size of the read buffer a run-time error will be generated.
        /// 
        /// </param>
        /// <param name="Read_Buffer">
        /// The incoming data from the instrument is placed into this variable.
        /// 
        /// Notes:
        /// 
        /// (1) Because the instrument may return both numeric and text data in response to queries this function returns the data in string format.
        /// 
        /// (2) This function does not overwrite any old data left in the string variable from the last time the function was called. String data in LabWindows/CVI is terminated with an ASCII null(0x0) and string manipulation functions will only recognize data before the ASCII null.
        /// 
        /// (3) The declared size of the string variable must be greater than the actual number of bytes read from the instrument if it is not a run-time error will be generated.
        /// 
        /// </param>
        /// <param name="NumBytes_Read">
        /// This variable contains the actual number of bytes read from the instrument. This is the value which is returned by the read function.
        /// 
        /// Notes:
        /// 
        /// (1) If the actual number of bytes read is less than the number of bytes specified in the Number Bytes To Read control then the output buffer has probably been emptied. If the read function fails and the number of bytes read is 0, the most probable cause for the failure is there was no data available at the instrument's output buffer.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int readInstrData(int Number_Bytes_To_Read, System.Text.StringBuilder Read_Buffer, out int NumBytes_Read)
        {
            int pInvokeResult = PInvoke.readInstrData(this._handle, Number_Bytes_To_Read, Read_Buffer, out NumBytes_Read);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function presets all parameters which are not related to the signal path. This includes presetting the LF generator.
        /// 
        /// Remote-control command(s):
        /// DEVice:PRESet  
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int DevicePreset()
        {
            int pInvokeResult = PInvoke.DevicePreset(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// RESET resets the instrument to a defined default state. The function has the same effect as pressing the PRESET key.
        /// 
        /// Remote-control command(s):
        /// *RST
        /// *CLS
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int reset()
        {
            int pInvokeResult = PInvoke.reset(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function runs the instrument's self test routine and returns the test result(s).
        /// 
        /// </summary>
        /// <param name="Self_Test_Result">
        /// This control contains the value returned from the instrument self test. Zero means success. For any other code, see the device's operator's manual.
        /// 
        /// </param>
        /// <param name="Self_Test_Message">
        /// This control contains the string returned from the self test. See the device's operation manual for an explanation of the string's contents.
        /// 
        /// Notes:
        /// 
        /// (1) The array must contain at least 256 elements ViChar[256].
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// BFFC0002  Parameter 2 (Self-Test Result) NULL pointer.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int self_test(out short Self_Test_Result, System.Text.StringBuilder Self_Test_Message)
        {
            int pInvokeResult = PInvoke.self_test(this._handle, out Self_Test_Result, Self_Test_Message);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function reads an error code from the instrument's error queue.
        /// 
        /// </summary>
        /// <param name="Error_Code">
        /// This control returns the error code read from the instrument's error queue.
        /// 
        /// </param>
        /// <param name="Error_Message">
        /// This control returns the error message string read from the instrument's error message queue.
        /// 
        /// Notes:
        /// 
        /// (1) The array must contain at least 256 elements ViChar[256].
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// BFFC0002  Parameter 2 (Error Code) NULL pointer.
        /// BFFC0003  Parameter 3 (Error Message) NULL pointer.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int error_query(out int Error_Code, System.Text.StringBuilder Error_Message)
        {
            int pInvokeResult = PInvoke.error_query(this._handle, out Error_Code, Error_Message);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the revision numbers of the instrument driver and instrument firmware, and tells the user with which  instrument firmware this revision of the driver is compatible.
        /// 
        /// </summary>
        /// <param name="Instrument_Driver_Revision">
        /// This control returns the Instrument Driver Software Revision.
        /// 
        /// Notes:
        /// 
        /// (1) The array must contain at least 256 elements ViChar[256].
        /// 
        /// </param>
        /// <param name="Firmware_Revision">
        /// This control returns the Instrument Firmware Revision.
        /// 
        /// Notes:
        /// 
        /// (1) The array must contain at least 256 elements ViChar[256].
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int revision_query(System.Text.StringBuilder Instrument_Driver_Revision, System.Text.StringBuilder Firmware_Revision)
        {
            int pInvokeResult = PInvoke.revision_query(this._handle, Instrument_Driver_Revision, Firmware_Revision);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function suspends the program for the selected number of second.
        /// </summary>
        /// <param name="Seconds">
        /// This control sets the number of seconds.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 0.0 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssma_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int delay(double Seconds)
        {
            int pInvokeResult = PInvoke.delay(this._handle, Seconds);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        public void Dispose()
        {
            this.Dispose(true);
            System.GC.SuppressFinalize(this);
        }

        private void Dispose(bool disposing)
        {
            if ((this._disposed == false))
            {
                PInvoke.close(this._handle);
                this._handle = new System.Runtime.InteropServices.HandleRef(null, System.IntPtr.Zero);
            }
            this._disposed = true;
        }

        private class PInvoke
        {

            [DllImport("rssma_64.dll", EntryPoint = "rssma_init", CallingConvention = CallingConvention.StdCall)]
            public static extern int init(string Resource_Name, ushort ID_Query, ushort Reset_Device, out System.IntPtr Instrument_Handle);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_confLFFreqSweep", CallingConvention = CallingConvention.StdCall)]
            public static extern int confLFFreqSweep(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Mode, double Start_Frequency, double Stop_Frequency, int Spacing, double Step, double Dwell_Time);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_LFSweepTrigger", CallingConvention = CallingConvention.StdCall)]
            public static extern int LFSweepTrigger(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetLFSweepMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetLFSweepMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Mode);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetLFSweepSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetLFSweepSource(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Source);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetLFSweepSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetLFSweepSource(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Source);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetLFSweepStartFreq", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetLFSweepStartFreq(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Start_Frequency);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetLFSweepStartFreq", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetLFSweepStartFreq(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Start_Frequency);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetLFSweepStopFreq", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetLFSweepStopFreq(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Stop_Frequency);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetLFSweepStopFreq", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetLFSweepStopFreq(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Stop_Frequency);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetLFSweepSpacing", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetLFSweepSpacing(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Spacing);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetLFSweepSpacing", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetLFSweepSpacing(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Spacing);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetLFSweepStepLin", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetLFSweepStepLin(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Step_Lin);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetLFSweepStepLin", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetLFSweepStepLin(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Step_Lin);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetLFSweepStepLog", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetLFSweepStepLog(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Step_Log);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetLFSweepStepLog", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetLFSweepStepLog(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Step_Log);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetLFSweepDwellTime", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetLFSweepDwellTime(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Dwell_Time);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetLFSweepDwellTime", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetLFSweepDwellTime(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Dwell_Time);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetLFSweepManualStep", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetLFSweepManualStep(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Manual_LF_Sweep);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetLFSweepManualStep", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetLFSweepManualStep(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Manual_LF_Sweep);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetLFSweepPoints", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetLFSweepPoints(System.Runtime.InteropServices.HandleRef Instrument_Handle, int LF_Sweep_Points);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetLFSweepPoints", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetLFSweepPoints(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int LF_Sweep_Points);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetLFSweepShape", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetLFSweepShape(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Shape);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetLFSweepShape", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetLFSweepShape(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Shape);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_confLFFreq", CallingConvention = CallingConvention.StdCall)]
            public static extern int confLFFreq(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort State, int Channel, double LFGen_Frequency, double LFGen_Voltage);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetLFOutputState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetLFOutputState(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort LF_Output_State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetLFOutputState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetLFOutputState(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort LF_Output_State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetLFGenSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetLFGenSource(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Source);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetLFGenSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetLFGenSource(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Source);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetLFGenVoltage", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetLFGenVoltage(System.Runtime.InteropServices.HandleRef Instrument_Handle, double LFGen_Voltage);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetLFGenVoltage", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetLFGenVoltage(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double LFGen_Voltage);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetLFGenInternalVoltage", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetLFGenInternalVoltage(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, double LFGen_Internal_Voltage);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetLFGenInternalVoltage", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetLFGenInternalVoltage(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, out double LFGen_Internal_Voltage);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetLFGenFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetLFGenFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, double LFGen_Frequency);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetLFGenFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetLFGenFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, out double LFGen_Frequency);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetLFGenShape", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetLFGenShape(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Shape);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetLFGenShape", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetLFGenShape(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Shape);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetLFGenShapeTrapeze", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetLFGenShapeTrapeze(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Trapeze, double Time);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetLFGenShapeTrapeze", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetLFGenShapeTrapeze(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Trapeze, out double Time);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetLFGenDCOffset", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetLFGenDCOffset(System.Runtime.InteropServices.HandleRef Instrument_Handle, double DC_Offset);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetLFGenDCOffset", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetLFGenDCOffset(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double DC_Offset);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPGENState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPGENState(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Pulse_Generator_State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPGENState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPGENState(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort Pulse_Generator_State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetAllModulationsState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAllModulationsState(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Modulation_States);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_configAM", CallingConvention = CallingConvention.StdCall)]
            public static extern int configAM(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort AM_State, int AM_Source, double AM_Depth, int AM_External_Coupling, int AM_Internal_Source, double AM_Internal_Depth_1, double LFGen_1_Frequency, int LFGen_2_Shape, double LFGen_2_Frequency);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetAMState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAMState(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort AM_State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetAMState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAMState(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort AM_State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetAMSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAMSource(System.Runtime.InteropServices.HandleRef Instrument_Handle, int AM_Source);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetAMSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAMSource(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int AM_Source);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetAMDepth", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAMDepth(System.Runtime.InteropServices.HandleRef Instrument_Handle, double AM_Depth);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetAMDepth", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAMDepth(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double AM_Depth);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetAMExternalCoupling", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAMExternalCoupling(System.Runtime.InteropServices.HandleRef Instrument_Handle, int AM_External_Coupling);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetAMExternalCoupling", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAMExternalCoupling(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int AM_External_Coupling);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetAMSensitivity", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAMSensitivity(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double AM_Sensitivity);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetAMInternalSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAMInternalSource(System.Runtime.InteropServices.HandleRef Instrument_Handle, int AM_Internal_Source);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetAMInternalSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAMInternalSource(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int AM_Internal_Source);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetAMInternalDepth", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAMInternalDepth(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, double AM_Internal_Depth);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetAMInternalDepth", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAMInternalDepth(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, out double AM_Internal_Depth);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_confFM", CallingConvention = CallingConvention.StdCall)]
            public static extern int confFM(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort State, int Source, int Mode, double FM_Deviation, double Internal_Deviation, double External_Deviation, int External_Coupling, int External_Input_Impedance, int Binary_Format);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_confFMInternal", CallingConvention = CallingConvention.StdCall)]
            public static extern int confFMInternal(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Internal_Source, double Internal_Deviation_1, double LFGen_1_Frequency, int LFGen_2_Shape, double LFGen_2_Frequency);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetFMState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetFMState(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetFMState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetFMState(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetFMSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetFMSource(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Source);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetFMSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetFMSource(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Source);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetFMMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetFMMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Mode);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetFMMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetFMMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Mode);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetFMDeviation", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetFMDeviation(System.Runtime.InteropServices.HandleRef Instrument_Handle, double External_Deviation);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetFMDeviation", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetFMDeviation(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double External_Deviation);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetFMExtCoupling", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetFMExtCoupling(System.Runtime.InteropServices.HandleRef Instrument_Handle, int External_Coupling);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetFMExtCoupling", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetFMExtCoupling(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int External_Coupling);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetFMInternalSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetFMInternalSource(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Internal_Source);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetFMInternalSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetFMInternalSource(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Internal_Source);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetFMInternalDeviation", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetFMInternalDeviation(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, double Internal_Deviation);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetFMInternalDeviation", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetFMInternalDeviation(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, out double Internal_Deviation);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetFMExternalDeviation", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetFMExternalDeviation(System.Runtime.InteropServices.HandleRef Instrument_Handle, double External_Deviation);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetFMExternalDeviation", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetFMExternalDeviation(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double External_Deviation);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetFMExternalDigitalBinaryFormat", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetFMExternalDigitalBinaryFormat(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Binary_Format);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetFMExternalDigitalBinaryFormat", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetFMExternalDigitalBinaryFormat(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Binary_Format);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetFMSensitivity", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetFMSensitivity(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Sensitivity);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_confPM", CallingConvention = CallingConvention.StdCall)]
            public static extern int confPM(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort State, int Source, int Mode, double PM_Deviation, double Internal_Deviation, double External_Deviation, int External_Coupling, int External_Input_Impedance, int Binary_Format);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_confPMInternal", CallingConvention = CallingConvention.StdCall)]
            public static extern int confPMInternal(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Internal_Source, double Internal_Deviation_1, double LFGen_1_Frequency, int LFGen_2_Shape, double LFGen_2_Frequency);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPMState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPMState(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPMState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPMState(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPMSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPMSource(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Source);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPMSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPMSource(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Source);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPMMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPMMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Mode);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPMMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPMMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Mode);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPMDeviation", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPMDeviation(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Deviation);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPMDeviation", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPMDeviation(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Deviation);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPMExtCoupling", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPMExtCoupling(System.Runtime.InteropServices.HandleRef Instrument_Handle, int External_Coupling);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPMExtCoupling", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPMExtCoupling(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int External_Coupling);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPMInternalSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPMInternalSource(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Internal_Source);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPMInternalSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPMInternalSource(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Internal_Source);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPMInternalDeviation", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPMInternalDeviation(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, double Internal_Deviation);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPMInternalDeviation", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPMInternalDeviation(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel, out double Internal_Deviation);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPMExternalDeviation", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPMExternalDeviation(System.Runtime.InteropServices.HandleRef Instrument_Handle, double External_Deviation);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPMExternalDeviation", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPMExternalDeviation(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double External_Deviation);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPMExternalDigitalBinaryFormat", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPMExternalDigitalBinaryFormat(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Binary_Format);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPMExternalDigitalBinaryFormat", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPMExternalDigitalBinaryFormat(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Binary_Format);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPMSensitivity", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPMSensitivity(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Sensitivity);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_confPulm", CallingConvention = CallingConvention.StdCall)]
            public static extern int confPulm(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort State, int Source, int Polarity, ushort Pulse_Generator_State, double Pulse_Period, double Pulse_Width, double Pulse_Delay, ushort Double_Pulse_State, double Double_Pulse_Width, double Double_Pulse_Delay, int Trigger_Mode);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPULMState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPULMState(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPULMState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPULMState(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPULMPolarity", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPULMPolarity(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Polarity);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPULMPolarity", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPULMPolarity(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Polarity);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPULMSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPULMSource(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Source);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPULMSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPULMSource(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Source);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPULMPeriod", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPULMPeriod(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Pulse_Period);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPULMPeriod", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPULMPeriod(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Pulse_Period);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPULMWidth", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPULMWidth(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Pulse_Width);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPULMWidth", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPULMWidth(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Pulse_Width);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPULMDelay", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPULMDelay(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Pulse_Delay);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPULMDelay", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPULMDelay(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Pulse_Delay);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPULMDoubleState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPULMDoubleState(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Double_Pulse_State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPULMDoubleState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPULMDoubleState(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort Double_Pulse_State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPULMDoubleWidth", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPULMDoubleWidth(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Double_Pulse_Width);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPULMDoubleWidth", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPULMDoubleWidth(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Double_Pulse_Width);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPULMDoubleDelay", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPULMDoubleDelay(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Double_Pulse_Delay);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPULMDoubleDelay", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPULMDoubleDelay(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Double_Pulse_Delay);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPULMTriggerMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPULMTriggerMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Trigger_Mode);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPULMTriggerMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPULMTriggerMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Trigger_Mode);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPULMExternalTriggerInputImpedance", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPULMExternalTriggerInputImpedance(System.Runtime.InteropServices.HandleRef Instrument_Handle, int External_Input_Impedance);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPULMExternalTriggerInputImpedance", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPULMExternalTriggerInputImpedance(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int External_Input_Impedance);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPULMExternalTriggerSlope", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPULMExternalTriggerSlope(System.Runtime.InteropServices.HandleRef Instrument_Handle, int External_Trigger_Slope);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPULMExternalTriggerSlope", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPULMExternalTriggerSlope(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int External_Trigger_Slope);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPULMGateInputPolarity", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPULMGateInputPolarity(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Gate_Input_Polarity);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPULMGateInputPolarity", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPULMGateInputPolarity(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Gate_Input_Polarity);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPULMMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPULMMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Mode);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPULMMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPULMMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Mode);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPULMSynchronizationState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPULMSynchronizationState(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPULMSynchronizationState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPULMSynchronizationState(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_PULMPulseTrainCatalog", CallingConvention = CallingConvention.StdCall)]
            public static extern int PULMPulseTrainCatalog(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Directory_Path, int Array_Size, System.Text.StringBuilder Catalog_List);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_PULMDeletePulseTrainFile", CallingConvention = CallingConvention.StdCall)]
            public static extern int PULMDeletePulseTrainFile(System.Runtime.InteropServices.HandleRef Instrument_Handle, string File_Name);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_PULMSelectPulseTrainFile", CallingConvention = CallingConvention.StdCall)]
            public static extern int PULMSelectPulseTrainFile(System.Runtime.InteropServices.HandleRef Instrument_Handle, string File_Name);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPULMTrainOfftime", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPULMTrainOfftime(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Array_Size, double[] Offtime);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPULMTrainOfftime", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPULMTrainOfftime(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Array_Size, [In, Out] double[] Offtime);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetTrainOfftimePoints", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetTrainOfftimePoints(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Number_of_Offtime_Points);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPULMTrainOntime", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPULMTrainOntime(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Array_Size, double[] Ontime);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPULMTrainOntime", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPULMTrainOntime(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Array_Size, [In, Out] double[] Ontime);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetTrainOntimePoints", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetTrainOntimePoints(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Number_of_Ontime_Points);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPULMTrainRepetition", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPULMTrainRepetition(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Array_Size, int[] Repetition);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPULMTrainRepetition", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPULMTrainRepetition(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Array_Size, [In, Out] int[] Repetition);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPULMTrainRepetitionPoints", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPULMTrainRepetitionPoints(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Number_of_Repetition_Points);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPULMTrainImportExportListMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPULMTrainImportExportListMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int List_Mode);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPULMTrainImportExportListMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPULMTrainImportExportListMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int List_Mode);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPULMTrainImportExportListFile", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPULMTrainImportExportListFile(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Source_File);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPULMTrainImportExportListFile", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPULMTrainImportExportListFile(System.Runtime.InteropServices.HandleRef Instrument_Handle, System.Text.StringBuilder Source_File);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_PULMTrainImportExportExecute", CallingConvention = CallingConvention.StdCall)]
            public static extern int PULMTrainImportExportExecute(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPULMTrainImportExportASCIIFile", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPULMTrainImportExportASCIIFile(System.Runtime.InteropServices.HandleRef Instrument_Handle, string ASCII_Source_File);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPULMTrainImportExportASCIIFile", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPULMTrainImportExportASCIIFile(System.Runtime.InteropServices.HandleRef Instrument_Handle, System.Text.StringBuilder ASCII_Source_File);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPULMTrainImportExportASCIIExtension", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPULMTrainImportExportASCIIExtension(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Extension);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPULMTrainImportExportASCIIExtension", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPULMTrainImportExportASCIIExtension(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Extension);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPULMTrainImportExportASCIIColumnSeparator", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPULMTrainImportExportASCIIColumnSeparator(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Separator);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPULMTrainImportExportASCIIColumnSeparator", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPULMTrainImportExportASCIIColumnSeparator(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Separator);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPULMTrainImportExportASCIIDecimalSeparator", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPULMTrainImportExportASCIIDecimalSeparator(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Decimal_Separator);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPULMTrainImportExportASCIIDecimalSeparator", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPULMTrainImportExportASCIIDecimalSeparator(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Decimal_Separator);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_PULMTrainImportExportCatalog", CallingConvention = CallingConvention.StdCall)]
            public static extern int PULMTrainImportExportCatalog(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Array_Size, System.Text.StringBuilder Catalog_List);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_confDMEM", CallingConvention = CallingConvention.StdCall)]
            public static extern int confDMEM(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort State, int Mode, ushort Low_Emission, ushort Single_Pulse, ushort Pulse_Squitter, int Range_Distance, int Rate);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_confDMEMEcho", CallingConvention = CallingConvention.StdCall)]
            public static extern int confDMEMEcho(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Echo_Pulse, double Echo_Attenuation, double Echo_Delay);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_confDMEMPulse", CallingConvention = CallingConvention.StdCall)]
            public static extern int confDMEMPulse(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel_Suffix, int Pulse_Shape, double Pulse_Rise, double Pulse_Fall, double Pulse_Width, double Pulse_Spacing);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_confDMEMTrigger", CallingConvention = CallingConvention.StdCall)]
            public static extern int confDMEMTrigger(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Trigger_Mode, double Trigger_Delay, int External_Input_Impedance, int Ext_Trigger_Input_Slope);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_DMEMPreset", CallingConvention = CallingConvention.StdCall)]
            public static extern int DMEMPreset(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetDMEMState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDMEMState(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetDMEMState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDMEMState(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetDMEMMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDMEMMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Mode);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetDMEMMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDMEMMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Mode);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetDMEMPulseShape", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDMEMPulseShape(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Pulse_Shape);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetDMEMPulseShape", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDMEMPulseShape(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Pulse_Shape);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetDMEMPulseRise", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDMEMPulseRise(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Pulse_Rise);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetDMEMPulseRise", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDMEMPulseRise(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Pulse_Rise);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetDMEMPulseWidth", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDMEMPulseWidth(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Pulse_Width);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetDMEMPulseWidth", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDMEMPulseWidth(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Pulse_Width);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetDMEMPulseFall", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDMEMPulseFall(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Pulse_Fall);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetDMEMPulseFall", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDMEMPulseFall(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Pulse_Fall);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetDMEMPulseSpacing", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDMEMPulseSpacing(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Pulse_Spacing);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetDMEMPulseSpacing", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDMEMPulseSpacing(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Pulse_Spacing);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetDMEMSquitter", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDMEMSquitter(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Pulse_Squitter);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetDMEMSquitter", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDMEMSquitter(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort Pulse_Squitter);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetDMEMRate", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDMEMRate(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Rate);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetDMEMRate", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDMEMRate(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Rate);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetDMEMEchoPulse", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDMEMEchoPulse(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Echo_Pulse);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetDMEMEchoPulse", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDMEMEchoPulse(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort Echo_Pulse);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetDMEMEchoAttenuation", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDMEMEchoAttenuation(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Echo_Attenuation);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetDMEMEchoAttenuation", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDMEMEchoAttenuation(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Echo_Attenuation);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetDMEMEchoDelay", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDMEMEchoDelay(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Echo_Delay);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetDMEMEchoDelay", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDMEMEchoDelay(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Echo_Delay);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetDMEMTriggerMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDMEMTriggerMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Trigger_Mode);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetDMEMTriggerMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDMEMTriggerMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Trigger_Mode);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetDMEMTriggerDelay", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDMEMTriggerDelay(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Trigger_Delay);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetDMEMTriggerDelay", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDMEMTriggerDelay(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Trigger_Delay);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetDMEMTriggerNormalizeDelay", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDMEMTriggerNormalizeDelay(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Trigger_Normalize_Delay);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetDMEMGatePolarity", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDMEMGatePolarity(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Gate_Polarity);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetDMEMGatePolarity", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDMEMGatePolarity(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Gate_Polarity);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetDMEMExternalInputImpedance", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDMEMExternalInputImpedance(System.Runtime.InteropServices.HandleRef Instrument_Handle, int External_Input_Impedance);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetDMEMExternalInputImpedance", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDMEMExternalInputImpedance(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int External_Input_Impedance);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetDMEMExtTriggerInputSlope", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDMEMExtTriggerInputSlope(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Ext_Trigger_Input_Slope);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetDMEMExtTriggerInputSlope", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDMEMExtTriggerInputSlope(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Ext_Trigger_Input_Slope);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetDMEMRangeDistance", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDMEMRangeDistance(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Range_Distance);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetDMEMRangeDistance", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDMEMRangeDistance(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Range_Distance);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetDMEMLowSpectralEmission", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDMEMLowSpectralEmission(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Low_Emission);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetDMEMLowSpectralEmission", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDMEMLowSpectralEmission(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort Low_Emission);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetDMEMChannelSuffix", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDMEMChannelSuffix(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Channel_Suffix);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetDMEMChannelSuffix", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDMEMChannelSuffix(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Channel_Suffix);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetDMEMReplyEfficiency", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDMEMReplyEfficiency(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Reply_Efficiency);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetDMEMReplyEfficiency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDMEMReplyEfficiency(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Reply_Efficiency);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetDMEMSinglePulse", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDMEMSinglePulse(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Single_Pulse);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetDMEMSinglePulse", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDMEMSinglePulse(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort Single_Pulse);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetDMEMICAOChannel", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDMEMICAOChannel(System.Runtime.InteropServices.HandleRef Instrument_Handle, int ICAO_Channel, int ICAO_Number);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetDMEMICAOChannel", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDMEMICAOChannel(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int ICAO_Channel, out int ICAO_Number);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetDMEMCompositeAMState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDMEMCompositeAMState(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetDMEMCompositeAMState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDMEMCompositeAMState(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetDMEMCompositeAMModulationDepth", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDMEMCompositeAMModulationDepth(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Signal_Component, double Modulation_Depth);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetDMEMCompositeAMModulationDepth", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDMEMCompositeAMModulationDepth(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Signal_Component, out double Modulation_Depth);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetDMEMCompositeAMFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDMEMCompositeAMFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Signal_Component, double Frequency);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetDMEMCompositeAMFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDMEMCompositeAMFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Signal_Component, out double Frequency);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetDMEMCompositeAMPhase", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDMEMCompositeAMPhase(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Phase);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetDMEMCompositeAMPhase", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDMEMCompositeAMPhase(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Phase);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetDMEMAnalysisReplyEfficiency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDMEMAnalysisReplyEfficiency(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Efficiency);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetDMEMReplyEfficiencyState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDMEMReplyEfficiencyState(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Efficiency_State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetDMEMReplyEfficiencyState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDMEMReplyEfficiencyState(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort Efficiency_State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetDMEMReplyEfficiencyValidity", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDMEMReplyEfficiencyValidity(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Efficiency_Validity);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetDMEMMeasurementCount", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDMEMMeasurementCount(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Measurement_Count);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetDMEMMeasurementCount", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDMEMMeasurementCount(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Measurement_Count);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetDMEMExpectedReplyDelay", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDMEMExpectedReplyDelay(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Reply_Delay);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetDMEMExpectedReplyDelay", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDMEMExpectedReplyDelay(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Reply_Delay);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetDMEMGateLength", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDMEMGateLength(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Gate_Length);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetDMEMGateLength", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDMEMGateLength(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Gate_Length);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetDMEMNormalize", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDMEMNormalize(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Delay);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetDMEMPeakLevel", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDMEMPeakLevel(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Peak_Level);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetDMEMPeakLevelState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDMEMPeakLevelState(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Peak_Level);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetDMEMPeakLevelState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDMEMPeakLevelState(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort Peak_Level);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetDMEMPeakLevelValidity", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDMEMPeakLevelValidity(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Peak_Level_Validity);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetDMEMPulseRepetitionFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDMEMPulseRepetitionFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Pulse_Repetition_Frequency);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetDMEMPulseRepetitionFrequencyState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDMEMPulseRepetitionFrequencyState(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Pulse_Rep_Freq_Stat);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetDMEMPulseRepetitionFrequencyState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDMEMPulseRepetitionFrequencyState(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort Pulse_Rep_Freq_Stat);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetDMEMPulseRepetitionFrequencyValidity", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDMEMPulseRepetitionFrequencyValidity(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Pulse_Repetition_Freq_Validity);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetDMEMAnalysisState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDMEMAnalysisState(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Analysis_State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetDMEMAnalysisState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDMEMAnalysisState(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort Analysis_State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetDMEMReplyDelay", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDMEMReplyDelay(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Reply_Delay);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetDMEMReplyDelayState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDMEMReplyDelayState(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Reply_Delay_State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetDMEMReplyDelayState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDMEMReplyDelayState(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort Reply_Delay_State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetDMEMReplyDelayValidity", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDMEMReplyDelayValidity(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Reply_Delay_Validity);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetDMEMAnalysisTriggerLevel", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDMEMAnalysisTriggerLevel(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Trigger_Level);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_confDMEMId", CallingConvention = CallingConvention.StdCall)]
            public static extern int confDMEMId(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Id_State, double Id_Frequency, string Id_Code, double Id_Dot_Length, int Id_Period);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_DMEMIdPreset", CallingConvention = CallingConvention.StdCall)]
            public static extern int DMEMIdPreset(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetDMEMIdState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDMEMIdState(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Id_State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetDMEMIdState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDMEMIdState(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort Id_State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetDMEMIdCode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDMEMIdCode(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Id_Code);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetDMEMIdCode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDMEMIdCode(System.Runtime.InteropServices.HandleRef Instrument_Handle, System.Text.StringBuilder Id_Code);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetDMEMIdTimeSchema", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDMEMIdTimeSchema(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Id_Time_Schema);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetDMEMIdTimeSchema", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDMEMIdTimeSchema(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Id_Time_Schema);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetDMEMIdDashLength", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDMEMIdDashLength(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Id_Dash_Length);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetDMEMIdDashLength", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDMEMIdDashLength(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Id_Dash_Length);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetDMEMIdDotLength", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDMEMIdDotLength(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Id_Dot_Length);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetDMEMIdDotLength", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDMEMIdDotLength(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Id_Dot_Length);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetDMEMIdLetterSpace", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDMEMIdLetterSpace(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Id_Letter_Space);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetDMEMIdLetterSpace", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDMEMIdLetterSpace(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Id_Letter_Space);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetDMEMIdSymbolSpace", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDMEMIdSymbolSpace(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Id_Symbol_Space);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetDMEMIdSymbolSpace", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDMEMIdSymbolSpace(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Id_Symbol_Space);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetDMEMIdPeriod", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDMEMIdPeriod(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Id_Period);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetDMEMIdPeriod", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDMEMIdPeriod(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Id_Period);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetDMEMIdFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDMEMIdFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Id_Frequency);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetDMEMIdFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDMEMIdFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Id_Frequency);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_ConfigureVORModulation", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureVORModulation(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort State, int Mode, double Bearing_Angle, int Direction, double VAR_REF_Frequency, double VAR_Depth, double Subcarrier_Frequency, double Subcarrier_Depth, int REF_Deviation);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_ConfigureVORMCOMID", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureVORMCOMID(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort COM_ID_State, string COM_ID_Code, double COM_ID_Frequency, double COM_ID_Depth);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetVORMState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetVORMState(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetVORMState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetVORMState(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetVORMMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetVORMMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Mode);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetVORMMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetVORMMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Mode);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetVORMBearingAngle", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetVORMBearingAngle(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Bearing_Angle);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetVORMBearingAngle", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetVORMBearingAngle(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Bearing_Angle);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetVORMDirection", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetVORMDirection(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Direction);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetVORMDirection", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetVORMDirection(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Direction);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetVORMVARREFFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetVORMVARREFFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, double VAR_REF_Frequency);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetVORMVARREFFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetVORMVARREFFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double VAR_REF_Frequency);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetVORMVARDepth", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetVORMVARDepth(System.Runtime.InteropServices.HandleRef Instrument_Handle, double VAR_Depth);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetVORMVARDepth", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetVORMVARDepth(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double VAR_Depth);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetVORMSubcarrierFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetVORMSubcarrierFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Subcarrier_Frequency);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetVORMSubcarrierFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetVORMSubcarrierFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Subcarrier_Frequency);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetVORMSubcarrierDepth", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetVORMSubcarrierDepth(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Subcarrier_Depth);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetVORMSubcarrierDepth", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetVORMSubcarrierDepth(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Subcarrier_Depth);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetVORMREFDeviation", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetVORMREFDeviation(System.Runtime.InteropServices.HandleRef Instrument_Handle, int REF_Deviation);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetVORMREFDeviation", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetVORMREFDeviation(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int REF_Deviation);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetVORMToDefault", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetVORMToDefault(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetVORMCOMIDState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetVORMCOMIDState(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort COM_ID_State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetVORMCOMIDState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetVORMCOMIDState(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort COM_ID_State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetVORMCOMIDCode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetVORMCOMIDCode(System.Runtime.InteropServices.HandleRef Instrument_Handle, string COM_ID_Code);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetVORMCOMIDCode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetVORMCOMIDCode(System.Runtime.InteropServices.HandleRef Instrument_Handle, System.Text.StringBuilder COM_ID_Code);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetVORMCOMIDFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetVORMCOMIDFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, double COM_ID_Frequency);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetVORMCOMIDFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetVORMCOMIDFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double COM_ID_Frequency);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetVORMCOMIDDepth", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetVORMCOMIDDepth(System.Runtime.InteropServices.HandleRef Instrument_Handle, double COM_ID_Depth);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetVORMCOMIDDepth", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetVORMCOMIDDepth(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double COM_ID_Depth);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetVORMCOMIDTimeSchema", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetVORMCOMIDTimeSchema(System.Runtime.InteropServices.HandleRef Instrument_Handle, int COM_ID_Time_Schema);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetVORMCOMIDTimeSchema", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetVORMCOMIDTimeSchema(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int COM_ID_Time_Schema);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetVORMCOMIDDashLength", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetVORMCOMIDDashLength(System.Runtime.InteropServices.HandleRef Instrument_Handle, double COM_ID_Dash_Length);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetVORMCOMIDDashLength", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetVORMCOMIDDashLength(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double COM_ID_Dash_Length);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetVORMCOMIDDotLength", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetVORMCOMIDDotLength(System.Runtime.InteropServices.HandleRef Instrument_Handle, double COM_ID_Dot_Length);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetVORMCOMIDDotLength", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetVORMCOMIDDotLength(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double COM_ID_Dot_Length);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetVORMCOMIDLetterSpace", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetVORMCOMIDLetterSpace(System.Runtime.InteropServices.HandleRef Instrument_Handle, double COM_ID_Letter_Space);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetVORMCOMIDLetterSpace", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetVORMCOMIDLetterSpace(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double COM_ID_Letter_Space);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetVORMCOMIDSymbolSpace", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetVORMCOMIDSymbolSpace(System.Runtime.InteropServices.HandleRef Instrument_Handle, double COM_ID_Symbol_Space);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetVORMCOMIDSymbolSpace", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetVORMCOMIDSymbolSpace(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double COM_ID_Symbol_Space);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetVORMCOMIDPeriod", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetVORMCOMIDPeriod(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Id_Period);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetVORMCOMIDPeriod", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetVORMCOMIDPeriod(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Id_Period);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetVORMEXTAM", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetVORMEXTAM(System.Runtime.InteropServices.HandleRef Instrument_Handle, int EXT_AM);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetVORMEXTAM", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetVORMEXTAM(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int EXT_AM);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetVORMCarrierFrequencyStep", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetVORMCarrierFrequencyStep(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Carrier_Frequency_Step);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetVORMCarrierFrequencyStep", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetVORMCarrierFrequencyStep(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Carrier_Frequency_Step);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetVORMICAOChannel", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetVORMICAOChannel(System.Runtime.InteropServices.HandleRef Instrument_Handle, int ICAO_Channel, int ICAO_Number);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetVORMICAOChannel", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetVORMICAOChannel(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int ICAO_Channel, out int ICAO_Number);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_ConfigureILSGSModulation", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureILSGSModulation(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort State, int Mode, double DDM_Depth, double DDM_Current, double DDM_Logarithmic, int DDM_Direction, double Sum_Of_Depth, double Up_Frequency, double Down_Frequency, double Up_Down_Phase);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetILSGSMState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetILSGSMState(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetILSGSMState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetILSGSMState(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetILSGSMMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetILSGSMMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Mode);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetILSGSMMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetILSGSMMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Mode);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetILSGSMDDMDepth", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetILSGSMDDMDepth(System.Runtime.InteropServices.HandleRef Instrument_Handle, double DDM_Depth);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetILSGSMDDMDepth", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetILSGSMDDMDepth(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double DDM_Depth);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetILSGSMDDMCurrent", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetILSGSMDDMCurrent(System.Runtime.InteropServices.HandleRef Instrument_Handle, double DDM_Current);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetILSGSMDDMCurrent", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetILSGSMDDMCurrent(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double DDM_Current);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetILSGSMDDMLogarithmic", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetILSGSMDDMLogarithmic(System.Runtime.InteropServices.HandleRef Instrument_Handle, double DDM_Logarithmic);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetILSGSMDDMLogarithmic", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetILSGSMDDMLogarithmic(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double DDM_Logarithmic);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetILSGSMDDMCoupling", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetILSGSMDDMCoupling(System.Runtime.InteropServices.HandleRef Instrument_Handle, int DDM_Coupling);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetILSGSMDDMCoupling", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetILSGSMDDMCoupling(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int DDM_Coupling);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetILSGSMDDMPercent", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetILSGSMDDMPercent(System.Runtime.InteropServices.HandleRef Instrument_Handle, int DDM_Percent);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetILSGSMDDMPercent", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetILSGSMDDMPercent(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int DDM_Percent);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetILSGSMDDMPolarity", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetILSGSMDDMPolarity(System.Runtime.InteropServices.HandleRef Instrument_Handle, int DDM_Polarity);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetILSGSMDDMPolarity", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetILSGSMDDMPolarity(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int DDM_Polarity);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetILSGSMFly", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetILSGSMFly(System.Runtime.InteropServices.HandleRef Instrument_Handle, int DDM_Direction);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetILSGSMFly", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetILSGSMFly(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int DDM_Direction);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetILSGSMSumOfDepth", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetILSGSMSumOfDepth(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Sum_Of_Depth);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetILSGSMSumOfDepth", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetILSGSMSumOfDepth(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Sum_Of_Depth);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetILSGSMUpFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetILSGSMUpFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Up_Frequency);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetILSGSMUpFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetILSGSMUpFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Up_Frequency);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetILSGSMDownFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetILSGSMDownFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Down_Frequency);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetILSGSMDownFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetILSGSMDownFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Down_Frequency);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetILSGSMUpDownPhase", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetILSGSMUpDownPhase(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Up_Down_Phase);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetILSGSMUpDownPhase", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetILSGSMUpDownPhase(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Up_Down_Phase);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetILSGSMToDefault", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetILSGSMToDefault(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetILSGSMCarrierFrequencyStep", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetILSGSMCarrierFrequencyStep(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Carrier_Frequency_Step);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetILSGSMCarrierFrequencyStep", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetILSGSMCarrierFrequencyStep(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Carrier_Frequency_Step);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetILSGSMICAOChannel", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetILSGSMICAOChannel(System.Runtime.InteropServices.HandleRef Instrument_Handle, int ICAO_Channel);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetILSGSMICAOChannel", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetILSGSMICAOChannel(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int ICAO_Channel);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetILSGSMEXTAM", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetILSGSMEXTAM(System.Runtime.InteropServices.HandleRef Instrument_Handle, int EXT_AM);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetILSGSMEXTAM", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetILSGSMEXTAM(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int EXT_AM);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_ConfigureILSLOCModulation", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureILSLOCModulation(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort State, int Mode, double DDM_Depth, double DDM_Current, double DDM_Logarithmic, int DDM_Direction, double Sum_Of_Depth, double Left_Frequency, double Right_Frequency, double Left_Right_Phase);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_ConfigureILSLOCMCOMID", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureILSLOCMCOMID(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort COM_ID_State, string COM_ID_Code, double COM_ID_Frequency, double COM_ID_Depth);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetILSLOCMState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetILSLOCMState(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetILSLOCMState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetILSLOCMState(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetILSLOCMMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetILSLOCMMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Mode);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetILSLOCMMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetILSLOCMMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Mode);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetILSLOCMDDMDepth", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetILSLOCMDDMDepth(System.Runtime.InteropServices.HandleRef Instrument_Handle, double DDM_Depth);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetILSLOCMDDMDepth", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetILSLOCMDDMDepth(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double DDM_Depth);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetILSLOCMDDMCurrent", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetILSLOCMDDMCurrent(System.Runtime.InteropServices.HandleRef Instrument_Handle, double DDM_Current);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetILSLOCMDDMCurrent", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetILSLOCMDDMCurrent(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double DDM_Current);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetILSLOCMDDMLogarithmic", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetILSLOCMDDMLogarithmic(System.Runtime.InteropServices.HandleRef Instrument_Handle, double DDM_Logarithmic);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetILSLOCMDDMLogarithmic", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetILSLOCMDDMLogarithmic(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double DDM_Logarithmic);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetILSLOCMDDMCoupling", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetILSLOCMDDMCoupling(System.Runtime.InteropServices.HandleRef Instrument_Handle, int DDM_Coupling);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetILSLOCMDDMCoupling", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetILSLOCMDDMCoupling(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int DDM_Coupling);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetILSLOCMDDMPercent", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetILSLOCMDDMPercent(System.Runtime.InteropServices.HandleRef Instrument_Handle, int DDM_Percent);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetILSLOCMDDMPercent", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetILSLOCMDDMPercent(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int DDM_Percent);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetILSLOCMDDMPolarity", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetILSLOCMDDMPolarity(System.Runtime.InteropServices.HandleRef Instrument_Handle, int DDM_Polarity);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetILSLOCMDDMPolarity", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetILSLOCMDDMPolarity(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int DDM_Polarity);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetILSLOCMFly", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetILSLOCMFly(System.Runtime.InteropServices.HandleRef Instrument_Handle, int DDM_Direction);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetILSLOCMFly", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetILSLOCMFly(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int DDM_Direction);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetILSLOCMSumOfDepth", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetILSLOCMSumOfDepth(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Sum_Of_Depth);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetILSLOCMSumOfDepth", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetILSLOCMSumOfDepth(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Sum_Of_Depth);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetILSLOCMLeftFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetILSLOCMLeftFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Left_Frequency);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetILSLOCMLeftFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetILSLOCMLeftFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Left_Frequency);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetILSLOCMRightFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetILSLOCMRightFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Right_Frequency);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetILSLOCMRightFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetILSLOCMRightFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Right_Frequency);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetILSLOCMLeftRightPhase", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetILSLOCMLeftRightPhase(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Left_Right_Phase);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetILSLOCMLeftRightPhase", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetILSLOCMLeftRightPhase(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Left_Right_Phase);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetILSLOCMToDefault", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetILSLOCMToDefault(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetILSLOCMCOMIDState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetILSLOCMCOMIDState(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort COM_ID_State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetILSLOCMCOMIDState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetILSLOCMCOMIDState(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort COM_ID_State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetILSLOCMCOMIDCode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetILSLOCMCOMIDCode(System.Runtime.InteropServices.HandleRef Instrument_Handle, string COM_ID_Code);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetILSLOCMCOMIDCode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetILSLOCMCOMIDCode(System.Runtime.InteropServices.HandleRef Instrument_Handle, System.Text.StringBuilder COM_ID_Code);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetILSLOCMCOMIDFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetILSLOCMCOMIDFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, double COM_ID_Frequency);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetILSLOCMCOMIDFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetILSLOCMCOMIDFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double COM_ID_Frequency);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetILSLOCMCOMIDDepth", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetILSLOCMCOMIDDepth(System.Runtime.InteropServices.HandleRef Instrument_Handle, double COM_ID_Depth);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetILSLOCMCOMIDDepth", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetILSLOCMCOMIDDepth(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double COM_ID_Depth);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetILSLOCMCOMIDTimeSchema", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetILSLOCMCOMIDTimeSchema(System.Runtime.InteropServices.HandleRef Instrument_Handle, int COM_ID_Time_Schema);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetILSLOCMCOMIDTimeSchema", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetILSLOCMCOMIDTimeSchema(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int COM_ID_Time_Schema);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetILSLOCMCOMIDDashLength", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetILSLOCMCOMIDDashLength(System.Runtime.InteropServices.HandleRef Instrument_Handle, double COM_ID_Dash_Length);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetILSLOCMCOMIDDashLength", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetILSLOCMCOMIDDashLength(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double COM_ID_Dash_Length);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetILSLOCMCOMIDDotLength", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetILSLOCMCOMIDDotLength(System.Runtime.InteropServices.HandleRef Instrument_Handle, double COM_ID_Dot_Length);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetILSLOCMCOMIDDotLength", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetILSLOCMCOMIDDotLength(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double COM_ID_Dot_Length);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetILSLOCMCOMIDLetterSpace", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetILSLOCMCOMIDLetterSpace(System.Runtime.InteropServices.HandleRef Instrument_Handle, double COM_ID_Letter_Space);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetILSLOCMCOMIDLetterSpace", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetILSLOCMCOMIDLetterSpace(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double COM_ID_Letter_Space);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetILSLOCMCOMIDSymbolSpace", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetILSLOCMCOMIDSymbolSpace(System.Runtime.InteropServices.HandleRef Instrument_Handle, double COM_ID_Symbol_Space);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetILSLOCMCOMIDSymbolSpace", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetILSLOCMCOMIDSymbolSpace(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double COM_ID_Symbol_Space);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetILSLOCCOMIDPeriod", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetILSLOCCOMIDPeriod(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Id_Period);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetILSLOCCOMIDPeriod", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetILSLOCCOMIDPeriod(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Id_Period);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetILSLOCMCarrierFrequencyStep", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetILSLOCMCarrierFrequencyStep(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Carrier_Frequency_Step);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetILSLOCMCarrierFrequencyStep", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetILSLOCMCarrierFrequencyStep(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Carrier_Frequency_Step);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetILSLOCMICAOChannel", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetILSLOCMICAOChannel(System.Runtime.InteropServices.HandleRef Instrument_Handle, int ICAO_Channel);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetILSLOCMICAOChannel", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetILSLOCMICAOChannel(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int ICAO_Channel);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetILSLOCMEXTAM", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetILSLOCMEXTAM(System.Runtime.InteropServices.HandleRef Instrument_Handle, int EXT_AM);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetILSLOCMEXTAM", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetILSLOCMEXTAM(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int EXT_AM);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_ConfigureMBModulation", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureMBModulation(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort State, int Marker_Frequency, double Marker_Depth, ushort Pulsed_Marker);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_ConfigureMBMCOMID", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureMBMCOMID(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort COM_ID_State, string COM_ID_Code, double COM_ID_Frequency, double COM_ID_Depth);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetMBMState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetMBMState(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetMBMState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetMBMState(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetMBMMarkerFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetMBMMarkerFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Marker_Frequency);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetMBMMarkerFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetMBMMarkerFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Marker_Frequency);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetMBMMarkerDepth", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetMBMMarkerDepth(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Marker_Depth);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetMBMMarkerDepth", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetMBMMarkerDepth(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Marker_Depth);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetMBMPulsedMarker", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetMBMPulsedMarker(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Pulsed_Marker);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetMBMPulsedMarker", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetMBMPulsedMarker(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort Pulsed_Marker);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetMBMCOMIDState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetMBMCOMIDState(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort COM_ID_State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetMBMCOMIDState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetMBMCOMIDState(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort COM_ID_State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetMBMCOMIDCode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetMBMCOMIDCode(System.Runtime.InteropServices.HandleRef Instrument_Handle, string COM_ID_Code);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetMBMCOMIDCode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetMBMCOMIDCode(System.Runtime.InteropServices.HandleRef Instrument_Handle, System.Text.StringBuilder COM_ID_Code);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetMBMCOMIDFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetMBMCOMIDFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, double COM_ID_Frequency);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetMBMCOMIDFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetMBMCOMIDFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double COM_ID_Frequency);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetMBMCOMIDDepth", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetMBMCOMIDDepth(System.Runtime.InteropServices.HandleRef Instrument_Handle, double COM_ID_Depth);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetMBMCOMIDDepth", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetMBMCOMIDDepth(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double COM_ID_Depth);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetMBMCOMIDTimeSchema", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetMBMCOMIDTimeSchema(System.Runtime.InteropServices.HandleRef Instrument_Handle, int COM_ID_Time_Schema);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetMBMCOMIDTimeSchema", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetMBMCOMIDTimeSchema(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int COM_ID_Time_Schema);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetMBMCOMIDDashLength", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetMBMCOMIDDashLength(System.Runtime.InteropServices.HandleRef Instrument_Handle, double COM_ID_Dash_Length);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetMBMCOMIDDashLength", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetMBMCOMIDDashLength(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double COM_ID_Dash_Length);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetMBMCOMIDDotLength", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetMBMCOMIDDotLength(System.Runtime.InteropServices.HandleRef Instrument_Handle, double COM_ID_Dot_Length);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetMBMCOMIDDotLength", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetMBMCOMIDDotLength(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double COM_ID_Dot_Length);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetMBMCOMIDLetterSpace", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetMBMCOMIDLetterSpace(System.Runtime.InteropServices.HandleRef Instrument_Handle, double COM_ID_Letter_Space);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetMBMCOMIDLetterSpace", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetMBMCOMIDLetterSpace(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double COM_ID_Letter_Space);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetMBMCOMIDSymbolSpace", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetMBMCOMIDSymbolSpace(System.Runtime.InteropServices.HandleRef Instrument_Handle, double COM_ID_Symbol_Space);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetMBMCOMIDSymbolSpace", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetMBMCOMIDSymbolSpace(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double COM_ID_Symbol_Space);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetMBMCOMIDPeriod", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetMBMCOMIDPeriod(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Id_Period);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetMBMCOMIDPeriod", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetMBMCOMIDPeriod(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Id_Period);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetMBMToDefault", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetMBMToDefault(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_ConfigureADFMCOMID", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureADFMCOMID(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort COM_ID_State, string COM_ID_Code, double COM_ID_Frequency, double COM_ID_Depth);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetADFMState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetADFMState(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetADFMState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetADFMState(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetADFMCOMIDState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetADFMCOMIDState(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort COM_ID_State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetADFMCOMIDState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetADFMCOMIDState(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort COM_ID_State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetADFMCOMIDCode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetADFMCOMIDCode(System.Runtime.InteropServices.HandleRef Instrument_Handle, string COM_ID_Code);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetADFMCOMIDCode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetADFMCOMIDCode(System.Runtime.InteropServices.HandleRef Instrument_Handle, System.Text.StringBuilder COM_ID_Code);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetADFMCOMIDFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetADFMCOMIDFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, double COM_ID_Frequency);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetADFMCOMIDFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetADFMCOMIDFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double COM_ID_Frequency);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetADFMCOMIDDepth", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetADFMCOMIDDepth(System.Runtime.InteropServices.HandleRef Instrument_Handle, double COM_ID_Depth);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetADFMCOMIDDepth", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetADFMCOMIDDepth(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double COM_ID_Depth);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetADFMCOMIDTimeSchema", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetADFMCOMIDTimeSchema(System.Runtime.InteropServices.HandleRef Instrument_Handle, int COM_ID_Time_Schema);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetADFMCOMIDTimeSchema", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetADFMCOMIDTimeSchema(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int COM_ID_Time_Schema);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetADFMCOMIDDashLength", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetADFMCOMIDDashLength(System.Runtime.InteropServices.HandleRef Instrument_Handle, double COM_ID_Dash_Length);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetADFMCOMIDDashLength", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetADFMCOMIDDashLength(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double COM_ID_Dash_Length);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetADFMCOMIDDotLength", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetADFMCOMIDDotLength(System.Runtime.InteropServices.HandleRef Instrument_Handle, double COM_ID_Dot_Length);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetADFMCOMIDDotLength", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetADFMCOMIDDotLength(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double COM_ID_Dot_Length);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetADFMCOMIDLetterSpace", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetADFMCOMIDLetterSpace(System.Runtime.InteropServices.HandleRef Instrument_Handle, double COM_ID_Letter_Space);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetADFMCOMIDLetterSpace", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetADFMCOMIDLetterSpace(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double COM_ID_Letter_Space);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetADFMCOMIDSymbolSpace", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetADFMCOMIDSymbolSpace(System.Runtime.InteropServices.HandleRef Instrument_Handle, double COM_ID_Symbol_Space);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetADFMCOMIDSymbolSpace", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetADFMCOMIDSymbolSpace(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double COM_ID_Symbol_Space);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetADFMCOMIDPeriod", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetADFMCOMIDPeriod(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Id_Period);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetADFMCOMIDPeriod", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetADFMCOMIDPeriod(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Id_Period);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_confCHIRP", CallingConvention = CallingConvention.StdCall)]
            public static extern int confCHIRP(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort CHRIP_State, int Direction, double Bandwidth, double Pulse_Period, double Pulse_Width, int Trigger_Mode, int Trigger_Slope, int Impedance);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_confCHIRPTrigger", CallingConvention = CallingConvention.StdCall)]
            public static extern int confCHIRPTrigger(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Trigger_Slope, int Gate_Polarity, int Impedance, int Trigger_Mode, int Trigger_Level);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetCHIRPTriggerMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetCHIRPTriggerMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Trigger_Mode);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetCHIRPTriggerMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetCHIRPTriggerMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Trigger_Mode);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetCHIRPTriggerSlope", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetCHIRPTriggerSlope(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Trigger_Slope);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetCHIRPTriggerSlope", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetCHIRPTriggerSlope(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Trigger_Slope);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetCHIRPGatePolarity", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetCHIRPGatePolarity(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Gate_Polarity);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetCHIRPGatePolarity", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetCHIRPGatePolarity(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Gate_Polarity);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetCHIRPExternalImpedance", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetCHIRPExternalImpedance(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Impedance);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetCHIRPExternalImpedance", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetCHIRPExternalImpedance(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Impedance);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetCHIRPDirection", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetCHIRPDirection(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Direction);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetCHIRPDirection", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetCHIRPDirection(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Direction);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetCHIRPState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetCHIRPState(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort CHRIP_State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetCHIRPState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetCHIRPState(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort CHRIP_State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetCHIRPBandwidth", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetCHIRPBandwidth(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Bandwidth);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetCHIRPBandwidth", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetCHIRPBandwidth(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Bandwidth);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetCHIRPPulsePeriod", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetCHIRPPulsePeriod(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Pulse_Period);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetCHIRPPulsePeriod", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetCHIRPPulsePeriod(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Pulse_Period);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetCHIRPPulseWidth", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetCHIRPPulseWidth(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Pulse_Width);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetCHIRPPulseWidth", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetCHIRPPulseWidth(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Pulse_Width);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetCHIRPCompressionRatio", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetCHIRPCompressionRatio(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Compression_Ratio);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetAllRFOutputsState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAllRFOutputsState(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort RF_Output_States);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetOutputState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetOutputState(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort RF_Output_State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetOutputState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetOutputState(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort RF_Output_State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetOutputImpedance", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetOutputImpedance(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Impedance);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_confRFFreq", CallingConvention = CallingConvention.StdCall)]
            public static extern int confRFFreq(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Frequency, double Offset, ushort Variation_Active, double Variation_Step);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_ConfigureRFPhaseContinuousFrequencySettings", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureRFPhaseContinuousFrequencySettings(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort State, int Frequency_Range);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetRFFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetRFFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Frequency);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetRFFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetRFFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Frequency);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetRFFrequencyOffset", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetRFFrequencyOffset(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Frequency_Offset);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetRFFrequencyOffset", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetRFFrequencyOffset(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Frequency_Offset);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetRFMultiplier", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetRFMultiplier(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Multiplier);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetRFMultiplier", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetRFMultiplier(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Multiplier);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetRFPhaseContinuousActive", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetRFPhaseContinuousActive(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetRFPhaseContinuousActive", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetRFPhaseContinuousActive(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetRFPhaseContinuousFrequencyRange", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetRFPhaseContinuousFrequencyRange(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Frequency_Range);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetRFPhaseContinuousFrequencyRange", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetRFPhaseContinuousFrequencyRange(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Frequency_Range);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetRFPhaseContinuousMinimumFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetRFPhaseContinuousMinimumFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Minimum_Frequency);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetRFPhaseContinuousMaximumFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetRFPhaseContinuousMaximumFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Maximum_Frequency);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetRFVariationActive", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetRFVariationActive(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Variation_Active);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetRFVariationActive", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetRFVariationActive(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort Variation_Active);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetRFVariationStep", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetRFVariationStep(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Variation_Step);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetRFVariationStep", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetRFVariationStep(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Variation_Step);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetRFFrequencyonRecall", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetRFFrequencyonRecall(System.Runtime.InteropServices.HandleRef Instrument_Handle, int RF_Frequency_on_Recall);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetRFFrequencyonRecall", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetRFFrequencyonRecall(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int RF_Frequency_on_Recall);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_confRosc", CallingConvention = CallingConvention.StdCall)]
            public static extern int confRosc(System.Runtime.InteropServices.HandleRef Instrument_Handle, int ROSC_Source, int External_Reference_Frequency, int ROSC_Synchronization_Bandwidth, ushort Adjustment_Active, int Adjustment_Frequency);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetROSCSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetROSCSource(System.Runtime.InteropServices.HandleRef Instrument_Handle, int ROSC_Source);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetROSCSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetROSCSource(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int ROSC_Source);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetROSCRFOutput", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetROSCRFOutput(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort RF_Output);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetROSCRFOutput", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetROSCRFOutput(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort RF_Output);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetROSCExternalReferenceFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetROSCExternalReferenceFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, int External_Reference_Frequency);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetROSCExternalReferenceFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetROSCExternalReferenceFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int External_Reference_Frequency);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetROSCSynchronizationBandwidth", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetROSCSynchronizationBandwidth(System.Runtime.InteropServices.HandleRef Instrument_Handle, int ROSC_Synchronization_Bandwidth);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetROSCSynchronizationBandwidth", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetROSCSynchronizationBandwidth(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int ROSC_Synchronization_Bandwidth);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetROSCExternalFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetROSCExternalFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, int External_Frequency);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetROSCExternalFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetROSCExternalFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int External_Frequency);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetROSCAdjustmentActive", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetROSCAdjustmentActive(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Adjustment_Active);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetROSCAdjustmentActive", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetROSCAdjustmentActive(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort Adjustment_Active);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetROSCAdjustmentFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetROSCAdjustmentFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Adjustment_Frequency);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetROSCAdjustmentFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetROSCAdjustmentFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Adjustment_Frequency);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetRFDeltaPhase", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetRFDeltaPhase(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Delta_Phase);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetRFDeltaPhase", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetRFDeltaPhase(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Delta_Phase);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_ResetRFDeltaPhaseDisplay", CallingConvention = CallingConvention.StdCall)]
            public static extern int ResetRFDeltaPhaseDisplay(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_confRFLevel", CallingConvention = CallingConvention.StdCall)]
            public static extern int confRFLevel(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Amplitude, double Offset, double Limit, ushort Variation_Active, double Variation_Step, int Attenuator_Mode, int RF_Level_on_Recall);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetRFAmplitude", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetRFAmplitude(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Amplitude);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetRFAmplitude", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetRFAmplitude(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Amplitude);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetRFOutputLevel", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetRFOutputLevel(System.Runtime.InteropServices.HandleRef Instrument_Handle, double RF_Output_Level);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetRFOutputLevel", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetRFOutputLevel(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double RF_Output_Level);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetRFLevelLimit", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetRFLevelLimit(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Limit);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetRFLevelLimit", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetRFLevelLimit(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Limit);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetRFLevelOffset", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetRFLevelOffset(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Offset);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetRFLevelOffset", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetRFLevelOffset(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Offset);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetRFLevelonRecall", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetRFLevelonRecall(System.Runtime.InteropServices.HandleRef Instrument_Handle, int RF_Level_on_Recall);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetRFLevelonRecall", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetRFLevelonRecall(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int RF_Level_on_Recall);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetRFAttenuatorMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetRFAttenuatorMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Attenuator_Mode);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetRFAttenuatorMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetRFAttenuatorMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Attenuator_Mode);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetRFAttenuatorLowerRange", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetRFAttenuatorLowerRange(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Attenuator_Lower_Range);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetRFAttenuatorUpperRange", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetRFAttenuatorUpperRange(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Attenuator_Upper_Range);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetRFAttenuatorRFOffMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetRFAttenuatorRFOffMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int RF_OFF_Mode);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetRFAttenuatorRFOffMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetRFAttenuatorRFOffMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int RF_OFF_Mode);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetRFLevelVariationActive", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetRFLevelVariationActive(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Variation_Active);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetRFLevelVariationActive", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetRFLevelVariationActive(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort Variation_Active);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetRFLevelVariationStep", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetRFLevelVariationStep(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Variation_Step);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetRFLevelVariationStep", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetRFLevelVariationStep(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Variation_Step);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_confNRPZPowerControl", CallingConvention = CallingConvention.StdCall)]
            public static extern int confNRPZPowerControl(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sensor, ushort State, double Target_Level, double RF_Level_Limit, double Catch_Range, int Delay_Time, ushort Use_Peak_Power);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerControlSensor", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerControlSensor(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sensor);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerControlSensor", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerControlSensor(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Sensor);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerControlSensorState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerControlSensorState(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerControlSensorState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerControlSensorState(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerControlSensorTargetLevel", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerControlSensorTargetLevel(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Level);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerControlSensorTargetLevel", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerControlSensorTargetLevel(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Level);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerControlSensorCatchRange", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerControlSensorCatchRange(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Catch_Range);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerControlSensorCatchRange", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerControlSensorCatchRange(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Catch_Range);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerControlSensorDelayTime", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerControlSensorDelayTime(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Delay_Time);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerControlSensorDelayTime", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerControlSensorDelayTime(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Delay_Time);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerControlSensorPeakPowerState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerControlSensorPeakPowerState(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerControlSensorPeakPowerState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerControlSensorPeakPowerState(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetRFPowerOnState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetRFPowerOnState(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Power_On_State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetRFPowerOnState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetRFPowerOnState(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Power_On_State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetALCState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetALCState(System.Runtime.InteropServices.HandleRef Instrument_Handle, int ALC_State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetALCState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetALCState(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int ALC_State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_ALCSearchOnce", CallingConvention = CallingConvention.StdCall)]
            public static extern int ALCSearchOnce(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetUserCorrectionDataState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetUserCorrectionDataState(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Correction_State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetUserCorrectionDataState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUserCorrectionDataState(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort Correction_State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetUserCorrectionDataCatalog", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUserCorrectionDataCatalog(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Directory_Path, int Array_Size, System.Text.StringBuilder Catalog_List);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetUserCorrectionDataTable", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetUserCorrectionDataTable(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Correction_Table);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetUserCorrectionDataTable", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUserCorrectionDataTable(System.Runtime.InteropServices.HandleRef Instrument_Handle, System.Text.StringBuilder Correction_Table);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetUserCorrectionValue", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUserCorrectionValue(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double User_Correction_Value);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetUserCorrectionDataFrequencyValues", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetUserCorrectionDataFrequencyValues(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Array_Size, double[] Frequency_Values);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetUserCorrectionDataFrequencyValues", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUserCorrectionDataFrequencyValues(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Array_Size, [In, Out] double[] Frequency_Values);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetUserCorrectionDataNumberofFrequencyValues", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUserCorrectionDataNumberofFrequencyValues(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Number_of_Frequency_Values);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetUserCorrectionDataLevelValues", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetUserCorrectionDataLevelValues(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Array_Size, double[] Level_Values);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetUserCorrectionDataLevelValues", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUserCorrectionDataLevelValues(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Array_Size, [In, Out] double[] Level_Values);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetUserCorrectionDataNumberofLevelValues", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUserCorrectionDataNumberofLevelValues(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Number_of_Level_Values);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_UserCorrectionFillListWithSensor", CallingConvention = CallingConvention.StdCall)]
            public static extern int UserCorrectionFillListWithSensor(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sensor, int Timeout);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_UserCorrectionDataDeleteTable", CallingConvention = CallingConvention.StdCall)]
            public static extern int UserCorrectionDataDeleteTable(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Table_Name);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetALCOffMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetALCOffMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int List_Mode);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetALCOffMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetALCOffMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int List_Mode);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetUserCorrectionImportExportListMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetUserCorrectionImportExportListMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int List_Mode);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetUserCorrectionImportExportListMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUserCorrectionImportExportListMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int List_Mode);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetUserCorrectionImportExportListFile", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetUserCorrectionImportExportListFile(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Source_File);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetUserCorrectionImportExportListFile", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUserCorrectionImportExportListFile(System.Runtime.InteropServices.HandleRef Instrument_Handle, System.Text.StringBuilder Source_File);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_UserCorrectionImportExportExecute", CallingConvention = CallingConvention.StdCall)]
            public static extern int UserCorrectionImportExportExecute(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetUserCorrectionImportExportASCIIFile", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetUserCorrectionImportExportASCIIFile(System.Runtime.InteropServices.HandleRef Instrument_Handle, string ASCII_Source_File);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetUserCorrectionImportExportASCIIFile", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUserCorrectionImportExportASCIIFile(System.Runtime.InteropServices.HandleRef Instrument_Handle, System.Text.StringBuilder ASCII_Source_File);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetUserCorrectionImportExportASCIIExtension", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetUserCorrectionImportExportASCIIExtension(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Extension);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetUserCorrectionImportExportASCIIExtension", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUserCorrectionImportExportASCIIExtension(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Extension);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetUserCorrectionImportExportASCIIColumnSeparator", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetUserCorrectionImportExportASCIIColumnSeparator(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Separator);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetUserCorrectionImportExportASCIIColumnSeparator", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUserCorrectionImportExportASCIIColumnSeparator(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Separator);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetUserCorrectionImportExportASCIIDecimalSeparator", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetUserCorrectionImportExportASCIIDecimalSeparator(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Decimal_Separator);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetUserCorrectionImportExportASCIIDecimalSeparator", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUserCorrectionImportExportASCIIDecimalSeparator(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Decimal_Separator);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_UserCorrectionImportExportCatalog", CallingConvention = CallingConvention.StdCall)]
            public static extern int UserCorrectionImportExportCatalog(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Array_Size, System.Text.StringBuilder Catalog_List);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_confPowerSense", CallingConvention = CallingConvention.StdCall)]
            public static extern int confPowerSense(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, ushort Init_Power_Meas, int Unit, ushort Permanent_Display, int Source, double Frequency, int Filter_Mode);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_confPowerResponseMeasurement", CallingConvention = CallingConvention.StdCall)]
            public static extern int confPowerResponseMeasurement(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, int Sweep_Mode, double Start, double Stop, int Timing, int Steps, int Spacing);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_confPowerResponseMeasurementLevelOffset", CallingConvention = CallingConvention.StdCall)]
            public static extern int confPowerResponseMeasurementLevelOffset(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, int Sweep_Mode, ushort Offset_State, double Offset);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_confPowerResponseMeasurementDiagram", CallingConvention = CallingConvention.StdCall)]
            public static extern int confPowerResponseMeasurementDiagram(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, double Frequency_Y_Scale_Minimum, double Frequency_Y_Scale_Maximum, double Power_Y_Scale_Minimum, double Power_Y_Scale_Maximum, int Sense_Mode);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_PowerZero", CallingConvention = CallingConvention.StdCall)]
            public static extern int PowerZero(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetInitiatePowerMeasurement", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetInitiatePowerMeasurement(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, ushort Init_Power_Meas);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetInitiatePowerMeasurement", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetInitiatePowerMeasurement(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, out ushort Init_Power_Meas);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerUseSParameters", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerUseSParameters(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, ushort Use_SParameters);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerUseSParameters", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerUseSParameters(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, out ushort Use_SParameters);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, double Frequency);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, out double Frequency);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerOffset", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerOffset(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, double Offset);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerOffset", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerOffset(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, out double Offset);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerOffsetState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerOffsetState(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, ushort Offset_State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerOffsetState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerOffsetState(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, out ushort Offset_State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSource(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, int Source);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSource(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, out int Source);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerUnit", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerUnit(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, int Unit);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerUnit", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerUnit(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, out int Unit);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerDisplayPermanentState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerDisplayPermanentState(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, ushort Permanent_Display);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerDisplayPermanentState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerDisplayPermanentState(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, out ushort Permanent_Display);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerDisplayPermanentPriority", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerDisplayPermanentPriority(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Trace, int Priority);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerDisplayPermanentPriority", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerDisplayPermanentPriority(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Trace, out int Priority);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_confPowerFilter", CallingConvention = CallingConvention.StdCall)]
            public static extern int confPowerFilter(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, int Filter_Mode, double Noise_Content, double Timeout);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerFilterLength", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerFilterLength(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, int Filter_Length);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerFilterLength", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerFilterLength(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, out int Filter_Length);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerFilterMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerFilterMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, int Filter_Mode);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerFilterMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerFilterMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, out int Filter_Mode);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerFilterFixedNoiseContent", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerFilterFixedNoiseContent(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, double Noise_Content);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerFilterFixedNoiseContent", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerFilterFixedNoiseContent(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, out double Noise_Content);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerFilterFixedNoiseTimeout", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerFilterFixedNoiseTimeout(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, double Timeout);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerFilterFixedNoiseTimeout", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerFilterFixedNoiseTimeout(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, out double Timeout);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerFilterLengthAuto", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerFilterLengthAuto(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, out int Filter_Length_Auto);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_PowerFilterSearchOnce", CallingConvention = CallingConvention.StdCall)]
            public static extern int PowerFilterSearchOnce(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSensorGateState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSensorGateState(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSensorGateState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSensorGateState(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSensorGateStart", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSensorGateStart(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Gate, double Start);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSensorGateStart", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSensorGateStart(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Gate, out double Start);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSensorGateStop", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSensorGateStop(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Gate, double Stop);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSensorGateStop", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSensorGateStop(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Gate, out double Stop);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSensorGateTrace", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSensorGateTrace(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Trace);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSensorGateTrace", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSensorGateTrace(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Trace);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSensorGateAveragePower", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSensorGateAveragePower(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Gate, out double Average_Power);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSensorGatePeakPower", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSensorGatePeakPower(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Gate, out double Peak_Power);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_PowerSweepInitiate", CallingConvention = CallingConvention.StdCall)]
            public static extern int PowerSweepInitiate(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, int Timeout);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_PowerSweepAbort", CallingConvention = CallingConvention.StdCall)]
            public static extern int PowerSweepAbort(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_confPowerSweepFrequencySeparateFrequencyRange", CallingConvention = CallingConvention.StdCall)]
            public static extern int confPowerSweepFrequencySeparateFrequencyRange(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, ushort State, double Separate_Frequency_Start, double Separate_Frequency_Stop);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepFrequencyStart", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepFrequencyStart(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, double Frequency_Start);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepFrequencyStart", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepFrequencyStart(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, out double Frequency_Start);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepFrequencyStop", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepFrequencyStop(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, double Frequency_Stop);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepFrequencyStop", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepFrequencyStop(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, out double Frequency_Stop);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepFrequencyTiming", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepFrequencyTiming(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, int Frequency_Timing);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepFrequencyTiming", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepFrequencyTiming(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, out int Frequency_Timing);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepFrequencySpacing", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepFrequencySpacing(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, int Frequency_Spacing);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepFrequencySpacing", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepFrequencySpacing(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, out int Frequency_Spacing);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepFrequencySteps", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepFrequencySteps(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, int Frequency_Steps);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepFrequencySteps", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepFrequencySteps(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, out int Frequency_Steps);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepFrequencyYScaleMinimum", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepFrequencyYScaleMinimum(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, double Y_Scale_Minimum);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepFrequencyYScaleMinimum", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepFrequencyYScaleMinimum(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, out double Y_Scale_Minimum);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepFrequencyYScaleMaximum", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepFrequencyYScaleMaximum(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, double Y_Scale_Maximum);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepFrequencyYScaleMaximum", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepFrequencyYScaleMaximum(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, out double Y_Scale_Maximum);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepFrequencyExecution", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepFrequencyExecution(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Execution);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepFrequencyExecution", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepFrequencyExecution(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Execution);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepFrequencyYAutoScale", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepFrequencyYAutoScale(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Auto_Scale);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepFrequencyYAutoScale", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepFrequencyYAutoScale(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Auto_Scale);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_ResetPowerSweepFrequencyYScale", CallingConvention = CallingConvention.StdCall)]
            public static extern int ResetPowerSweepFrequencyYScale(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepFrequencySeparateFrequencyRange", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepFrequencySeparateFrequencyRange(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, ushort State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepFrequencySeparateFrequencyRange", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepFrequencySeparateFrequencyRange(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, out ushort State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepFrequencySeparateFrequencyStart", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepFrequencySeparateFrequencyStart(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, double Separate_Frequency_Start);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepFrequencySeparateFrequencyStart", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepFrequencySeparateFrequencyStart(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, out double Separate_Frequency_Start);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepFrequencySeparateFrequencyStop", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepFrequencySeparateFrequencyStop(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, double Separate_Frequency_Stop);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepFrequencySeparateFrequencyStop", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepFrequencySeparateFrequencyStop(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, out double Separate_Frequency_Stop);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_PowerSweepFrequencyReferenceCurve", CallingConvention = CallingConvention.StdCall)]
            public static extern int PowerSweepFrequencyReferenceCurve(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepFrequencyReferenceCurvePoints", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepFrequencyReferenceCurvePoints(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, out int Points);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepFrequencyReferenceCurveFrequencyX", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepFrequencyReferenceCurveFrequencyX(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, int Array_Size, double[] Frequency_X);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepFrequencyReferenceCurveFrequencyX", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepFrequencyReferenceCurveFrequencyX(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, int Array_Size, [In, Out] double[] Frequency_X);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepFrequencyReferenceCurvePowerY", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepFrequencyReferenceCurvePowerY(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, int Array_Size, double[] Power_Y);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepFrequencyReferenceCurvePowerY", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepFrequencyReferenceCurvePowerY(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, int Array_Size, [In, Out] double[] Power_Y);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepFrequencyLevelOffsetState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepFrequencyLevelOffsetState(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, ushort Offset_State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepFrequencyLevelOffsetState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepFrequencyLevelOffsetState(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, out ushort Offset_State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepFrequencyLevelOffset", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepFrequencyLevelOffset(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, double Offset);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepFrequencyLevelOffset", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepFrequencyLevelOffset(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, out double Offset);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_confPowerSweepPowerSeparateFrequencyRange", CallingConvention = CallingConvention.StdCall)]
            public static extern int confPowerSweepPowerSeparateFrequencyRange(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, ushort State, double Separate_Frequency);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepPowerStart", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepPowerStart(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, double Power_Start);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepPowerStart", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepPowerStart(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, out double Power_Start);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepPowerStop", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepPowerStop(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, double Power_Stop);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepPowerStop", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepPowerStop(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, out double Power_Stop);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepPowerSpacing", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepPowerSpacing(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, int Power_Spacing);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepPowerSpacing", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepPowerSpacing(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, out int Power_Spacing);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepPowerTiming", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepPowerTiming(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, int Power_Timing);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepPowerTiming", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepPowerTiming(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, out int Power_Timing);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepPowerSteps", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepPowerSteps(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, int Power_Steps);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepPowerSteps", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepPowerSteps(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, out int Power_Steps);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepPowerYScaleMinimum", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepPowerYScaleMinimum(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, double Y_Scale_Minimum);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepPowerYScaleMinimum", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepPowerYScaleMinimum(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, out double Y_Scale_Minimum);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepPowerYScaleMaximum", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepPowerYScaleMaximum(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, double Y_Scale_Maximum);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepPowerYScaleMaximum", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepPowerYScaleMaximum(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, out double Y_Scale_Maximum);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepPowerExecution", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepPowerExecution(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Execution);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepPowerExecution", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepPowerExecution(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Execution);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepPowerYAutoScale", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepPowerYAutoScale(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Auto_Scale);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepPowerYAutoScale", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepPowerYAutoScale(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Auto_Scale);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_ResetPowerSweepPowerYScale", CallingConvention = CallingConvention.StdCall)]
            public static extern int ResetPowerSweepPowerYScale(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepPowerSeparateFrequencyState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepPowerSeparateFrequencyState(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, ushort State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepPowerSeparateFrequencyState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepPowerSeparateFrequencyState(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, out ushort State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepPowerSeparateFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepPowerSeparateFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, double Separate_Frequency);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepPowerSeparateFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepPowerSeparateFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, out double Separate_Frequency);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_PowerSweepPowerReferenceCurve", CallingConvention = CallingConvention.StdCall)]
            public static extern int PowerSweepPowerReferenceCurve(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepPowerReferenceCurvePoints", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepPowerReferenceCurvePoints(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, out int Points);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepPowerReferenceCurvePowerX", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepPowerReferenceCurvePowerX(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, int Array_Size, double[] Power_X);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepPowerReferenceCurvePowerX", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepPowerReferenceCurvePowerX(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, int Array_Size, [In, Out] double[] Power_X);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepPowerReferenceCurvePowerY", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepPowerReferenceCurvePowerY(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, int Array_Size, double[] Power_Y);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepPowerReferenceCurvePowerY", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepPowerReferenceCurvePowerY(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, int Array_Size, [In, Out] double[] Power_Y);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepPowerLevelOffsetState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepPowerLevelOffsetState(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, ushort Offset_State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepPowerLevelOffsetState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepPowerLevelOffsetState(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, out ushort Offset_State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepPowerLevelOffset", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepPowerLevelOffset(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, double Offset);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepPowerLevelOffset", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepPowerLevelOffset(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, out double Offset);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_confPowerSweepTimeSeparateFrequencyRange", CallingConvention = CallingConvention.StdCall)]
            public static extern int confPowerSweepTimeSeparateFrequencyRange(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, ushort State, double Separate_Frequency);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepTimePulseDataAnalysisState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepTimePulseDataAnalysisState(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, ushort State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepTimePulseDataAnalysisState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepTimePulseDataAnalysisState(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, out ushort State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepTimePulseThresholdBase", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepTimePulseThresholdBase(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, int Base);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepTimePulseThresholdBase", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepTimePulseThresholdBase(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, out int Base);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepTimePulseThresholdReferenceLevel", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepTimePulseThresholdReferenceLevel(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, int Mode, double Reference_Level);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepTimePulseThresholdReferenceLevel", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepTimePulseThresholdReferenceLevel(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, int Mode, out double Reference_Level);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepTimeTriggerSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepTimeTriggerSource(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, int Source);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepTimeTriggerSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepTimeTriggerSource(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, out int Source);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepTimeTriggerDropOutTime", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepTimeTriggerDropOutTime(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, double Drop_Out_Time);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepTimeTriggerDropOutTime", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepTimeTriggerDropOutTime(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, out double Drop_Out_Time);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepTimeTriggerHysteresis", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepTimeTriggerHysteresis(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, double Hysteresis);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepTimeTriggerHysteresis", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepTimeTriggerHysteresis(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, out double Hysteresis);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepTimeTriggerThreshold", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepTimeTriggerThreshold(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, double Threshold);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepTimeTriggerThreshold", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepTimeTriggerThreshold(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, out double Threshold);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepTimeTriggerEvents", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepTimeTriggerEvents(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, int Events);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepTimeTriggerEvents", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepTimeTriggerEvents(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, out int Events);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepTimeTriggerAutoSet", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepTimeTriggerAutoSet(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, int Timeout);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepTimeTriggerSlope", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepTimeTriggerSlope(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, int Slope);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepTimeTriggerSlope", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepTimeTriggerSlope(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, out int Slope);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepTimeStart", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepTimeStart(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, double Time_Start);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepTimeStart", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepTimeStart(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, out double Time_Start);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepTimeStop", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepTimeStop(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, double Time_Stop);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepTimeStop", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepTimeStop(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, out double Time_Stop);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepTimeTriggerEvent", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepTimeTriggerEvent(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, int Trigger_Events);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepTimeTriggerEvent", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepTimeTriggerEvent(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, out int Trigger_Events);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepTimeSteps", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepTimeSteps(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, int Time_Steps);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepTimeSteps", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepTimeSteps(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, out int Time_Steps);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepTimeSpacing", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepTimeSpacing(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, int Power_Spacing);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepTimeSpacing", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepTimeSpacing(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, out int Power_Spacing);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepTimeAveragingFactor", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepTimeAveragingFactor(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Averaging_Factor);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepTimeAveragingFactor", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepTimeAveragingFactor(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Averaging_Factor);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepTimeYScaleMinimum", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepTimeYScaleMinimum(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, double Y_Scale_Minimum);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepTimeYScaleMinimum", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepTimeYScaleMinimum(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, out double Y_Scale_Minimum);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepTimeYScaleMaximum", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepTimeYScaleMaximum(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, double Y_Scale_Maximum);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepTimeYScaleMaximum", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepTimeYScaleMaximum(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, out double Y_Scale_Maximum);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepTimeExecution", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepTimeExecution(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Execution);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepTimeExecution", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepTimeExecution(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Execution);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepTimeYAutoScale", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepTimeYAutoScale(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Auto_Scale);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepTimeYAutoScale", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepTimeYAutoScale(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Auto_Scale);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_ResetPowerSweepTimeYScale", CallingConvention = CallingConvention.StdCall)]
            public static extern int ResetPowerSweepTimeYScale(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepTimeSeparateFrequencyState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepTimeSeparateFrequencyState(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, ushort State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepTimeSeparateFrequencyState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepTimeSeparateFrequencyState(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, out ushort State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepTimeSeparateFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepTimeSeparateFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, double Separate_Frequency);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepTimeSeparateFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepTimeSeparateFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, out double Separate_Frequency);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_PowerSweepTimeReferenceCurve", CallingConvention = CallingConvention.StdCall)]
            public static extern int PowerSweepTimeReferenceCurve(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepTimeReferenceCurvePoints", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepTimeReferenceCurvePoints(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, out int Points);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepTimeReferenceCurveTimeX", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepTimeReferenceCurveTimeX(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, int Array_Size, double[] Time_X);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepTimeReferenceCurveTimeX", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepTimeReferenceCurveTimeX(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, int Array_Size, [In, Out] double[] Time_X);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepTimeReferenceCurvePowerY", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepTimeReferenceCurvePowerY(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, int Array_Size, double[] Power_Y);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepTimeReferenceCurvePowerY", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepTimeReferenceCurvePowerY(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, int Array_Size, [In, Out] double[] Power_Y);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepTimeLevelOffsetState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepTimeLevelOffsetState(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, ushort Offset_State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepTimeLevelOffsetState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepTimeLevelOffsetState(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, out ushort Offset_State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepTimeLevelOffset", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepTimeLevelOffset(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, double Offset);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepTimeLevelOffset", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepTimeLevelOffset(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, out double Offset);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepTraceState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepTraceState(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Trace, ushort State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepTraceState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepTraceState(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Trace, out ushort State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepTraceColor", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepTraceColor(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Trace, int Color);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepTraceColor", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepTraceColor(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Trace, out int Color);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_copyPowerSweepTrace", CallingConvention = CallingConvention.StdCall)]
            public static extern int copyPowerSweepTrace(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Trace, int Copy_Mode);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepTraceDataPoints", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepTraceDataPoints(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Trace, out int Data_Points);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepTraceXValues", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepTraceXValues(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Trace, int Array_Size, [In, Out] double[] X_Values);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepTraceYValues", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepTraceYValues(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Trace, int Array_Size, [In, Out] double[] Y_Values);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepTraceSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepTraceSource(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Trace, int Source);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepTraceSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepTraceSource(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Trace, out int Source);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepTracePulseDataAnalysisState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepTracePulseDataAnalysisState(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Trace, out ushort State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepTracePulseThresholdBase", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepTracePulseThresholdBase(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Trace, out int Base);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepTracePulseThresholdReferenceLevel", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepTracePulseThresholdReferenceLevel(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Trace, int Mode, out double Reference_Level);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepSenseMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepSenseMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, int Sense_Mode);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepSenseMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepSenseMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, out int Sense_Mode);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, int Sweep_Mode);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, out int Sweep_Mode);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerDisplayIndication", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerDisplayIndication(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Trace, int Type, ushort Indication);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerDisplayIndication", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerDisplayIndication(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Trace, int Type, out ushort Indication);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerDisplayPulseDataAnalysis", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerDisplayPulseDataAnalysis(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Trace, int Type, out double Pulse_Data_Analysis);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_PowerSensorDevice", CallingConvention = CallingConvention.StdCall)]
            public static extern int PowerSensorDevice(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, out int Device);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_PowerSensorType", CallingConvention = CallingConvention.StdCall)]
            public static extern int PowerSensorType(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, System.Text.StringBuilder Type);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_PowerReadPower", CallingConvention = CallingConvention.StdCall)]
            public static extern int PowerReadPower(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Read, out double Power);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSensorVersion", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSensorVersion(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, System.Text.StringBuilder Version);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_PowerSensorSerialNumber", CallingConvention = CallingConvention.StdCall)]
            public static extern int PowerSensorSerialNumber(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, System.Text.StringBuilder Serial_Number);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_confDiagramDisplay", CallingConvention = CallingConvention.StdCall)]
            public static extern int confDiagramDisplay(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Grid, int Background_Color);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetDiagramGrid", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDiagramGrid(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Grid);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetDiagramGrid", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDiagramGrid(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort Grid);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetDiagramBackgroundColor", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDiagramBackgroundColor(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Background_Color);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetDiagramBackgroundColor", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDiagramBackgroundColor(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Background_Color);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepHardcopyLNGFormat", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepHardcopyLNGFormat(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, int Sweep_Hardcopy_Format);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepHardcopyLNGFormat", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepHardcopyLNGFormat(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sense, out int Sweep_Hardcopy_Format);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepHardcopyFile", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepHardcopyFile(System.Runtime.InteropServices.HandleRef Instrument_Handle, string File_Name);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepHardcopyFile", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepHardcopyFile(System.Runtime.InteropServices.HandleRef Instrument_Handle, System.Text.StringBuilder File_Name);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepHardcopyDevice", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepHardcopyDevice(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Hardcopy_Device);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepHardcopyDevice", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepHardcopyDevice(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Hardcopy_Device);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepHardcopyImageSize", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepHardcopyImageSize(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Image_Size);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepHardcopyImageSize", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepHardcopyImageSize(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Image_Size);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepHardcopyMarkerState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepHardcopyMarkerState(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepHardcopyMarkerState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepHardcopyMarkerState(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SavePowerSweepHardcopy", CallingConvention = CallingConvention.StdCall)]
            public static extern int SavePowerSweepHardcopy(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepHardcopyCSVHeader", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepHardcopyCSVHeader(System.Runtime.InteropServices.HandleRef Instrument_Handle, int CSV_Header);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepHardcopyCSVHeader", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepHardcopyCSVHeader(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int CSV_Header);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepHardcopyCSVOrientation", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepHardcopyCSVOrientation(System.Runtime.InteropServices.HandleRef Instrument_Handle, int CSV_Orientation);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepHardcopyCSVOrientation", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepHardcopyCSVOrientation(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int CSV_Orientation);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepHardcopyCSVColumnSeparator", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepHardcopyCSVColumnSeparator(System.Runtime.InteropServices.HandleRef Instrument_Handle, int CSV_Column_Separator);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepHardcopyCSVColumnSeparator", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepHardcopyCSVColumnSeparator(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int CSV_Column_Separator);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepHardcopyCSVDecimalPoint", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepHardcopyCSVDecimalPoint(System.Runtime.InteropServices.HandleRef Instrument_Handle, int CSV_Decimal_Point);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepHardcopyCSVDecimalPoint", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepHardcopyCSVDecimalPoint(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int CSV_Decimal_Point);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepHardcopyCSVData", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepHardcopyCSVData(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Destination);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepHardcopyAutomaticNamingState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepHardcopyAutomaticNamingState(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepHardcopyAutomaticNamingState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepHardcopyAutomaticNamingState(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepHardcopyAutomaticFileName", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepHardcopyAutomaticFileName(System.Runtime.InteropServices.HandleRef Instrument_Handle, string File_Name);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepHardcopyAutomaticDirectory", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepHardcopyAutomaticDirectory(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Directory_Name);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepHardcopyAutomaticDirectory", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepHardcopyAutomaticDirectory(System.Runtime.InteropServices.HandleRef Instrument_Handle, System.Text.StringBuilder Directory_Name);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_DeletePowerSweepHardcopyImageFiles", CallingConvention = CallingConvention.StdCall)]
            public static extern int DeletePowerSweepHardcopyImageFiles(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepHardcopyAutomaticFileDateState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepHardcopyAutomaticFileDateState(System.Runtime.InteropServices.HandleRef Instrument_Handle, int File_Name_Part, ushort State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepHardcopyAutomaticFileDateState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepHardcopyAutomaticFileDateState(System.Runtime.InteropServices.HandleRef Instrument_Handle, int File_Name_Part, out ushort State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepHardcopyAutomaticFileDate", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepHardcopyAutomaticFileDate(System.Runtime.InteropServices.HandleRef Instrument_Handle, int File_Name_Part, string Part);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepHardcopyAutomaticFilePrefixState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepHardcopyAutomaticFilePrefixState(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepHardcopyAutomaticFilePrefixState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepHardcopyAutomaticFilePrefixState(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerSweepHardcopyAutomaticFilePrefix", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerSweepHardcopyAutomaticFilePrefix(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Prefix);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepHardcopyAutomaticFilePrefix", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepHardcopyAutomaticFilePrefix(System.Runtime.InteropServices.HandleRef Instrument_Handle, System.Text.StringBuilder Prefix);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerSweepHardcopyAutomaticFileNumber", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerSweepHardcopyAutomaticFileNumber(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Number);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerMathFrequencyState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerMathFrequencyState(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Trace, ushort State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerMathFrequencyState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerMathFrequencyState(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Trace, out ushort State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_PowerMathFrequencySubtract", CallingConvention = CallingConvention.StdCall)]
            public static extern int PowerMathFrequencySubtract(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Trace, int Subtract);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerMathPowerState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerMathPowerState(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Trace, ushort State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerMathPowerState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerMathPowerState(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Trace, out ushort State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_PowerMathPowerSubtract", CallingConvention = CallingConvention.StdCall)]
            public static extern int PowerMathPowerSubtract(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Trace, int Subtract);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerMathTimeState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerMathTimeState(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Trace, ushort State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerMathTimeState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerMathTimeState(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Trace, out ushort State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_PowerMathTimeSubtract", CallingConvention = CallingConvention.StdCall)]
            public static extern int PowerMathTimeSubtract(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Trace, int Subtract);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_confFrequencySweep", CallingConvention = CallingConvention.StdCall)]
            public static extern int confFrequencySweep(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Mode, int Frequency_Setting, double Center_Frequency, double Span, double Start_Frequency, double Stop_Frequency, int Spacing, double Step, double Dwell_Time);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_FrequencySweepExecute", CallingConvention = CallingConvention.StdCall)]
            public static extern int FrequencySweepExecute(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetFrequencySweepMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetFrequencySweepMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Mode);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetFrequencySweepStartFreq", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetFrequencySweepStartFreq(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Start_Frequency);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetFrequencySweepStartFreq", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetFrequencySweepStartFreq(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Start_Frequency);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetFrequencySweepStopFreq", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetFrequencySweepStopFreq(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Stop_Frequency);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetFrequencySweepStopFreq", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetFrequencySweepStopFreq(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Stop_Frequency);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetFrequencySweepCenterFreq", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetFrequencySweepCenterFreq(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Center_Frequency);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetFrequencySweepCenterFreq", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetFrequencySweepCenterFreq(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Center_Frequency);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetFrequencySweepSpan", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetFrequencySweepSpan(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Span);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetFrequencySweepSpan", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetFrequencySweepSpan(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Span);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetFrequencySweepSpacing", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetFrequencySweepSpacing(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Spacing);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetFrequencySweepSpacing", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetFrequencySweepSpacing(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Spacing);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetFrequencySweepStepLin", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetFrequencySweepStepLin(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Step_Lin);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetFrequencySweepStepLin", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetFrequencySweepStepLin(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Step_Lin);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetFrequencySweepStepLog", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetFrequencySweepStepLog(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Step_Log);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetFrequencySweepStepLog", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetFrequencySweepStepLog(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Step_Log);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetFrequencySweepDwellTime", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetFrequencySweepDwellTime(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Dwell_Time);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetFrequencySweepDwellTime", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetFrequencySweepDwellTime(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Dwell_Time);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetFrequencySweepManualStep", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetFrequencySweepManualStep(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Manual_Step);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetFrequencySweepManualStep", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetFrequencySweepManualStep(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Manual_Step);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetFrequencySweepPoints", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetFrequencySweepPoints(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Frequency_Sweep_Points);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetFrequencySweepPoints", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetFrequencySweepPoints(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Frequency_Sweep_Points);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetFrequencySweepShape", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetFrequencySweepShape(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Shape);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetFrequencySweepShape", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetFrequencySweepShape(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Shape);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_confRFLevelSweep", CallingConvention = CallingConvention.StdCall)]
            public static extern int confRFLevelSweep(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Level_Sweep_Mode, double Start_Level, double Stop_Level, double Step_Lin, double Dwell_Time);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_LevelSweepExecute", CallingConvention = CallingConvention.StdCall)]
            public static extern int LevelSweepExecute(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetLevelSweepMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetLevelSweepMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Mode);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetLevelSweepStartLevel", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetLevelSweepStartLevel(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Start_Level);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetLevelSweepStartLevel", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetLevelSweepStartLevel(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Start_Level);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetLevelSweepStopLevel", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetLevelSweepStopLevel(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Stop_Level);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetLevelSweepStopLevel", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetLevelSweepStopLevel(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Stop_Level);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetLevelSweepStep", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetLevelSweepStep(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Step);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetLevelSweepStep", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetLevelSweepStep(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Step);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetLevelSweepDwell", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetLevelSweepDwell(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Dwell_Time);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetLevelSweepDwell", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetLevelSweepDwell(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Dwell_Time);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetLevelSweepManualStep", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetLevelSweepManualStep(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Manual_Step);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetLevelSweepManualStep", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetLevelSweepManualStep(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Manual_Step);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetLevelSweepPoints", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetLevelSweepPoints(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Level_Sweep_Points);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetLevelSweepPoints", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetLevelSweepPoints(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Level_Sweep_Points);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetLevelSweepAttenuatorMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetLevelSweepAttenuatorMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Attenuator_Mode);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetLevelSweepAttenuatorMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetLevelSweepAttenuatorMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Attenuator_Mode);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetLevelSweepShape", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetLevelSweepShape(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Shape);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetLevelSweepShape", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetLevelSweepShape(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Shape);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetLevelSweepSpacing", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetLevelSweepSpacing(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Spacing);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_ResetLevelSweep", CallingConvention = CallingConvention.StdCall)]
            public static extern int ResetLevelSweep(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_confList", CallingConvention = CallingConvention.StdCall)]
            public static extern int confList(System.Runtime.InteropServices.HandleRef Instrument_Handle, string List_Name, int List_Mode, int Array_Size, double[] Frequency_Values, double[] Power_Values, double Dwell_Time);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_LISTCatalog", CallingConvention = CallingConvention.StdCall)]
            public static extern int LISTCatalog(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Directory_Path, int Array_Size, System.Text.StringBuilder Catalog_List);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_LISTDeleteList", CallingConvention = CallingConvention.StdCall)]
            public static extern int LISTDeleteList(System.Runtime.InteropServices.HandleRef Instrument_Handle, string List_Name);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_LISTDeleteAll", CallingConvention = CallingConvention.StdCall)]
            public static extern int LISTDeleteAll(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_LISTResetList", CallingConvention = CallingConvention.StdCall)]
            public static extern int LISTResetList(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_LISTTriggerExecute", CallingConvention = CallingConvention.StdCall)]
            public static extern int LISTTriggerExecute(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetLISTMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetLISTMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int List_Mode);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetLISTDwellTime", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetLISTDwellTime(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Dwell_Time);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetLISTDwellTime", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetLISTDwellTime(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Dwell_Time);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetLISTSelectList", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetLISTSelectList(System.Runtime.InteropServices.HandleRef Instrument_Handle, string List_Name);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetLISTSelectList", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetLISTSelectList(System.Runtime.InteropServices.HandleRef Instrument_Handle, System.Text.StringBuilder List_Name);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetLISTFrequencyValues", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetLISTFrequencyValues(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Array_Size, double[] Frequency_Values);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetLISTFrequencyValues", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetLISTFrequencyValues(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Array_Size, [In, Out] double[] Frequency_Values);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetLISTFrequencyPoints", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetLISTFrequencyPoints(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Number_of_Frequency_Points);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetLISTPowerValues", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetLISTPowerValues(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Array_Size, double[] Power_Values);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetLISTPowerValues", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetLISTPowerValues(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Array_Size, [In, Out] double[] Power_Values);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetLISTPowerPoints", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetLISTPowerPoints(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Number_of_Power_Points);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetLISTAttenuatorMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetLISTAttenuatorMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Attenuator_Mode);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetLISTAttenuatorMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetLISTAttenuatorMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Attenuator_Mode);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetLISTStepIndex", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetLISTStepIndex(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Step_Index);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetLISTStepIndex", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetLISTStepIndex(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Step_Index);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetLISTStartIndex", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetLISTStartIndex(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Start_Index);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetLISTStartIndex", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetLISTStartIndex(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Start_Index);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetLISTStopIndex", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetLISTStopIndex(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Stop_Index);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetLISTStopIndex", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetLISTStopIndex(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Stop_Index);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_LearnLISTModeData", CallingConvention = CallingConvention.StdCall)]
            public static extern int LearnLISTModeData(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetLISTFree", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetLISTFree(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Free_Space);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetLISTImportExportListMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetLISTImportExportListMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int List_Mode);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetLISTImportExportListMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetLISTImportExportListMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int List_Mode);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetLISTImportExportListFile", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetLISTImportExportListFile(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Source_File);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetLISTImportExportListFile", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetLISTImportExportListFile(System.Runtime.InteropServices.HandleRef Instrument_Handle, System.Text.StringBuilder Source_File);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_ImportExportExecute", CallingConvention = CallingConvention.StdCall)]
            public static extern int ImportExportExecute(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetLISTImportExportASCIIFile", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetLISTImportExportASCIIFile(System.Runtime.InteropServices.HandleRef Instrument_Handle, string ASCII_Source_File);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetLISTImportExportASCIIFile", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetLISTImportExportASCIIFile(System.Runtime.InteropServices.HandleRef Instrument_Handle, System.Text.StringBuilder ASCII_Source_File);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetLISTImportExportASCIIExtension", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetLISTImportExportASCIIExtension(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Extension);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetLISTImportExportASCIIExtension", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetLISTImportExportASCIIExtension(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Extension);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetLISTImportExportASCIIColumnSeparator", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetLISTImportExportASCIIColumnSeparator(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Separator);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetLISTImportExportASCIIColumnSeparator", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetLISTImportExportASCIIColumnSeparator(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Separator);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetLISTImportExportASCIIColumnDecimalSeparator", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetLISTImportExportASCIIColumnDecimalSeparator(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Decimal_Separator);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetLISTImportExportASCIIColumnDecimalSeparator", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetLISTImportExportASCIIColumnDecimalSeparator(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Decimal_Separator);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_LISTImportExportCatalog", CallingConvention = CallingConvention.StdCall)]
            public static extern int LISTImportExportCatalog(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Array_Size, System.Text.StringBuilder Catalog_List);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_ConfigureClockSynthesis", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureClockSynthesis(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort CSYN_State, double Frequency, ushort Variation_Active, double Variation_Step);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetCSYNState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetCSYNState(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort CSYN_State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetCSYNState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetCSYNState(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort CSYN_State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetCSYNFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetCSYNFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Frequency);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetCSYNFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetCSYNFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Frequency);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetCSYNVariationStep", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetCSYNVariationStep(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Variation_Step);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetCSYNVariationStep", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetCSYNVariationStep(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Variation_Step);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetCSYNVariationActive", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetCSYNVariationActive(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Variation_Active);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetCSYNVariationActive", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetCSYNVariationActive(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort Variation_Active);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetCSYNPhase", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetCSYNPhase(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Phase);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetCSYNPhase", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetCSYNPhase(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Phase);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetCSYNPhaseReference", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetCSYNPhaseReference(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetCSYNDCOffsetState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetCSYNDCOffsetState(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort DC_Offset_State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetCSYNDCOffsetState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetCSYNDCOffsetState(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort DC_Offset_State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetCSYNDCOffset", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetCSYNDCOffset(System.Runtime.InteropServices.HandleRef Instrument_Handle, double DC_Offset);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetCSYNDCOffset", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetCSYNDCOffset(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double DC_Offset);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_confNoise", CallingConvention = CallingConvention.StdCall)]
            public static extern int confNoise(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Bandwidth_State, double Bandwidth, int Distribution);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetNOISEBandwidthState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetNOISEBandwidthState(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Bandwidth_State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetNOISEBandwidthState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetNOISEBandwidthState(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort Bandwidth_State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetNOISEBandwidth", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetNOISEBandwidth(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Bandwidth);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetNOISEBandwidth", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetNOISEBandwidth(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Bandwidth);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetNOISEDistribution", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetNOISEDistribution(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Distribution);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetNOISEDistribution", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetNOISEDistribution(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Distribution);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetNOISERelativeLevel", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetNOISERelativeLevel(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Relative_Level);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetNOISEAbsoluteLevel", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetNOISEAbsoluteLevel(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Absolute_Level);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_OvervoltageProtectionClear", CallingConvention = CallingConvention.StdCall)]
            public static extern int OvervoltageProtectionClear(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_OvervoltageProtectionTripped", CallingConvention = CallingConvention.StdCall)]
            public static extern int OvervoltageProtectionTripped(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Protective_Circuit_State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_CALibrationAll", CallingConvention = CallingConvention.StdCall)]
            public static extern int CALibrationAll(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Timeout, out int Response);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_CALibrationClockSynthesis", CallingConvention = CallingConvention.StdCall)]
            public static extern int CALibrationClockSynthesis(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Timeout, out int Response);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_CALibrationFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int CALibrationFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Timeout, out int Response);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_CALibrationModulationGenerators", CallingConvention = CallingConvention.StdCall)]
            public static extern int CALibrationModulationGenerators(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Timeout, out int Response);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_CALibrationLevel", CallingConvention = CallingConvention.StdCall)]
            public static extern int CALibrationLevel(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Timeout, out int Response);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetCALibrationLevelState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetCALibrationLevelState(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Level_State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetCALibrationLevelState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetCALibrationLevelState(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort Level_State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetCALibrationLevelAdjustmentData", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetCALibrationLevelAdjustmentData(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Adjustment_Data);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetCALibrationLevelAdjustmentData", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetCALibrationLevelAdjustmentData(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Adjustment_Data);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_CALibrationFMOffset", CallingConvention = CallingConvention.StdCall)]
            public static extern int CALibrationFMOffset(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Timeout, out int Response);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_CALibrationDMEMPulseSlope", CallingConvention = CallingConvention.StdCall)]
            public static extern int CALibrationDMEMPulseSlope(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Timeout, out int Response);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPULMExtInpImpedance", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPULMExtInpImpedance(System.Runtime.InteropServices.HandleRef Instrument_Handle, int PULM_External_Input_Impedance);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPULMExtInpImpedance", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPULMExtInpImpedance(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int PULM_External_Input_Impedance);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPulseExtInpImpedance", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPulseExtInpImpedance(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Pulse_External_Input_Impedance);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPulseExtInpImpedance", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPulseExtInpImpedance(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Pulse_External_Input_Impedance);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetImageFileName", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetImageFileName(System.Runtime.InteropServices.HandleRef Instrument_Handle, string File_Name);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetImageFileName", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetImageFileName(System.Runtime.InteropServices.HandleRef Instrument_Handle, string File_Name);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetImageFormat", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetImageFormat(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Image_Format);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetImageFormat", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetImageFormat(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Image_Format);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetImageSnapshot", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetImageSnapshot(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Destination);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetImageSize", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetImageSize(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Image_Size);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetImageSize", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetImageSize(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Image_Size);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetOutputDevice", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetOutputDevice(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Output_Device);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetOutputDevice", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetOutputDevice(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Output_Device);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SaveHardCopy", CallingConvention = CallingConvention.StdCall)]
            public static extern int SaveHardCopy(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetAutomaticNamingState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAutomaticNamingState(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetAutomaticNamingState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAutomaticNamingState(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetAutomaticFilePath", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAutomaticFilePath(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Array_Size, string File_Path);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetAutomaticFileName", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAutomaticFileName(System.Runtime.InteropServices.HandleRef Instrument_Handle, string File_Name);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetAutomaticDirectory", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAutomaticDirectory(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Directory_Name);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetAutomaticDirectory", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAutomaticDirectory(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Directory);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_DeleteImageFiles", CallingConvention = CallingConvention.StdCall)]
            public static extern int DeleteImageFiles(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetAutomaticFileDateState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAutomaticFileDateState(System.Runtime.InteropServices.HandleRef Instrument_Handle, int File_Name_Part, ushort State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetAutomaticFileDateState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAutomaticFileDateState(System.Runtime.InteropServices.HandleRef Instrument_Handle, int File_Name_Part, out ushort State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetAutomaticFileDate", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAutomaticFileDate(System.Runtime.InteropServices.HandleRef Instrument_Handle, int File_Name_Part, string Part);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetAutomaticFilePrefixState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAutomaticFilePrefixState(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetAutomaticFilePrefixState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAutomaticFilePrefixState(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetAutomaticFilePrefix", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAutomaticFilePrefix(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Prefix);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetAutomaticFilePrefix", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAutomaticFilePrefix(System.Runtime.InteropServices.HandleRef Instrument_Handle, string File_Name);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetAutomaticFileNumber", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAutomaticFileNumber(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Number);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_ClearStatus", CallingConvention = CallingConvention.StdCall)]
            public static extern int ClearStatus(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_EventStatusEnable", CallingConvention = CallingConvention.StdCall)]
            public static extern int EventStatusEnable(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Register_Value);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_EventStatusQuery", CallingConvention = CallingConvention.StdCall)]
            public static extern int EventStatusQuery(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Register_Value);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_IdentificationQuery", CallingConvention = CallingConvention.StdCall)]
            public static extern int IdentificationQuery(System.Runtime.InteropServices.HandleRef Instrument_Handle, System.Text.StringBuilder Instrument_Identification);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_IndividualStatusQuery", CallingConvention = CallingConvention.StdCall)]
            public static extern int IndividualStatusQuery(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int IST_Flag);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_OperationComplete", CallingConvention = CallingConvention.StdCall)]
            public static extern int OperationComplete(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_OperationCompleteQuery", CallingConvention = CallingConvention.StdCall)]
            public static extern int OperationCompleteQuery(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int OPC_State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_OptionIdentificationQuery", CallingConvention = CallingConvention.StdCall)]
            public static extern int OptionIdentificationQuery(System.Runtime.InteropServices.HandleRef Instrument_Handle, System.Text.StringBuilder Option_Identification);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_ParallelPollRegisterEnable", CallingConvention = CallingConvention.StdCall)]
            public static extern int ParallelPollRegisterEnable(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Register_Value);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_ParallelPollRegisterQuery", CallingConvention = CallingConvention.StdCall)]
            public static extern int ParallelPollRegisterQuery(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Register_Value);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_PowerOnStatusClear", CallingConvention = CallingConvention.StdCall)]
            public static extern int PowerOnStatusClear(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Register_Value);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_PowerOnStatusClearQuery", CallingConvention = CallingConvention.StdCall)]
            public static extern int PowerOnStatusClearQuery(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Register_Value);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_Recall", CallingConvention = CallingConvention.StdCall)]
            public static extern int Recall(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Instrument_Status);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_Save", CallingConvention = CallingConvention.StdCall)]
            public static extern int Save(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Instrument_Status);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_ServiceRequestEnable", CallingConvention = CallingConvention.StdCall)]
            public static extern int ServiceRequestEnable(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Register_Value);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_ServiceRequestEnableQuery", CallingConvention = CallingConvention.StdCall)]
            public static extern int ServiceRequestEnableQuery(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Register_Value);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_StatusByteQuery", CallingConvention = CallingConvention.StdCall)]
            public static extern int StatusByteQuery(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Status_Byte);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_Trigger", CallingConvention = CallingConvention.StdCall)]
            public static extern int Trigger(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_TriggerWaitOPC", CallingConvention = CallingConvention.StdCall)]
            public static extern int TriggerWaitOPC(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Timeout);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SelfTestQuery", CallingConvention = CallingConvention.StdCall)]
            public static extern int SelfTestQuery(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Error_Code);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_WaittoContinue", CallingConvention = CallingConvention.StdCall)]
            public static extern int WaittoContinue(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_PresetSignalPath", CallingConvention = CallingConvention.StdCall)]
            public static extern int PresetSignalPath(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_DIAGnosticModules", CallingConvention = CallingConvention.StdCall)]
            public static extern int DIAGnosticModules(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Module_Name, int Array_Size, System.Text.StringBuilder Module_Configuration);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_DIAGnosticModuleNames", CallingConvention = CallingConvention.StdCall)]
            public static extern int DIAGnosticModuleNames(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Array_Size, System.Text.StringBuilder Module_Names);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_DIAGnosticTestPoints", CallingConvention = CallingConvention.StdCall)]
            public static extern int DIAGnosticTestPoints(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Array_Size, System.Text.StringBuilder Test_Points);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_DIAGnosticTestPointVoltages", CallingConvention = CallingConvention.StdCall)]
            public static extern int DIAGnosticTestPointVoltages(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Test_Point_Name, out double Measured_Voltage);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_DIAGnosticOperationTime", CallingConvention = CallingConvention.StdCall)]
            public static extern int DIAGnosticOperationTime(System.Runtime.InteropServices.HandleRef Instrument_Handle, out uint Operation_Time);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_DIAGnosticPowerOnEvents", CallingConvention = CallingConvention.StdCall)]
            public static extern int DIAGnosticPowerOnEvents(System.Runtime.InteropServices.HandleRef Instrument_Handle, out uint Power_On_Events);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_TESTDirect", CallingConvention = CallingConvention.StdCall)]
            public static extern int TESTDirect(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Command, System.Text.StringBuilder Assembly_Response);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_TESTAllStart", CallingConvention = CallingConvention.StdCall)]
            public static extern int TESTAllStart(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_TESTAllResult", CallingConvention = CallingConvention.StdCall)]
            public static extern int TESTAllResult(System.Runtime.InteropServices.HandleRef Instrument_Handle, System.Text.StringBuilder Result);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetDisplayPowerSaveState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayPowerSaveState(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetDisplayPowerSaveState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplayPowerSaveState(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetDisplayPowerSaveHoldoff", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayPowerSaveHoldoff(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Holdoff);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetDisplayPowerSaveHoldoff", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplayPowerSaveHoldoff(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Holdoff);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetDisplayUpdateState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayUpdateState(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetDisplayUpdateState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplayUpdateState(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_diplayDialogOpen", CallingConvention = CallingConvention.StdCall)]
            public static extern int diplayDialogOpen(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Dialog);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_diplayDialogClose", CallingConvention = CallingConvention.StdCall)]
            public static extern int diplayDialogClose(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Dialog);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_getDisplayDialogID", CallingConvention = CallingConvention.StdCall)]
            public static extern int getDisplayDialogID(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Array_Size, System.Text.StringBuilder Dialog_IDs);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_MMEMoryCatalog", CallingConvention = CallingConvention.StdCall)]
            public static extern int MMEMoryCatalog(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Directory_Path, int Array_Size, System.Text.StringBuilder Catalog_List);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_MMEMoryCatalogLength", CallingConvention = CallingConvention.StdCall)]
            public static extern int MMEMoryCatalogLength(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Directory_Path, out int Catalog_Length);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_MMEMoryChangeDirectory", CallingConvention = CallingConvention.StdCall)]
            public static extern int MMEMoryChangeDirectory(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Directory_Name);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_MMEMoryCopy", CallingConvention = CallingConvention.StdCall)]
            public static extern int MMEMoryCopy(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Source_Path, string Destination_Path);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_MMEMoryBlockDataWrite", CallingConvention = CallingConvention.StdCall)]
            public static extern int MMEMoryBlockDataWrite(System.Runtime.InteropServices.HandleRef Instrument_Handle, string File_Name, int Binary_Block_Length, string Binary_Block_Data);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_MMEMoryBlockDataRead", CallingConvention = CallingConvention.StdCall)]
            public static extern int MMEMoryBlockDataRead(System.Runtime.InteropServices.HandleRef Instrument_Handle, string File_Name, int Binary_Block_Length, System.Text.StringBuilder Binary_Block_Data);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_MMEMoryDirectoryCatalog", CallingConvention = CallingConvention.StdCall)]
            public static extern int MMEMoryDirectoryCatalog(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Directory_Path, int Array_Size, System.Text.StringBuilder Catalog_List);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_MMEMoryDirectoryCatalogLength", CallingConvention = CallingConvention.StdCall)]
            public static extern int MMEMoryDirectoryCatalogLength(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Directory_Path, out int Catalog_Length);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_MMEMoryDelete", CallingConvention = CallingConvention.StdCall)]
            public static extern int MMEMoryDelete(System.Runtime.InteropServices.HandleRef Instrument_Handle, string File_Name);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_MMEMoryLoad", CallingConvention = CallingConvention.StdCall)]
            public static extern int MMEMoryLoad(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Instrument_Setting, string File_Name);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_MMEMoryMakeDirectory", CallingConvention = CallingConvention.StdCall)]
            public static extern int MMEMoryMakeDirectory(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Directory_Name);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_MMEMoryMove", CallingConvention = CallingConvention.StdCall)]
            public static extern int MMEMoryMove(System.Runtime.InteropServices.HandleRef Instrument_Handle, string File_Source, string File_Destination);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_MMEMoryRemoveDirectory", CallingConvention = CallingConvention.StdCall)]
            public static extern int MMEMoryRemoveDirectory(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Directory_Name);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_MMEMoryStore", CallingConvention = CallingConvention.StdCall)]
            public static extern int MMEMoryStore(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Instrument_Setting, string File_Name);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_setRegister", CallingConvention = CallingConvention.StdCall)]
            public static extern int setRegister(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Register_Group, int Register_Type, int Value);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_getRegister", CallingConvention = CallingConvention.StdCall)]
            public static extern int getRegister(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Register_Group, int Register_Type, out int Value);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_STATusPRESet", CallingConvention = CallingConvention.StdCall)]
            public static extern int STATusPRESet(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetSYSTemBeeper", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetSYSTemBeeper(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort System_Beeper);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetSYSTemBeeper", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSYSTemBeeper(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort System_Beeper);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SYSTemErrorQueueAll", CallingConvention = CallingConvention.StdCall)]
            public static extern int SYSTemErrorQueueAll(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Array_Size, System.Text.StringBuilder Error_Queue);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SYSTemErrorQueueCodeAll", CallingConvention = CallingConvention.StdCall)]
            public static extern int SYSTemErrorQueueCodeAll(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Array_Size, System.Text.StringBuilder Error_Queue_Code);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SYSTemErrorQueueCodeNext", CallingConvention = CallingConvention.StdCall)]
            public static extern int SYSTemErrorQueueCodeNext(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Error_Queue_Code_Next);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SYSTemErrorQueueCount", CallingConvention = CallingConvention.StdCall)]
            public static extern int SYSTemErrorQueueCount(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Error_Queue_Count);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SYSTemErrorAll", CallingConvention = CallingConvention.StdCall)]
            public static extern int SYSTemErrorAll(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Array_Size, System.Text.StringBuilder Error_Queue);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SYSTemUSBResource", CallingConvention = CallingConvention.StdCall)]
            public static extern int SYSTemUSBResource(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Array_Size, System.Text.StringBuilder USB_Resource);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SYSTemGPIBResource", CallingConvention = CallingConvention.StdCall)]
            public static extern int SYSTemGPIBResource(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Array_Size, System.Text.StringBuilder GPIB_Resource);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SYSTemSerialResource", CallingConvention = CallingConvention.StdCall)]
            public static extern int SYSTemSerialResource(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Array_Size, System.Text.StringBuilder Serial_Resource);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SYSTemHISLIPResource", CallingConvention = CallingConvention.StdCall)]
            public static extern int SYSTemHISLIPResource(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Array_Size, System.Text.StringBuilder HiSLIP_Resource);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SYSTemSocketResource", CallingConvention = CallingConvention.StdCall)]
            public static extern int SYSTemSocketResource(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Array_Size, System.Text.StringBuilder Socket_Resource);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SYSTemOptionUserDefined", CallingConvention = CallingConvention.StdCall)]
            public static extern int SYSTemOptionUserDefined(System.Runtime.InteropServices.HandleRef Instrument_Handle, string User_Defined_Identification);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SYSTemIdentificationUserDefined", CallingConvention = CallingConvention.StdCall)]
            public static extern int SYSTemIdentificationUserDefined(System.Runtime.InteropServices.HandleRef Instrument_Handle, string User_Defined_Identification);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetSYSTemAnnotationAmplitude", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetSYSTemAnnotationAmplitude(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Amplitude);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetSYSTemAnnotationAmplitude", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSYSTemAnnotationAmplitude(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort Amplitude);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetSystemAnnotationFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetSystemAnnotationFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Frequency);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetSystemAnnotationFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSystemAnnotationFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort Frequency);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetSYSTemAnnotationAll", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetSYSTemAnnotationAll(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetSYSTemAnnotationAll", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSYSTemAnnotationAll(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort State);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetSYSTemKeyboardLock", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetSYSTemKeyboardLock(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Keyboard_Lock);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetSYSTemKeyboardLock", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSYSTemKeyboardLock(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort Keyboard_Lock);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetSYSTemDisplayLock", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetSYSTemDisplayLock(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Display_Lock);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetSYSTemDisplayLock", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSYSTemDisplayLock(System.Runtime.InteropServices.HandleRef Instrument_Handle, out ushort Display_Lock);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetSYSTemProtect", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetSYSTemProtect(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Protection_Level, ushort Protection, string Password);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetSYSTemVersion", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSYSTemVersion(System.Runtime.InteropServices.HandleRef Instrument_Handle, System.Text.StringBuilder SCPI_Version);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetSYSTemBIOSVersion", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSYSTemBIOSVersion(System.Runtime.InteropServices.HandleRef Instrument_Handle, System.Text.StringBuilder BIOS_Version);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetSYSTemIdentification", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetSYSTemIdentification(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Identification);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetSYSTemIdentification", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSYSTemIdentification(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Identification);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetSYSTemStartupStatus", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSYSTemStartupStatus(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Startup_Complete);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetSYSTemNetworkIPAddress", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetSYSTemNetworkIPAddress(System.Runtime.InteropServices.HandleRef Instrument_Handle, string IP_Address);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetSYSTemNetworkIPAddress", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSYSTemNetworkIPAddress(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Array_Size, System.Text.StringBuilder IP_Address);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetSYSTemNetworkIPAddressSubnetMask", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetSYSTemNetworkIPAddressSubnetMask(System.Runtime.InteropServices.HandleRef Instrument_Handle, string IP_Address_Subnet_Mask);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetSYSTemNetworkIPAddressSubnetMask", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSYSTemNetworkIPAddressSubnetMask(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Array_Size, System.Text.StringBuilder IP_Address_Subnet_Mask);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetSYSTemNetworkIPAddressGateway", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetSYSTemNetworkIPAddressGateway(System.Runtime.InteropServices.HandleRef Instrument_Handle, string IP_Address_Gateway);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetSYSTemNetworkIPAddressGateway", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSYSTemNetworkIPAddressGateway(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Array_Size, System.Text.StringBuilder IP_Address_Gateway);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetSYSTemNetworkIPAddressMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetSYSTemNetworkIPAddressMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int IP_Address_Mode);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetSYSTemNetworkIPAddressMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSYSTemNetworkIPAddressMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int IP_Address_Mode);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetSYSTemNetworkCommonDomain", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetSYSTemNetworkCommonDomain(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Common_Domain);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetSYSTemNetworkCommonDomain", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSYSTemNetworkCommonDomain(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Array_Size, System.Text.StringBuilder Common_Domain);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetSYSTemNetworkCommonHostname", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetSYSTemNetworkCommonHostname(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Common_Hostname);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetSYSTemNetworkCommonHostname", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSYSTemNetworkCommonHostname(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Array_Size, System.Text.StringBuilder Common_Hostname);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetSYSTemNetworkDomain", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetSYSTemNetworkDomain(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Domain);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetSYSTemNetworkDomain", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSYSTemNetworkDomain(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Array_Size, System.Text.StringBuilder Domain);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetSYSTemNetworkWorkgroup", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSYSTemNetworkWorkgroup(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Array_Size, System.Text.StringBuilder Workgroup_Name);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetSYSTemNetworkGateway", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetSYSTemNetworkGateway(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Gateway);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetSYSTemNetworkGateway", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSYSTemNetworkGateway(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Array_Size, System.Text.StringBuilder Gateway);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetSYSTemNetworkResource", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSYSTemNetworkResource(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Array_Size, System.Text.StringBuilder Resource);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetSYSTemNetworkSubnetMask", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetSYSTemNetworkSubnetMask(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Subnet_Mask);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetSYSTemNetworkSubnetMask", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSYSTemNetworkSubnetMask(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Array_Size, System.Text.StringBuilder Subnet_Mask);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetSYSTemNetworkMACAddress", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSYSTemNetworkMACAddress(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Array_Size, System.Text.StringBuilder MAC_Address);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetSYSTemNetwork", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSYSTemNetwork(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetInstrumentTriggerInputSlope", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetInstrumentTriggerInputSlope(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Input_Trigger_Slope);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetInstrumentTriggerInputSlope", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetInstrumentTriggerInputSlope(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Input_Trigger_Slope);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_TriggerSourceAllSweeps", CallingConvention = CallingConvention.StdCall)]
            public static extern int TriggerSourceAllSweeps(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Trigger_Source_All_Sweeps);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_TriggerAllSweeps", CallingConvention = CallingConvention.StdCall)]
            public static extern int TriggerAllSweeps(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_TriggerRFFrequencySweep", CallingConvention = CallingConvention.StdCall)]
            public static extern int TriggerRFFrequencySweep(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_TriggerRFLevelSweep", CallingConvention = CallingConvention.StdCall)]
            public static extern int TriggerRFLevelSweep(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_TriggerListMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int TriggerListMode(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetAngleUnits", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAngleUnits(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Angle_Units);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetAngleUnits", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAngleUnits(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Angle_Units);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetPowerUnits", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerUnits(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Power_Units);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetPowerUnits", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerUnits(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Power_Units);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_SetVelocityUnits", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetVelocityUnits(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Velocity_Units);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_GetVelocityUnits", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetVelocityUnits(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Velocity_Units);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_readToFile", CallingConvention = CallingConvention.StdCall)]
            public static extern int readToFile(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Source, string Destination);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_writeFromFile", CallingConvention = CallingConvention.StdCall)]
            public static extern int writeFromFile(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Source, string Destination);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_errorCheckState", CallingConvention = CallingConvention.StdCall)]
            public static extern int errorCheckState(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort State_Checking);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_optionCheckState", CallingConvention = CallingConvention.StdCall)]
            public static extern int optionCheckState(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort State_Checking);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_rangeCheckState", CallingConvention = CallingConvention.StdCall)]
            public static extern int rangeCheckState(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Range_Checking);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_writeInstrData", CallingConvention = CallingConvention.StdCall)]
            public static extern int writeInstrData(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Write_Buffer);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_readInstrData", CallingConvention = CallingConvention.StdCall)]
            public static extern int readInstrData(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Number_Bytes_To_Read, System.Text.StringBuilder Read_Buffer, out int NumBytes_Read);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_DevicePreset", CallingConvention = CallingConvention.StdCall)]
            public static extern int DevicePreset(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_reset", CallingConvention = CallingConvention.StdCall)]
            public static extern int reset(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_self_test", CallingConvention = CallingConvention.StdCall)]
            public static extern int self_test(System.Runtime.InteropServices.HandleRef Instrument_Handle, out short Self_Test_Result, System.Text.StringBuilder Self_Test_Message);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_error_query", CallingConvention = CallingConvention.StdCall)]
            public static extern int error_query(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Error_Code, System.Text.StringBuilder Error_Message);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_revision_query", CallingConvention = CallingConvention.StdCall)]
            public static extern int revision_query(System.Runtime.InteropServices.HandleRef Instrument_Handle, System.Text.StringBuilder Instrument_Driver_Revision, System.Text.StringBuilder Firmware_Revision);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_delay", CallingConvention = CallingConvention.StdCall)]
            public static extern int delay(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Seconds);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_close", CallingConvention = CallingConvention.StdCall)]
            public static extern int close(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("rssma_64.dll", EntryPoint = "rssma_error_message", CallingConvention = CallingConvention.StdCall)]
            public static extern int error_message(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Status_Code, System.Text.StringBuilder Message);


            public static int TestForError(System.Runtime.InteropServices.HandleRef handle, int status)
            {
                if ((status < 0))
                {
                    PInvoke.ThrowError(handle, status);
                }
                return status;
            }

            public static int ThrowError(System.Runtime.InteropServices.HandleRef handle, int code)
            {
                System.Text.StringBuilder msg = new System.Text.StringBuilder(256);
                PInvoke.error_message(handle, code, msg);
                throw new System.Runtime.InteropServices.ExternalException(msg.ToString(), code);
            }
        }
    }

    public class rssmaConstants
    {

        public const int LfoutputSweepFrequencySpacingLinear = 0;

        public const int LfoutputSweepFrequencySpacingLogarithmic = 1;

        public const int SweepModeAuto = 0;

        public const int SweepModeSingle = 1;

        public const int SweepModeStep = 2;

        public const int SweepModeExtSingle = 3;

        public const int SweepModeExtStep = 4;

        public const int SweepModeExtStart = 5;

        public const int LfsweepSourceLf1 = 0;

        public const int LfsweepSourceLf2 = 1;

        public const int FreqSweepShapeSawt = 0;

        public const int FreqSweepShapeTri = 1;

        public const int LfoutputSourceLf1 = 0;

        public const int LfoutputSourceLf2 = 1;

        public const int LfoutputSourceLf12 = 2;

        public const int LfoutputSourceNoise = 3;

        public const int LfoutputSourceLf1noise = 4;

        public const int LfoutputSourceLf2noise = 5;

        public const int LfoutputShapeSine = 0;

        public const int LfoutputShapeSquare = 1;

        public const int LfoutputShapeTriangle = 2;

        public const int LfoutputShapeTrapeze = 3;

        public const int LfoutputShapeTrapezeFall = 0;

        public const int LfoutputShapeTrapezeHigh = 1;

        public const int LfoutputShapeTrapezeLow = 2;

        public const int LfoutputShapeTrapezeRise = 3;

        public const int AmSourceInt = 0;

        public const int AmSourceExt = 1;

        public const int AmSourceIntext = 2;

        public const int AmExternalCouplingAc = 0;

        public const int AmExternalCouplingDc = 1;

        public const int AmInternalSourceLf1 = 0;

        public const int AmInternalSourceLf2 = 1;

        public const int AmInternalSourceLf12 = 2;

        public const int AmInternalSourceNoise = 3;

        public const int AmInternalSourceLf1noise = 4;

        public const int AmInternalSourceLf2noise = 5;

        public const int ExtInputImpedanceG50 = 0;

        public const int ExtInputImpedanceG1k = 1;

        public const int ExternalCouplingAc = 0;

        public const int ExternalCouplingDc = 1;

        public const int FmModeNormal = 0;

        public const int FmModeLnois = 1;

        public const int FmExternalDigitalFormatBoffset = 0;

        public const int FmExternalDigitalFormatDcode = 1;

        public const int FmSourceInternal = 0;

        public const int FmSourceExternal = 1;

        public const int FmSourceIntext = 2;

        public const int FmSourceEdig = 3;

        public const int FmInternalSourceLf1 = 0;

        public const int FmInternalSourceLf2 = 1;

        public const int FmInternalSourceLf12 = 2;

        public const int FmInternalSourceNoise = 3;

        public const int FmInternalSourceLf1noise = 4;

        public const int FmInternalSourceLf2noise = 5;

        public const int PmModeHban = 0;

        public const int PmModeHdev = 1;

        public const int PmModeLnois = 2;

        public const int PulmSourceInternal = 0;

        public const int PulmSourceExternal = 1;

        public const int PulmSourceCoder = 2;

        public const int PulmTriggerModeAuto = 0;

        public const int PulmTriggerModeExternal = 1;

        public const int PulmTriggerModeEgate = 2;

        public const int PulmPolarityNormal = 0;

        public const int PulmPolarityInverted = 1;

        public const int InputTriggerSlopeNegative = 0;

        public const int InputTriggerSlopePositive = 1;

        public const int PulmModeSing = 0;

        public const int PulmModeDoub = 1;

        public const int PulmModePtr = 2;

        public const int DexcModeImport = 0;

        public const int DexcModeExport = 1;

        public const int DexcAsciiSourceFileExtTxt = 0;

        public const int DexcAsciiSourceFileExtCsv = 1;

        public const int DexcAsciiSourceFileColumnSepTab = 0;

        public const int DexcAsciiSourceFileColumnSepSem = 1;

        public const int DexcAsciiSourceFileColumnSepComma = 2;

        public const int DexcAsciiSourceFileColumnSepSpace = 3;

        public const int DexcAsciiSourceFileColumnDecSepDot = 0;

        public const int DexcAsciiSourceFileColumnDecSepComma = 1;

        public const int DmemModeInt = 0;

        public const int DmemModeRep = 1;

        public const int DmemShapeCos = 0;

        public const int DmemShapeCos2 = 1;

        public const int DmemShapeLin = 2;

        public const int SourceDmemChannelSufficX = 0;

        public const int SourceDmemChannelSufficY = 1;

        public const int DmeTriggerModeAuto = 0;

        public const int DmeTriggerModeExternal = 1;

        public const int DmeTriggerModeEgate = 2;

        public const int DmeTriggerModePsen = 3;

        public const int InputImpedanceG50 = 0;

        public const int InputImpedanceG10k = 1;

        public const int DmeGatePolarityNorm = 0;

        public const int DmeGatePolarityInv = 1;

        public const int SourceDmemChannelSufficIcao = 2;

        public const int SourceIcaoChannelX = 0;

        public const int SourceIcaoChannelY = 1;

        public const int SourceDmemAmSignalBoth = 0;

        public const int SourceDmemAmSignalChann1 = 1;

        public const int SourceDmemAmSignalChann2 = 2;

        public const int TimeSchemaStd = 0;

        public const int TimeSchemaUser = 1;

        public const int VormModeNorm = 0;

        public const int VormModeVar = 1;

        public const int VormModeSubc = 2;

        public const int VormModeFms = 3;

        public const int VormDirFrom = 0;

        public const int VormDirTo = 1;

        public const int VormSrcInt = 0;

        public const int VormSrcExt = 1;

        public const int VormCarrFreqStepDecimal = 0;

        public const int VormCarrFreqStepIcao = 1;

        public const int IlsgsmModeNorm = 0;

        public const int IlsgsmModeUlob = 1;

        public const int IlsgsmModeLlob = 2;

        public const int IlsgsmDdmDirUp = 0;

        public const int IlsgsmDdmDirDown = 1;

        public const int IlsDdmCoupFixed = 0;

        public const int IlsDdmCoupSdm = 1;

        public const int IlsDdmPolP90150 = 0;

        public const int IlsDdmPolP15090 = 1;

        public const int IlsgsmFreqStepDec = 0;

        public const int IlsgsmFreqStepIcao = 1;

        public const int IlsgsmIcaoChan18X = 0;

        public const int IlsgsmIcaoChan18Y = 1;

        public const int IlsgsmIcaoChan20X = 2;

        public const int IlsgsmIcaoChan20Y = 3;

        public const int IlsgsmIcaoChan22X = 4;

        public const int IlsgsmIcaoChan22Y = 5;

        public const int IlsgsmIcaoChan24X = 6;

        public const int IlsgsmIcaoChan24Y = 7;

        public const int IlsgsmIcaoChan26X = 8;

        public const int IlsgsmIcaoChan26Y = 9;

        public const int IlsgsmIcaoChan28X = 10;

        public const int IlsgsmIcaoChan28Y = 11;

        public const int IlsgsmIcaoChan30X = 12;

        public const int IlsgsmIcaoChan30Y = 13;

        public const int IlsgsmIcaoChan32X = 14;

        public const int IlsgsmIcaoChan32Y = 15;

        public const int IlsgsmIcaoChan34X = 16;

        public const int IlsgsmIcaoChan34Y = 17;

        public const int IlsgsmIcaoChan36X = 18;

        public const int IlsgsmIcaoChan36Y = 19;

        public const int IlsgsmIcaoChan38X = 20;

        public const int IlsgsmIcaoChan38Y = 21;

        public const int IlsgsmIcaoChan40X = 22;

        public const int IlsgsmIcaoChan40Y = 23;

        public const int IlsgsmIcaoChan42X = 24;

        public const int IlsgsmIcaoChan42Y = 25;

        public const int IlsgsmIcaoChan44X = 26;

        public const int IlsgsmIcaoChan44Y = 27;

        public const int IlsgsmIcaoChan46X = 28;

        public const int IlsgsmIcaoChan46Y = 29;

        public const int IlsgsmIcaoChan48X = 30;

        public const int IlsgsmIcaoChan48Y = 31;

        public const int IlsgsmIcaoChan50X = 32;

        public const int IlsgsmIcaoChan50Y = 33;

        public const int IlsgsmIcaoChan52X = 34;

        public const int IlsgsmIcaoChan52Y = 35;

        public const int IlsgsmIcaoChan54X = 36;

        public const int IlsgsmIcaoChan54Y = 37;

        public const int IlsgsmIcaoChan56X = 38;

        public const int IlsgsmIcaoChan56Y = 39;

        public const int IlsgsmSrcInt = 0;

        public const int IlsgsmSrcExt = 1;

        public const int IlslocmModeNorm = 0;

        public const int IlslocmModeLlob = 1;

        public const int IlslocmModeRlob = 2;

        public const int IlslocmDdmDirLeft = 0;

        public const int IlslocmDdmDirRight = 1;

        public const int MbmMarkerFreq400 = 0;

        public const int MbmMarkerFreq1300 = 1;

        public const int MbmMarkerFreq3000 = 2;

        public const int ChirpTriggerModeAuto = 0;

        public const int ChirpTriggerModeExt = 1;

        public const int ChirpTriggerModeEgat = 2;

        public const int ChirpTriggerSlopePos = 0;

        public const int ChirpTriggerSlopeNeg = 1;

        public const int ChirpImpedanceG10k = 0;

        public const int ChirpImpedanceG50 = 1;

        public const int ChirpDirectionUp = 0;

        public const int ChirpDirectionDown = 1;

        public const int ChirpTriggerLevelTtl = 0;

        public const int ChirpTriggerLevelPov5 = 1;

        public const int ChirpTriggerLevelM2v5 = 2;

        public const int ChirpGatePolarityInv = 0;

        public const int ChirpGatePolarityNorm = 1;

        public const int PhaseContFreqRangeNarr = 0;

        public const int PhaseContFreqRangeWide = 1;

        public const int FrequencyRclInclude = 0;

        public const int FrequencyRclExclude = 1;

        public const int RoscSourceInternal = 0;

        public const int RoscSourceExternal = 1;

        public const int ExternRefFreq5mhz = 0;

        public const int ExternRefFreq10mhz = 1;

        public const int ExternRefFreq13mhz = 2;

        public const int RoscSbanStandard = 0;

        public const int RoscSbanNarrow = 1;

        public const int RoscExternalFreq5mhz = 0;

        public const int RoscExternalFreq10mhz = 1;

        public const int PowerLevelRclInclude = 0;

        public const int PowerLevelRclExclude = 1;

        public const int OutputAmodeAuto = 0;

        public const int OutputAmodeFixed = 1;

        public const int OutputAmodeNorm = 2;

        public const int OutputAmodeHpow = 3;

        public const int OutputRfoffUnch = 0;

        public const int OutputRfoffFatt = 1;

        public const int NrpzPowerControlSensor1 = 0;

        public const int NrpzPowerControlSensor2 = 1;

        public const int NrpzPowerControlSensor3 = 2;

        public const int NrpzPowerControlSensor4 = 3;

        public const int OutputStatePonOff = 0;

        public const int OutputStatePonUnchanged = 1;

        public const int PowerAlcStateOff = 0;

        public const int PowerAlcStateOn = 1;

        public const int PowerAlcStateAuto = 2;

        public const int AlcOffModeShold = 0;

        public const int SensePowerUnitDbm = 0;

        public const int SensePowerUnitDbuv = 1;

        public const int SensePowerUnitWatt = 2;

        public const int SensePowerSourceA = 0;

        public const int SensePowerSourceB = 2;

        public const int SensePowerSourceUser = 1;

        public const int SensePowerFilterTypeAuto = 0;

        public const int SensePowerFilterTypeUser = 1;

        public const int SensePowerFilterTypeNsr = 2;

        public const int SensePowerSweepModeFreq = 0;

        public const int SensePowerSweepModePow = 1;

        public const int SensePowerSweepTimingNorm = 0;

        public const int SensePowerSweepTimingFast = 1;

        public const int SensePowerSweepSpacingLin = 0;

        public const int SensePowerSweepSpacingLog = 1;

        public const int SensePowerSweepModeTime = 2;

        public const int SensePowerSweepRmodeSing = 0;

        public const int SensePowerSweepRmodeCont = 1;

        public const int SensePowerPermPriorAver = 0;

        public const int SensePowerPermPriorPeak = 1;

        public const int SensePowerGateTrac1 = 0;

        public const int SensePowerGateTrac2 = 1;

        public const int SensePowerGateTrac3 = 2;

        public const int SensePowerSweepFreqTimingNorm = 0;

        public const int SensePowerSweepFreqTimingFast = 1;

        public const int SensePowerSweepFreqSpacingLin = 0;

        public const int SensePowerSweepFreqSpacingLog = 1;

        public const int SensePowerSweepYscaleAutoOff = 0;

        public const int SensePowerSweepYscaleAutoCexp = 1;

        public const int SensePowerSweepYscaleAutoFexp = 2;

        public const int SensePowerSweepYscaleAutoCfl = 3;

        public const int SensePowerSweepYscaleAutoFfl = 4;

        public const int SensePowerSweepPowerSpacingLin = 0;

        public const int SensePowerSweepPowerSpacingLog = 1;

        public const int SensePowerSweepPowerTimingNorm = 0;

        public const int SensePowerSweepPowerTimingFast = 1;

        public const int SensePowerTimeThresholdBaseVolt = 0;

        public const int SensePowerTimeThresholdBasePow = 1;

        public const int SensePowerTimeThresholdDistal = 0;

        public const int SensePowerTimeThresholdMesial = 1;

        public const int SensePowerTimeThresholdProxim = 2;

        public const int SensePowerTimeTrigSourceAuto = 0;

        public const int SensePowerTimeTrigSourceFree = 1;

        public const int SensePowerTimeTrigSourceExt = 2;

        public const int SweepTriggerEventsAnd = 0;

        public const int SweepTriggerEventsOr = 1;

        public const int PowerSweepTimeTriggerEventAnd = 0;

        public const int PowerSweepTimeTriggerEventOr = 1;

        public const int SensePowerSweepTraceColorInve = 0;

        public const int SensePowerSweepTraceColorGray = 1;

        public const int SensePowerSweepTraceColorYell = 2;

        public const int SensePowerSweepTraceColorBlue = 3;

        public const int SensePowerSweepTraceColorGree = 4;

        public const int SensePowerSweepTraceColorRed = 5;

        public const int SensePowerSweepTraceColorMagn = 6;

        public const int SensePowerSweepTraceCopyRef = 0;

        public const int SensePowerSweepTraceSourceS1 = 0;

        public const int SensePowerSweepTraceSourceS2 = 1;

        public const int SensePowerSweepTraceSourceS3 = 2;

        public const int SensePowerSweepTraceSourceRef = 3;

        public const int SensePowerSweepTraceSourceNon = 4;

        public const int SensePowerDispPulsAll = 0;

        public const int SensePowerDispPuls = 1;

        public const int SensePowerDispMark = 2;

        public const int SensePowerDispGate = 3;

        public const int SensePowerDispStan = 4;

        public const int SensePowerDispFullScr = 5;

        public const int SensePowerDispPowerAver = 6;

        public const int SensePowerDispPowerHref = 7;

        public const int SensePowerDispPowerRef = 8;

        public const int SensePowerDispPowerLref = 9;

        public const int SensePowerDispPowerMax = 10;

        public const int SensePowerDispPowerMin = 11;

        public const int SensePowerDispPowerPulseBase = 12;

        public const int SensePowerDispPowerPulseTop = 13;

        public const int SensePowerDispPulseDcycle = 14;

        public const int SensePowerDispPulseDur = 15;

        public const int SensePowerDispPulsePeriod = 16;

        public const int SensePowerDispPulseSep = 17;

        public const int SensePowerDispTranNegDur = 18;

        public const int SensePowerDispTranNegOcc = 19;

        public const int SensePowerDispTranNegOver = 20;

        public const int SensePowerDispTranPosDur = 21;

        public const int SensePowerDispTranPosOcc = 22;

        public const int SensePowerDispTranPosOver = 23;

        public const int SensePowerDisplayBcBlack = 0;

        public const int SensePowerDisplayBcWhite = 1;

        public const int SensePowerSweepHardcopyLangBmp = 0;

        public const int SensePowerSweepHardcopyLangJpg = 1;

        public const int SensePowerSweepHardcopyLangXpm = 2;

        public const int SensePowerSweepHardcopyLangPng = 3;

        public const int SensePowerSweepHardcopyLangCsv = 4;

        public const int HcopyDevFile = 0;

        public const int HcopySize320240 = 0;

        public const int HcopySize640480 = 1;

        public const int HcopySize800600 = 2;

        public const int HcopySize1024768 = 3;

        public const int SensePowerSweepHardcopyCsvHeaderOff = 0;

        public const int SensePowerSweepHardcopyCsvHeaderStd = 1;

        public const int SensePowerSweepHardcopyCsvOrientHor = 0;

        public const int SensePowerSweepHardcopyCsvOrientVer = 1;

        public const int SensePowerSweepHardcopyCsvColTab = 0;

        public const int SensePowerSweepHardcopyCsvColSem = 1;

        public const int SensePowerSweepHardcopyCsvColCom = 2;

        public const int SensePowerSweepHardcopyCsvColBln = 3;

        public const int SensePowerSweepHardcopyCsvDecpointDot = 0;

        public const int SensePowerSweepHardcopyCsvDecpointCom = 1;

        public const int HcopyAutoFileDay = 0;

        public const int HcopyAutoFileMonth = 1;

        public const int HcopyAutoFileYear = 2;

        public const int MathSubtractT1t1 = 0;

        public const int MathSubtractT1t2 = 1;

        public const int MathSubtractT1t3 = 2;

        public const int MathSubtractT1t4 = 3;

        public const int MathSubtractT1ref = 4;

        public const int MathSubtractT2t1 = 5;

        public const int MathSubtractT2t2 = 6;

        public const int MathSubtractT2t3 = 7;

        public const int MathSubtractT2t4 = 8;

        public const int MathSubtractT2ref = 9;

        public const int MathSubtractT3t1 = 10;

        public const int MathSubtractT3t2 = 11;

        public const int MathSubtractT3t3 = 12;

        public const int MathSubtractT3t4 = 13;

        public const int MathSubtractT3ref = 14;

        public const int MathSubtractT4t1 = 15;

        public const int MathSubtractT4t2 = 16;

        public const int MathSubtractT4t3 = 17;

        public const int MathSubtractT4t4 = 18;

        public const int MathSubtractT4ref = 19;

        public const int FreqCenterSpan = 0;

        public const int FreqStartStop = 1;

        public const int FreqSweepSpacingLin = 0;

        public const int FreqSweepSpacingLog = 1;

        public const int ListAttenModeNorm = 0;

        public const int ListAttenModeHpow = 1;

        public const int PowSweepShapeSawt = 0;

        public const int PowSweepShapeTri = 1;

        public const int SweepModeExtHop = 5;

        public const int SweepModeExtDhop = 6;

        public const int NoiseDistributionGauss = 0;

        public const int NoiseDistributionEqual = 1;

        public const int CalDataFact = 0;

        public const int CalDataCust = 1;

        public const int ExtInputImpedance1g0 = 1;

        public const int HcopyLangBmp = 0;

        public const int HcopyLangJpg = 1;

        public const int HcopyLangXpm = 2;

        public const int HcopyLangPng = 3;

        public const int TestCommandSsyn = 0;

        public const int TestCommandSsynex = 1;

        public const int TestCommandIqop3 = 2;

        public const int TestCommandIqop6 = 3;

        public const int TestCommandSatt3 = 4;

        public const int TestCommandSatt6 = 5;

        public const int TestCommandBbins = 6;

        public const int TestCommandDirectlast = 7;

        public const int RegisterOperation = 0;

        public const int RegisterQuestionable = 1;

        public const int RegisterEnable = 2;

        public const int RegisterNtr = 3;

        public const int RegisterPtr = 4;

        public const int RegisterCond = 0;

        public const int RegisterEvent = 1;

        public const int SystemIdentificationAuto = 0;

        public const int SystemIdentificationUser = 1;

        public const int SystemCommunicateIpModeStatic = 0;

        public const int SystemCommunicateIpModeAuto = 2;

        public const int TrigSourceSweepAuto = 0;

        public const int TrigSourceSweepImmediate = 1;

        public const int TrigSourceSweepSingle = 2;

        public const int TrigSourceSweepExternal = 3;

        public const int TrigSourceSweepBus = 4;

        public const int TrigSourceSweepEauto = 5;

        public const int UnitAngleDeg = 0;

        public const int UnitAngleRad = 1;

        public const int UnitPowerV = 0;

        public const int UnitPowerDbm = 1;

        public const int UnitVelocityMps = 0;

        public const int UnitVelocityKmh = 1;

        public const int UnitVelocityMph = 2;
    }
}
